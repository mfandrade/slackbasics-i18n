<!-- $Id: pkgmgmt.xml,v 1.9 2005/05/08 15:11:25 daniel Exp $ -->

<chapter id="sysadmin-pkgmgmt"> <?dbhtml filename="pkgmgmt.html"?>
  <title>Package Management</title>

  <sect1>
    <title>Pkgtools</title>

    <sect2>
      <title>Introduction</title>

      <para>
        &Distribution; does not use a complex package system, unlike
        many other &Kernel; distributions. Package have the
        <filename>.tgz</filename> extension, and are usually ordinary
        tarballs which contain two extra files: an installation script
        and a package description file.  Due to the simplicity of the
        packages the &Distribution; package tools do not have the
        means to handle dependencies. But many &Distribution; users
        prefer this approach, because dependencies often cause more
        problems than they solve.
      </para>

      <para>
        &Distribution; has a few tools to handle packages. The most
        important tools will be covered in this chapter. To learn to
        understand the tools we need to have a look at package
        naming. Let's have a look at an example, imagine that we have
        a package with the file name
        <filename>bash-2.05b-i386-2.tgz</filename>. In this case the
        name of the package is bash-2.05b-i386-2. In the package name
        information about the package is separated by the '-'
        character. A package name has the following meaning:
        <emphasis>programname-version-architecture-packagerevision</emphasis>
      </para>

    </sect2>

    <sect2>
      <title>pkgtool</title>

      <para>
        The <command>pkgtool</command> command provides a menu
        interface for some package operations. De most important menu
        items are <emphasis>Remove</emphasis> and
        <emphasis>Setup</emphasis>. The <emphasis>Remove</emphasis>
        option presents a list of installed packages. You can select
        which packages you want to remove with the space bar and
        confirm your choices with the return key. You can also
        deselect a package for removal with the space bar.
      </para>

      <para>
        The <emphasis>Setup</emphasis> option provides access to a few
        tools which can help you with configuring your system, for
        example: <command>netconfig</command>,
        <command>pppconfig</command> and <command>xwmconfig</command>.
      </para>

    </sect2>

    <sect2>
      <title>installpkg</title>

      <para>
        The <command>installpkg</command> command is used to install
        packages.  <command>installpkg</command> needs a package file
        as a parameter.  For example, if you want to install the
        package <filename>bash-2.05b-i386-2.tgz</filename> execute:
      </para>

      <screen>
# <command>installpkg bash-2.05b-i386-2.tgz</command>
      </screen>

    </sect2>

    <sect2>
      <title>upgradepkg</title>

      <para>
        <command>upgradepkg</command> can be used to upgrade
        packages. In contrast to <command>installpkg</command> it only
        installs packages when there is an older version available on
        the system. The command syntax is comparable to
        <command>installpkg</command>. For example, if you want to
        upgrade packages using package in a directory execute:
      </para>

      <screen>
# <command>upgradepkg *.tgz</command>
      </screen>

      <para>
        As said only those packages will be installed of which an other
        version is already installed on the system.
      </para>

    </sect2>

    <sect2>
      <title>removepkg</title>

      <para>
        The <command>removepkg</command> can be used to remove
        installed packages. For example, if you want to remove the
        <quote>bash</quote> package (it is not recommended to do
        that!), you can execute:
      </para>

      <screen>
# <command>removepkg bash</command>
      </screen>

      <para>
        As you can see only the name of the package is specified in
        this example. You can also remove a package by specifying its
        full name:
      </para>

      <screen>
# <command>removepkg bash-2.05b-i386-2</command>
      </screen>

    </sect2>

  </sect1>

  <sect1>
    <title>Slackpkg</title>

    <sect2>
      <title>Introduction</title>

      <para>
        Slackpkg is a package tool written by Roberto F. Batista and
        Evaldo Gardenali.  It helps users to install and upgrade
        &Distribution; packages using one of the &Distribution;
        mirrors. Slackpkg is included in the
        <filename>extra/</filename> directory on the second CD of the
        &Distribution; CD set.
      </para>

    </sect2>

    <sect2>
      <title>Configuration</title>

      <para>
        Slackpkg is configured through some files in
        <filename>/etc/slackpkg</filename>. The first thing you should
        do is configuring which mirror slackpkg should use. This can
        be done by editing the
        <filename>/etc/slackpkg/mirrors</filename>. This file already
        contains a list of mirrors, you can just uncomment a mirror
        close to you. For example:
      </para>

      <screen>
ftp://ftp.nluug.nl/pub/os/&Kernel;/distr/slackware/slackware-10.1/
      </screen>

      <para>
        This will use the &Distribution; 10.1 tree on the ftp.nluug.nl
        mirror.  Be sure to use a tree that matches your
        &Distribution; version. If you would like to track
        slackware-current you would uncomment the following line
        instead (when you would like to use the NLUUG mirror):
      </para>

      <screen>
ftp://ftp.nluug.nl/pub/os/&Kernel;/distr/slackware/slackware-current/
      </screen>

      <para>
        Slackpkg will only accept one mirror. Commenting out more
        mirrors will not work.
      </para>

    </sect2>

    <sect2>
      <title>Importing the &Distribution; GPG key</title>

      <para>
        By default slackpkg checks packages using the package
        signatures and the public &Distribution; GPG key. Since this
        is a good idea from a security point of view, you probably do
        not want to change this behaviour. To be able to verify
        packages you have to import the
        <emphasis>security@slackware.com</emphasis> GPG key. If you
        have not used GPG before you have to create the GPG directory
        in the home directory of the <emphasis>root</emphasis> user:
      </para>

      <screen>
# <command>mkdir ~/.gnupg</command>
      </screen>

      <para>
        The next step is to search for the public key of
        <emphasis>security@slackware.com</emphasis>. We will do this
        by querying the <emphasis>pgp.mit.edu</emphasis> server:
      </para>

      <screen>
# <command>gpg --keyserver pgp.mit.edu --search security@slackware.com</command>
gpg: keyring `/root/.gnupg/secring.gpg' created
gpg: keyring `/root/.gnupg/pubring.gpg' created
gpg: searching for "security@slackware.com" from HKP server pgp.mit.edu
Keys 1-2 of 2 for "security@slackware.com"
(1)     &Distribution; Project &lt;security@slackware.com&gt;
          1024 bit DSA key 40102233, created 2003-02-25
(2)     &Distribution; Project &lt;security@slackware.com&gt;
          1024 bit DSA key 40102233, created 2003-02-25
Enter number(s), N)ext, or Q)uit &gt; 
      </screen>

      <para>
        As you can see we have got two (identical) hits. Select the
        first one by entering <quote>1</quote>. GnuPG will import this
        key in the keyring of the <emphasis>root</emphasis> user:
      </para>

      <screen>
Enter number(s), N)ext, or Q)uit > <command>1</command>
gpg: key 40102233: duplicated user ID detected - merged
gpg: /root/.gnupg/trustdb.gpg: trustdb created
gpg: key 40102233: public key "&Distribution; Project &lt;security@slackware.com&gt;" imported
gpg: Total number processed: 1
gpg:               imported: 1
      </screen>

      <para>
        Be sure to double check the key you received. The key ID and
        fingerprint of this particular key can be found on the
        Internet on many trustworthy sites. The key ID is, as
        mentioned above <emphasis>40102233</emphasis>.  You can get
        the key fingerprint with the <parameter
        class="command">--fingerprint</parameter> parameter:
      </para>

      <screen>
# <command>gpg --fingerprint security@slackware.com</command>
pub  1024D/40102233 2003-02-26 &Distribution; Project &lt;security@slackware.com&gt;
     Key fingerprint = EC56 49DA 401E 22AB FA67  36EF 6A44 63C0 4010 2233
sub  1024g/4E523569 2003-02-26 [expires: 2012-12-21]
      </screen>

      <para>
        Once you have imported and checked this key you can start to
        use slackpkg, and install packages securely.
      </para>

    </sect2>

    <sect2>
      <title>Updating the package lists</title>

      <para>
        Before upgrading and installing packages you have to let
        slackpkg download the package lists from the mirror you are
        using. It is a good idea to do this regularly to keep these
        lists up to date. The latest package lists can be fetched
        with:
      </para>

      <screen>
$ <command>slackpkg update</command>
      </screen>

    </sect2>

    <sect2>
      <title>Upgrading packages</title>

      <para>
        The <parameter class="command">upgrade</parameter> parameter
        is used to upgrade installed packages. You have to add an
        extra parameter to actually tell <command>slackpkg</command>
        what you want to upgrade, this differs for a stable
        &Distribution; version and slackware-current. Upgrades for
        stable &Distribution; releases are in the
        <filename>patches</filename> directory of FTP mirrors. You can
        update a slackware-stable installation (e.g. &Distribution;
        10.1) with:
      </para>

      <screen>
# <command>slackpkg upgrade patches</command>
      </screen>

      <para>
        In this case <command>slackpkg</command> will use the packages
        from the <filename>patches</filename> directory. In
        slackware-current updated packages are put in the normal
        <filename>slackware</filename> package sub-directories. So, we
        can pass that as an parameter to <command>slackpkg
        upgrade</command>:
      </para>

      <screen>
# <command>slackpkg upgrade slackware</command>
      </screen>

      <para>
        You can also upgrade individual packages by specifying the name
        of the package to be upgraded, for example:
      </para>

      <screen>
# <command>slackpkg upgrade pine</command>
      </screen>

    </sect2>

    <sect2>
      <title>Installing packages</title>

      <para>
        The <parameter class="command">install</parameter> is used to install 
        packages:
      </para>

      <screen>
# <command>slackpkg install rexima</command>
      </screen>

      <para>
        Be aware that neither slackpkg, nor the &Distribution; package
        tools do dependency checking. If some program does not work
        due to missing libraries, you have to add them yourself with
        slackpkg.
      </para>

    </sect2>

  </sect1>

  <sect1>
    <title>Using rsync</title>

    <para>
      Another popular method of keeping &Distribution; up to date is by
      keeping a local mirror. The ideal way of doing this is via rsync.
      rsync is a program that can synchronize two trees of files. The
      advantage is that rsync only transfers the differences in files,
      making it very fast. After syncing with a mirror you can upgrade
      &Distribution; with <command>upgradepkg</command>, or make a
      new installation CD. The following example synchronizes a local
      current tree with an up-to-date tree from on a mirror:
    </para>

    <screen>
# <command>rsync -av --delete \
--exclude=slackware/kde \
--exclude=slackware/kdei \
--exclude=slackware/gnome \
--exclude=bootdisks \
--exclude=extra \
--exclude=testing \
--exclude=pasture \
--exclude=rootdisks \
--exclude=source \
--exclude=zipslack \
rsync://fill-in-mirror/pub/slackware/slackware-current/ \
/usr/share/mirrors/slackware-current</command>
    </screen>

    <para>
      The <parameter class="command">-a</parameter> parameter implies
      a few other options that try to make a copy that is as exact
      as possible (in terms of preserving symlinks, permissions and
      owners). The <parameter class="command">--delete</parameter>
      deletes files that are not available on the mirror anymore.
      It is good idea to use this parameter, because otherwise your
      tree may get bloated very quickly with older package versions.
      With the <parameter class="command">--exclude</parameter>
      parameter you can specify which files or directories should
      be ignored.
    </para>

    <para>
      After syncing the tree you can use <command>upgradepkg</command>
      to update your &Distribution; installation. For example:
    </para>

    <screen>
# <command>upgradepkg /usr/share/mirrors/slackware-current/slackware/*/*.tgz</command>
    </screen>

  </sect1>

  <sect1 id="sysadmin-pkgmgmt-tagfiles">
    <title>Tagfiles</title>

    <sect2 id="sysadmin-pkgmgmt-tagfiles-introduction">
      <title>Introduction</title>

      <para>
        Tagfiles are a relatively unknown feature of &Distribution;. A
        tagfile is a file that can be used to instruct
        <command>installpkg</command> what packages should be installed
        from a collection of packages. For instance, the &Distribution; 
        installer generates a tagfile during the <emphasis>Expert</emphasis>
        and <emphasis>Menu</emphasis> installation methods to store which
        packages should be installed during the installation process.
      </para>

      <para>
        The nice aspect of tagfiles is that you can easily create tagfiles
        yourself. By writing your own tagfiles you can automate the package
        installation, which is ideal for larger client or server roll-outs
        (or smaller set-ups if it gives you more comfort than installing
        packages manually). The easiest way to create your own tagfiles
        is by starting out with the tagfiles that are part of the official
        &Distribution; distribution. In the following sections we are going
        to look at how this is done.
      </para>
    </sect2>

    <sect2 id="sysadmin-pkgmgmt-tagfiles-creating">
      <title>Creating tagfiles</title>

      <para>
        Tagfiles are simple plain-text files. Each line consists of a
        package name and a flag, these two elements are separated by
        a colon and a space. The flag specifies what should be done
        with a package. The fields are described in
        <xref linkend="sysadmin-pkgmgmt-tagfiles-creating-fields" />.
        Let's look at a few lines from the tagfile in the <quote>a</quote>
        disk set:
      </para>

      <screen>
aaa_base: ADD
aaa_elflibs: ADD
acpid: REC
apmd: REC
bash: ADD
bin: ADD
      </screen>

      <para>
        It should be noted that you can also add comments to tagfiles
        with the usual comment (#) character. As you can see in the
        snippet above there are different flags. The table listed below
        describes the four different flags.
      </para>

      <table id="sysadmin-pkgmgmt-tagfiles-creating-fields">
        <title>Tagfile fields</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>Flag</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ADD</entry>
              <entry>A package marked by this flag will automatically be
              installed</entry>
            </row>
            <row>
              <entry>SKP</entry>
              <entry>A package marked by this flag will automatically be
              skipped</entry>
            </row>
            <row>
              <entry>REC</entry>
              <entry>Ask the user what to do, recommend installation of
              the package.</entry>
            </row>
            <row>
              <entry>OPT</entry>
              <entry>Ask the user what to do, the package will be described
              as optional.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>
        As you can read from the table <command>installpkg</command> will
        only act automatically when either <emphasis>ADD</emphasis> or
        <emphasis>SKP</emphasis> is used.
      </para>

      <para>
        It would be a bit tedious to write a tagfile for each &Distribution;
        disk set. The official &Distribution; distribution contains a tagfile
        in the directory for each disk set. You can use these tagfiles as
        a start. The short script listed below can be used to copy the
        tagfiles to the current directory, preserving the disk set structure.
      </para>

      <screen>
#!/bin/sh

if [ ! $# -eq 1 ] ; then
  echo "Syntax: $0 [directory]"
  exit
fi

for i in $1/*/tagfile; do 
  setdir=`echo $i | egrep -o '\w+/tagfile$' | xargs dirname`
  mkdir $setdir
  cp $i $setdir
done
      </screen>

      <para>
        After writing the script to a file you can execute it, and specify
        a <filename>slackware/</filename> directory that provides the disk
        sets. For example:
      </para>

      <screen>
$ <command>sh copy-tagfiles.sh /mnt/flux/slackware-current/slackware</command>
      </screen>

      <para>
        After doing this the current directory will contain a directory
        structure like this, in which you can edit the individual tag
        files:
      </para>

      <screen>
a/tagfile
ap/tagfile
d/tagfile
e/tagfile
[...]
      </screen>
    </sect2>

    <sect2 id="sysadmin-pkgmgmt-tagfiles-using">
      <title>Using tagfiles</title>

      <para>
        On an installed system you can let <command>installpkg</command> use
        a tagfile with the <parameter class="command">-tagfile</parameter>
        parameter. For example:
      </para>

      <screen>
# <command>installpkg -root /mnt-small -tagfile a/tagfile /mnt/flux/slackware-current/slackware/a/*.tgz</command>
      </screen>

      <para>
        Of course, tagfiles would be useless if they cannot be used during
        the installation of &Distribution;. This is certainly possible:
        after selecting which disk sets you want to install you can choose
        in what way you want to select packages (the dialog is named
        <emphasis>SELECT PROMPTING MODE</emphasis>. Select
        <emphasis>tagpath</emphasis> from this menu. You will then be
        asked to enter the path to the directory structure with the tagfiles.
        The usual way to provide tagfiles to the &Distribution; installation
        is to put them on a floppy or another medium, and mounting this
        before or during the installation. E.g. you can switch to the
        second console with by pressing the &lt;ALT&gt; and &lt;F2&gt;
        keys, and create a mount point and mount the disk with the tagfiles:
      </para>

      <screen>
# <command>mkdir /mnt-tagfiles</command>
# <command>mount /dev/fd0 /mnt/mnt-tagfiles</command>
      </screen>

      <para>
        After mounting the disk you can return to the virtual console on
        which you run <command>setup</command>, by pressing lt;ALT&gt; and
        &lt;F1&gt;.
      </para>
    </sect2>
  </sect1>

</chapter>
