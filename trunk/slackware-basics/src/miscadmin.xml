<!-- $Id: miscadmin.xml,v 1.2 2005/05/03 20:00:47 daniel Exp $ -->

<chapter id="sysadmin-misc"> <?dbhtml filename="miscadmin.html"?>
  <title>Miscellaneous</title>

  <sect1 id="sysadmin-misc-cron">
    <sect1info>
    <authorgroup>
      <author>
        <firstname>Murray</firstname>
	<surname>Stokely</surname>
	<contrib>Written by </contrib>
      </author>
    </authorgroup>

    <!-- You can modify the stylesheet to not display the above in
         print or HTML output.  It's just a way to keep things clear
	 in the source document. -->

    </sect1info>

    <title>Scheduling tasks with cron</title>

    <indexterm><primary>cron</primary></indexterm>
    <indexterm><primary>crontab file</primary></indexterm>
    <indexterm><primary>scheduling</primary><secondary>tasks</secondary></indexterm>

    <para>&Distribution; includes an implementation of the classic Unix
      cron daemon that allows users to schedule tasks for execution at
      regular intervals.  Each user can create, remove, or modify an
      individual crontab file.  This crontab file specifies commands
      or scripts to be run at specified time intervals.  Blank lines
      in the crontab or lines that begin with a hash
      (<quote><literal>#</literal></quote>) are ignored.</para>

    <para>Each entry in the crontab file must contain 6 fields
      separated by spaces.  These fields are minute, hour, day, month,
      day of week, and command.  Each of the first five fields may
      contain a time or the <quote><literal>*</literal></quote>
      wildcard to match all times for that field.  For example, to
      have the <command>date</command> command run every day at 6:10
      AM, the following entry could be used.</para>

    <programlisting>10 6 * * * date</programlisting>

    <para>A user crontab may be viewed with the <command>crontab
    -l</command> command.  For a deeper introduction to the syntax of
    a crontab file, let us examine the default
    <emphasis>root</emphasis> crontab.</para>

    <screen># <userinput>crontab -l</userinput>
# If you don't want the output of a cron job mailed to you, you have to direct
# any output to /dev/null.  We'll do this here since these jobs should run
# properly on a newly installed system, but if they don't the average newbie
# might get quite perplexed about getting strange mail every 5 minutes. :^)
#
# Run the hourly, daily, weekly, and monthly cron jobs.
# Jobs that need different timing may be entered into the crontab as before,
# but most really don't need greater granularity than this.  If the exact
# times of the hourly, daily, weekly, and monthly cron jobs do not suit your
# needs, feel free to adjust them.
#
# Run hourly cron jobs at 47 minutes after the hour:
<co id="co-crontab-1" />47 <co id="co-crontab-2" />* <co id="co-crontab-3" />* <co id="co-crontab-4" />* <co id="co-crontab-5" />* <co id="co-crontab-6" />/usr/bin/run-parts /etc/cron.hourly 1&gt; /dev/null
#
# Run daily cron jobs at 4:40 every day:
40 4 * * * /usr/bin/run-parts /etc/cron.daily 1> /dev/null
#
# Run weekly cron jobs at 4:30 on the first day of the week:
30 4 * * 0 /usr/bin/run-parts /etc/cron.weekly 1> /dev/null
#
# Run monthly cron jobs at 4:20 on the first day of the month:
20 4 1 * * /usr/bin/run-parts /etc/cron.monthly 1> /dev/null</screen>


    <calloutlist>
      <callout arearefs="co-crontab-1">
        <para>The first field, <literal>47</literal>, specifies that
          this job should occur at 47 minutes after the hour.</para>
      </callout>

      <callout arearefs="co-crontab-2">
        <para>The second field, <literal>*</literal>, is a wildcard,
          so this job should occur <emphasis>every</emphasis> hour.</para>
      </callout>

      <callout arearefs="co-crontab-3">
        <para>The third field, <literal>*</literal>, is a wildcard,
          so this job should occur <emphasis>every</emphasis> day.</para>
      </callout>

      <callout arearefs="co-crontab-4">
        <para>The fourth field, <literal>*</literal>, is a wildcard,
          so this job should occur <emphasis>every</emphasis> month.</para>
      </callout>

      <callout arearefs="co-crontab-5">
        <para>The fifth field, <literal>*</literal>, is a wildcard,
          so this job should occur <emphasis>every</emphasis> day of the week.</para>
      </callout>

      <callout arearefs="co-crontab-6">
        <para>The sixth field, <command>/usr/bin/run-parts
	  /etc/cron.hourly 1> /dev/null</command>, specifies the
	  command that should be run at the time specification defined
	  in the first five fields.</para>
      </callout>
    </calloutlist>

    <indexterm><primary>periodic scripts</primary></indexterm>
    <indexterm><primary>slocate</primary></indexterm>

    <para>The default root crontab is setup to run scripts in
      <filename>/etc/cron.monthly</filename> on a monthly basis, the
      scripts in <filename>/etc/cron.weekly</filename> on a weekly
      basis, the scripts in <filename>/etc/cron.daily</filename> on a
      daily basis, and the scripts in
      <filename>/etc/cron.hourly</filename> on an hourly basis.  For
      this reason it is not strictly necessary for an administrator to
      understand the inner workings of cron at all.  With &Distribution;,
      you can simply add a new script to one of the above directories
      to schedule a new periodic task.  Indeed, perusing those
      directories will give you a good idea of the work that &Distribution;
      does behind the scenes on a regular basis to keep things like
      the <command>slocate</command> database updated.</para>

  </sect1>
</chapter>
