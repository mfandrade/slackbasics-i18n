<!-- $Id: security.xml 283 2007-09-18 20:14:31Z danieldk $ -->

<chapter> <?dbhtml filename="security.html"?>
<title>Security</title>

<sect1>
<title>Introduction</title>

<para>
With the increasing usage of the Internet and wireless networks security
is getting more important every day. It is impossible to cover this subject
in a single chapter of an introduction to GNU/Linux. This chapter covers
some basic security techniques that provide a good start for desktop
and server security.
</para>

<para>
Before we go on to specific subjects, it is a good idea to make some remarks
about passwords. Computer authorization largely relies on passwords. Be
sure to use good passwords in all situations. Avoid using words, names,
birth dates and short passwords. These passwords can easily be cracked
with dictionary attacks or brute force attacks against hosts or password
hashes. Use long passwords, ideally eight characters or longer, consisting
of random letters (including capitals) and numbers.
</para>
</sect1>

<sect1>
<title>Closing services</title>

<sect2>
<title>Introduction</title>

<para>
Many GNU/Linux run some services that are open to a local network or the
Internet. Other hosts can connect to these services by connecting to specific
ports. For example, port 80 is used for WWW traffic. The
<filename>/etc/services</filename> file contains a table with all commonly
used services, and the port numbers that are used for these services.
</para>

<para>
A secure system should only run the services that are necessary. So, suppose
that a host is acting as a web server, it should not have ports open (thus
servicing) FTP or SMTP. With more open ports security risks increase very
fast, because there is a bigger chance that the software servicing a port
has a vulnerability, or is badly configured. The following few sections
will help you tracking down which ports are open, and closing them.
</para>
</sect2>

<sect2>
<title>Finding open ports</title>

<para>
Open ports can be found using a port scanner. Probably the most famous 
port scanner for GNU/Linux is <command>nmap</command>. <command>nmap</command>
is available through the <quote>n</quote> disk set. 
</para>

<para>
The basic <command>nmap</command> syntax is: <command>nmap host</command>. The
<emphasis>host</emphasis> parameter can either be a hostname or IP address.
Suppose that we would like to scan the host that <command>nmap</command>
is installed on. In this case we could specify the 
<emphasis>localhost</emphasis> IP address, <emphasis>127.0.0.1</emphasis>:
</para>

<screen>
$ <command>nmap 127.0.0.1</command>

Starting nmap V. 3.00 ( www.insecure.org/nmap/ )
Interesting ports on localhost (127.0.0.1):
(The 1596 ports scanned but not shown below are in state: closed)
Port       State       Service
21/tcp     open        ftp                     
22/tcp     open        ssh                     
23/tcp     open        telnet                  
80/tcp     open        http                    
6000/tcp   open        X11                     

Nmap run completed -- 1 IP address (1 host up) scanned in 0 seconds
</screen>

<para>
In this example you can see that the host has five open ports that are
being serviced; ftp, ssh, telnet, http and X11.
</para>
</sect2>

<sect2>
<title>inetd</title>

<para>
There are two ways to offer TCP/IP services: by running server
applications  stand-alone as a daemon or by using the internet super
server, <command>inetd</command>. inetd  is a daemon which monitors
a range of ports. If a client attempts to connect  to a port inetd
handles the connection and forwards the connection to the  server
software which handles that kind of connection. The advantage of this
approach is that it adds an extra layer of security and it makes it
easier to  log incoming connections. The disadvantage is that it is
somewhat slower than  using a stand-alone daemon. It is thus a good
idea to run a stand-alone daemon on, for example, a heavily loaded FTP
server.
</para>

<para>
You can check whether <command>inetd</command> is running on a host or
not with <command>ps</command>, for example:
</para>

<screen>
$ <command>ps ax | grep inetd</command>
 2845 ?        S      0:00 /usr/sbin/inetd
</screen>

<para>
In this example inetd is running with PID (process ID) 2845. 
<command>inetd</command> can be configured using the
<filename>/etc/inetd.conf</filename> file. Let's have a look at an example 
line from inetd.conf:
</para>

<screen>
# File Transfer Protocol (FTP) server:
ftp     stream  tcp     nowait  root    /usr/sbin/tcpd  proftpd
</screen>

<para>
This line specifies that inetd should accept FTP connections and pass them to 
<command>tcpd</command>. This may seem a bit odd, because 
<command>proftpd</command> normally handles FTP connections. You can also 
specify to use proftpd directly in <filename>inetd.conf</filename>, but 
it is a good idea to give the connection to <command>tcpd</command>. This 
program passes the connection to <command>proftpd</command> in turn, as 
specified. <command>tcpd</command> is used to monitor services and to provide 
host based access control. 
</para>

<para>
Services can be disabled by adding the comment character (#) at the beginning 
of the line. It is a good idea to disable all services and enable services you 
need one at a time. After changing <filename>/etc/inetd.conf</filename> 
<command>inetd</command> needs to be restarted to activate the changes. This 
can be done by sending the HUP signal to the inetd process:
</para>

<screen>
# <command>ps ax | grep 'inetd'</command>
   2845 ?        S      0:00 /usr/sbin/inetd
# <command>kill -HUP 2845</command>
</screen>

<para>
If you do not need <command>inetd</command> at all, it is a good idea to
remove it. If you want to keep it installed, but do not want Slackware Linux
to load it at the booting process, execute the following command as root:
</para>

<screen>
# <command>chmod a-x /etc/rc.d/rc.inetd</command>
</screen>
</sect2>
</sect1>

</chapter>
