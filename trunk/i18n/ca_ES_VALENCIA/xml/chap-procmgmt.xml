<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xmlns:xl="http://www.w3.org/1999/xlink" xml:lang="en"
	 xml:id="chap-procmgmt">

  <title>Process management</title>

  <sect1 xml:id="chap-procmgmt-theory">
    <title>Theory</title>

    <sect2 xml:id="chap-procmgmt-theory-proc">
      <title>Processes</title>

      <para>
	A running instance of a program is called a
	<emphasis>process</emphasis>. Each process has its own
	protected memory, named the <emphasis>process address
	space</emphasis>. This address space consists of two areas:
	the <emphasis>text area</emphasis> and the <emphasis>data
	area</emphasis>. The text area contains the actual program
	code, and tells the system what to do. The data area stores
	constant and runtime data of a process. Since there are many
	processes on a system, and only one or a few processors, the
	operating system kernel divides processor time between
	processes. This process is called
	<emphasis>time-sharing</emphasis>.
      </para>

      <table xml:id="chap-procmgmt-theory-proc-struct">
	<title>The structure of a process</title>

	<tgroup cols="2">
	  <thead>
	    <row><entry>Field</entry><entry>Description</entry></row>
	  </thead>

	  <tbody>
	    <row>
	      <entry>pid</entry><entry>The numeric process identifier</entry>
	    </row>
	    <row>
	      <entry>ppid</entry><entry>The process identifier of the
	      parent process</entry>
	    </row>
	    <row>
	      <entry>euid</entry><entry>The effective user ID of the
	      process.</entry>
	    </row>
	    <row>
	      <entry>ruid</entry><entry>The real user ID of the process</entry>
	    </row>
	    <row>
	      <entry>egid</entry><entry>The group ID of the process</entry>
	    </row>
	    <row>
	      <entry>rgid</entry><entry>The real group ID of the
	      process</entry>
	    </row>
	    <row>
	      <entry>fd</entry><entry>Pointer to the list of open file
	      descriptors</entry>
	    </row>
	    <row>
	      <entry>vmspace</entry><entry>Pointer to the process
	      address space.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	<xref linkend="chap-procmgmt-theory-proc-struct" /> lists the
	most important fields of information that a kernel stores
	about a process. Each process can be identified uniquely by
	its <emphasis>PID</emphasis> (process identifier), which is an
	unsigned number. As we will see later, a user can easily
	retrieve the PID of a process. Each process is associated with
	a <emphasis>UID</emphasis> (user ID) and
	<emphasis>GID</emphasis> (group ID) on the system. Each
	process has a <emphasis>real UID</emphasis>, which is the UID
	as which the process was started, and the <emphasis>effective
	UID</emphasis>, which is the UID as which the process
	operates. Normally, the effective UID is equal to the real
	UID, but some programs ask the system to change its effective
	UID. The effective UID is used for access
	control. This means that if a user named joe starts a command,
	say less, less can only open files that joe has read rights
	for. In parallel, a process also has an <emphasis>real
	GID</emphasis> and an <emphasis>effective GID</emphasis>.
      </para>

      <para>
	Many processes open files, the handle used to operate on a
	file is called a <emphasis>file descriptor</emphasis>. The
	kernel manages a list of open file descriptors for each
	process. The <emphasis>fd</emphasis> field contains a pointer
	to the list of open files. The <emphasis>vmspace</emphasis>
	field points to the process address space of the process.
      </para>

      <!-- XXX - make more sophisticated (swap)? -->
      <figure xml:id="chap-procmgmt-theory-proc-procstates">
	<title>Process states</title>

	<mediaobject>
	  <imageobject>
	    <imagedata format="PNG" fileref="../../images/procstates.png"/>
	  </imageobject>
	  <imageobject>
	    <imagedata format="SVG" fileref="../../images/procstates.svg"/>
	  </imageobject>
	</mediaobject>
      </figure>

      <para>
	Not every process is in need of CPU time at a given
	moment. For instance, some processes maybe waiting for some
	<emphasis>I/O</emphasis> (Input/Output) operation to complete
	or may be terminated. Not taking subtleties in account,
	processes are normally <emphasis>started</emphasis>,
	<emphasis>running</emphasis>, <emphasis>ready</emphasis> (to
	run), <emphasis>blocked</emphasis> (waiting for I/O), or
	<emphasis>terminated</emphasis>. <xref
	linkend="chap-procmgmt-theory-proc-procstates" /> shows the
	lifecycle of a process. A process that is terminated, but for
	which the process table entry is not reclaimed, is often
	called a <emphasis>zombie process</emphasis>. Zombie processes
	are useful to let the parent process read the exit status of
	the process, or reserve the process table entry temporarily.
      </para>
    </sect2>

    <sect2 xml:id="chap-procmgmt-theory-proc-new">
      <title>Creating new processes</title>

      <para>
	New processes are created with the <emphasis>fork()</emphasis>
	system call. This system call copies the process address space
	and process information of the caller, and gives the new
	process, named the child process, a different PID. The child
	process will continue execution at the same point as the
	parent, but will get a different return value from the
	<emphasis>fork()</emphasis> system call. Based on this return
	value the code of the parent and child can decide how to
	continue executing. The following piece of C code shows a
	<emphasis>fork()</emphasis> call in action:
      </para>

      <programlisting>
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  pid_t pid = fork();
  if (pid == 0)
    printf("Hi, I am the child!\n");
  else
    printf("Hi, I am the parent, the child PID is %d!\n", pid);

  return 0;
}
      </programlisting>

      <para>
.	This little program calls <emphasis>fork()</emphasis>, storing
	the return value of <emphasis>fork()</emphasis> in the
	variable
	<emphasis>pid</emphasis>. <emphasis>fork()</emphasis> returns
	the value <emphasis>0</emphasis> to the child, and the PID of
	the child to the parent. Since this is the case, we can use a
	simple conditional structure to check the value of the
	<emphasis>pid</emphasis> variable, and print an appropriate
	message.
      </para>

      <para>
	You may wonder how it is possible to start new programs, since
	the <emphasis>fork()</emphasis> call duplicates an existing
	process. That is a good question, since with
	<emphasis>fork()</emphasis> alone, it is not possible to
	execute new programs. UNIX kernels also provide a set of
	system calls, starting with <emphasis>exec</emphasis>, that
	load a new program image in the current process. We saw at the
	start of this chapter that a process is a running program -- a
	process was constructed in memory from the program image that
	is stored on a storage medium. So, the
	<emphasis>exec</emphasis> family of system calls gives a
	running process the facilities to replace its contents with a
	program stored on some medium. In itself, this is not wildly
	useful, because every time the an <emphasis>exec</emphasis>
	call is done, the original calling code (or program) is
	removed from the process. This can be witnessed in the following
	C program:
      </para>

      <programlisting>
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  execve("/bin/ls", NULL, NULL);

  /* This will never be printed, unless execve() fails. */
  printf("Hello world!\n");

  return 0;
}
      </programlisting>

      <para>
	This program executes <command>ls</command> with the
	<emphasis>execve()</emphasis> call. The message printed with
	<emphasis>printf()</emphasis> will never be shown, because the
	running program image is replaced with that of
	<command>ls</command>. Though, a combination of
	<emphasis>fork()</emphasis> and the <emphasis>exec</emphasis>
	functions are very powerful. A process can fork itself, and
	let the child <quote>sacrifice</quote> itself to run another
	program. The following program demonstrates this pattern:
      </para>

      <programlisting>
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  pid_t pid = fork();
  if (pid == 0)
    execve("/bin/ls", NULL, NULL);

  printf("Hello world!");

  return 0;
}
      </programlisting>

      <para>
	This program forks itself first. The program image of the
	child process will be replaced with <command>ls</command>,
	while the parent process prints the <quote>Hello world!</quote>
	message to the screen and returns.
      </para>

      <para>
	This procedure is followed by many programs, including the
	shell, when a command is executed from the shell prompt. In
	fact all processes on a UNIX system are directly or indirectly
	derrived from the <emphasis>init</emphasis> process, which is
	the first program that is started on a UNIX system.
      </para>

      <!-- XXX - Describe what is inherited when exec is called. -->
    </sect2>

    <sect2 xml:id="chap-procmgmt-theory-proc-threads">
      <title>Threads</title>

      <para>
	Although forks are very useful to build some
	parallelism<footnote><para>For instance, a web server could
	fork multiple child processes to handle
	requests</para></footnote>, they can be to expensive for some
	purposes. Copying the whole process takes some time, and there
	is cost involved if processes want to share data. This is
	solved by offering a more lightweight alternative, namely
	allowing more than one thread of execution. Each thread of
	execution is executed separately, but the process data is
	shared between the threads.
      </para>

      <para>
	Writing good <emphasis>multithreaded</emphasis> programs
	requires good knowledge of data sharing and locking. Since all
	data is shared, uncareful programming can lead to bugs like
	race conditions.
      </para>
    </sect2>

    <!-- XXX - Add a section about capabilities. -->
  </sect1>

  <sect1 xml:id="chap-procmanagement-analyzing">
    <title>Analyzing running processes</title>

    <sect2 xml:id="chap-procmanagement-analyzing-listing">
      <title>Listing running processes</title>

      <para>
	UNIX systems provide the <command>ps</command> command to show
	a list of running processes. Unfortunately, this command is an
	example of the pains of the lack of standardization. The BSD
	and System V variants of <command>ps</command> have their own
	sets of options. Fortunately, GNU/Linux implements both the
	System V and BSD-style parameters, as well as some (GNU-style)
	long options. Options preceded by a dash are interpreted as
	System V options and options without a dash as BSD options.
	We will describe the System V-style options in this section.
      </para>

      <para>
	If <command>ps</command> is used without any parameters, it
	shows all processes owned by the user that invokes
	<command>ps</command> and that are attached to the same
	controlling terminal. For example:
      </para>

      <screen>
$ <userinput>ps</userinput>
  PID TTY          TIME CMD
 8844 pts/5    00:00:00 bash
 8862 pts/5    00:00:00 ps
      </screen>

      <para>
	A lot of useful information can be distilled from this
	output. As you can see, two processes are listed: the shell
	that we used to call <command>ps</command>
	(<emphasis>bash</emphasis>), and the <command>ps</command>
	command itself. In this case there are four information
	fields. <emphasis>PID</emphasis> is the process ID of a
	process, <emphasis>TTY</emphasis> the controlling terminal,
	<emphasis>TIME</emphasis> the amount of CPU time the proces
	has used, and <command>CMD</command> the command or program of
	which a copy is running. The fields that are shown by default
	may vary a bit per system, but usually at least these fields
	are shown, with somewhat varying field labels.
      </para>

      <para>
	Sometime you may want to have a broader view of processes that
	are running. Adding the <parameter
	class="command">-a</parameter> option shows all processes that
	are associated with terminals. For instance:
      </para>

      <screen>
$ <userinput>ps -a</userinput>
  PID TTY          TIME CMD
 7487 pts/1    00:00:00 less
 8556 pts/4    00:00:10 emacs-x
11324 pts/3    00:00:00 ps
      </screen>

      <para>
	As you can see, processes with different controlling terminals
	are shown. Though, in contrast to the plain
	<command>ps</command> output, only processes that control the
	terminal at the moment are shown. For instance, the shell that
	was used to call <command>ps</command> is not shown.
      </para>

      <para>
	You can also print all processes that are running, including
	processes that are not associated with a terminal, by using the
	<parameter class="command">-A</parameter> option:
      </para>

      <screen>
$ <userinput>ps -A | head -n 10</userinput>
  PID TTY          TIME CMD
    1 ?        00:00:01 init
    2 ?        00:00:00 migration/0
    3 ?        00:00:00 ksoftirqd/0
    4 ?        00:00:00 watchdog/0
    5 ?        00:00:00 migration/1
    6 ?        00:00:00 ksoftirqd/1
    7 ?        00:00:00 watchdog/1
    8 ?        00:00:00 events/0
    9 ?        00:00:00 events/1
      </screen>

      <para>
	You can print all processes with a certain user ID, with the
	<emphasis>-U</emphasis> option. This option accepts a user
	name as a parameter, or multiple user names that are separated
	by a comma. The following command shows all processes that
	have <emphasis>xfs</emphasis> or <emphasis>rpc</emphasis> as
	their user ID:
      </para>

      <screen>
$ <userinput>ps -U xfs,rpc</userinput>
  PID TTY          TIME CMD
 2409 ?        00:00:00 portmap
 2784 ?        00:00:00 xfs
      </screen>

      <para>
	Likewise, you can also print processes with a particular group
	ID, with the <emphasis>-G</emphasis> option:
      </para>

      <screen>
$ <userinput>ps -G messagebus,haldaemon</userinput>
  PID TTY          TIME CMD
 8233 ?        00:00:00 dbus-daemon
11312 ?        00:00:00 hald
11320 ?        00:00:00 hald-addon-keyb
11323 ?        00:00:00 hald-addon-acpi
      </screen>

      <para>
	If you would like to have a list for a physical or
	pseudo-terminal, you can use the <parameter
	class="command">-t</parameter> option:
      </para>

      <screen>
$ <userinput>ps -t tty2</userinput>
  PID TTY          TIME CMD
 2655 tty2     00:00:00 getty
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-procmanagement-managing">
    <title>Managing processes</title>

    <sect2 xml:id="chap-procmanagement-managing-signals">
      <title>Sending signals to a process</title>

      <para>
	Signals are a crude, but effective form of inter-process
	communication (IPC). A signal is basically a number that is
	delivered to a process that has a special meaning. For all
	signals there are default signal handlers. Processes can
	install their own signal handlers, or choose to ignore
	signals. Some signals (normally SIGKILL and SIGSTOP) can not
	be ignored. All signals have convenient symbolic names.
      </para>

      <para>
	Only a few signals are normally interesting for interactive
	use on UNIX(-like) systems. These are (followed by their number):
      </para>

      <itemizedlist>
	<listitem>
	  <para><emphasis>SIGKILL (9):</emphasis> forcefully kill
	  a process.</para>
	</listitem>
	<listitem>
	  <para><emphasis>SIGTERM (15):</emphasis> request a process
	  to terminate. Since this is a request, a program could ignore
	  it, in contrast to <emphasis>SIGKILL</emphasis>.</para>
	</listitem>
	<listitem>
	  <para><emphasis>SIGHUP (1):</emphasis> Traditionally, this
	  has signalled a terminal hangup. But nowadays some daemons
	  (e.g. <emphasis>inetd</emphasis>) reread their configuration
	  when this signal is sent.</para>
	</listitem>
      </itemizedlist>

      <para>
	The <command>kill</command> command is used to send a signal
	to a process. By default, <command>kill</command> sends the
	<emphasis>SIGTERM</emphasis> signal. To send this signal, the
	process ID of the process that you would like to send this
	signal to should be added as a parameter. For instance:
      </para>

      <screen>
$ <userinput>kill 15631</userinput>
      </screen>

      <para>
	To send another signal, you can use one of two options:
	<emphasis>-signalnumber</emphasis> or
	<emphasis>-signalname</emphasis>. So, the following commands
	both send the <emphasis>SIGKILL</emphasis> signal to the process
	with process ID <emphasis>15631</emphasis>:
      </para>

      <screen>
$ <userinput>kill -9 15631</userinput>
      </screen>

      <screen>
$ <userinput>kill -SIGKILL 15631</userinput>
      </screen>

      <!-- XXX - Add note about what users can send signals. -->
    </sect2>

    <sect2 xml:id="chap-procmanagement-managing-nice">
      <title>Being nice to others</title>

      <para>
	In an act of altruism you can be nice to other users of
	computer resources. If you plan to run a CPU-time intensive
	process, but do not want that to interfere with work of other
	users on the system (or other processes), you can assign some
	grade of 'niceness' to a process. Practically, this means that
	you will be able to influence the scheduling priority of a
	process. Nicer processes get a lower scheduling priority. The
	normal niceness of a process is <emphasis>0</emphasis>, and
	can be changed by executing a program with the
	<command>nice</command> command. The <emphasis>-n
	[niceness]</emphasis> option can be used to specify the
	niceness:
      </para>

      <screen>
$ <userinput>nice -n 20 cputimewaster</userinput>
      </screen>

      <para>
	The maximum number for niceness is
	implementation-dependent. If a program was started with
	<command>nice</command>, but no niceness was specified, the
	niceness will be set to <emphasis>10</emphasis>. In case you
	were wondering: yes, you can also be rude, but this right is
	restricted to the <emphasis>root</emphasis> user. You can
	boost the priority of a process by specifying a negative value
	as the niceness.
      </para>

      <para>
	You can also modify the niceness of a running processes with
	the <command>renice</command> command. This can be done for
	specific process IDs (<parameter class="command">-p
	PIDs</parameter>), users (<parameter class="command">-u
	user/uid</parameter>), and effective groups (<parameter
	class="command">-g group/gid</parameter>). The new niceness
	is specified as the first parameter.
      </para>

      <para>
	The niceness of a process can only be increased. And, of
	course, no user except for <emphasis>root</emphasis> can
	affect the niceness of processes of other users.
      </para>

      <para>
	Lets look at an example, to set the niceness of a process with
	PID <emphasis>3108</emphasis> to <emphasis>14</emphasis>, you
	could use the following command:
      </para>

      <screen>
$ <command>renice 14 -p 3108</command>
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-procmanagement-jobcontrol">
    <title>Job control</title>

    <para>
      It is often useful to group processes to allow operations on a
      set of processes, for instance to distribute a signal to all
      processes in a group rather than a single process. Not too
      suprisingly, these sets of processes are called
      <emphasis>program groups</emphasis> in UNIX. After a fork, a
      child process is automatically a member of the process group of
      the parent. Though, new process groups can be created by making
      one process a process group leader, and adding other processes
      to the group. The process group ID is the PID of the process
      group leader.
    </para>

    <para>
      Virtually all modern UNIX shells give processes that are created
      through the invocation of a command their own process group. All
      processes in a pipeline are normally added to one process group.
      In the following commands that create a pipeline are executed
    </para>

    <screen>
cat | tr -s ' ' | egrep 'foob.r'
    </screen>

    <para>
      the shell roughly performs the following steps:
    </para>

    <orderedlist>
      <listitem>
	<para>
	  Three child processes are forked.
	</para>
      </listitem>
      <listitem>
	<para>
	  The first process in the pipeline is put in a process group
	  with its own PID as the process group ID, making it the
	  process leader. The other processes in the pipeline are added
	  to the process group.
	</para>
      </listitem>
      <listitem>
	<para>
	  The file descriptors of the processes in the pipeline are
	  reconfigured to form a pipeline.
	</para>
      </listitem>
      <listitem>
	<para>
	  The programs in the pipeline are executed.
	</para>
      </listitem>
    </orderedlist>

    <para>
      The shell uses process groups to implement <emphasis>job
      control</emphasis>. A shell can run multiple jobs in the
      background, there can be multiple stopped job, and one job can
      be in the foreground. A foreground job is wired to the terminal
      for its standard input (meaning that it is the job the gets user
      input).
    </para>

    <sect2 xml:id="chap-procmgmt-jobcontrol-stopping">
      <title>Stopping and continuing a job</title>
      
      <para>
	A job that is in the foreground (thus, a job that potentially
	accepts user input from the terminal) can be stopped by
	pressing <emphasis>Ctrl-z</emphasis> (pressing both the 'Ctrl' and
	'z' keys simultaneously). This will stop the job,
	and will handle control over the terminal back to the shell.
	Let's try this with the <command>sleep</command> command, which
	waits for the number of seconds provided as an argument:
      </para>

      <screen>
$ <userinput>sleep 3600</userinput>
<userinput>Ctrl-z</userinput>
[1]+  Stopped                 sleep 3600
      </screen>

      <para>
	The process group, which we will refer to as a job has been
	stopped now, meaning that the <command>sleep</command> has
	stopped counting - it's execution is completely stopped. You
	can retrieve a list of jobs with the <command>jobs</command>
	command:
      </para>

      <screen>
$ <userinput>jobs</userinput>
[1]+  Stopped                 sleep 3600
      </screen>

      <para>
	This shows the job number (<emphasis>1</emphasis>), its state,
	and the command that was used to start this job. Let's run
	another program, stop that too, and have another look at the
	job listing.
      </para>

      <screen>
$ <userinput>cat</userinput>
<userinput>Ctrl-z</userinput>
[2]+  Stopped                 cat
$ <userinput>jobs</userinput>
[1]-  Stopped                 sleep 3600
[2]+  Stopped                 cat
      </screen>

      <para>
	As expected, the second job is also stopped, and was assigned
	job number <emphasis>2</emphasis>. The plus sign
	(<emphasis>+</emphasis>) following the first job has changed
	to a minus (<emphasis>-</emphasis>) sign, while the second job
	is now marked by a plus sign. The plus sign is used to
	indicate the <emphasis>current job</emphasis>. The
	<command>bg</command> and <command>fg</command> commands that
	we will look at shortly, will operate on the current job
	if no job was specified as a parameter.
      </para>
     
      <!-- XXX - Document under what circumstances a job becomes the
                 current job. -->

      <para>
	Usually, when you are working with jobs, you will want to move
	jobs to the foreground again. This is done with the
	<command>fg</command> command. Executing <command>fg</command>
	without a parameter will put the current job in the
	foreground.  Most shells will print the command that is moved
	to the foreground to give an indication of what process was
	moved to the foreground:
      </para>

      <screen>
$ <userinput>fg</userinput>
cat
      </screen>

      <para>
	Of course, it's not always useful to put the current job in
	the foreground. You can put another job in the foreground by
	adding the job number preceded by the percentage sign
	(<emphasis>%</emphasis>) as an argument to
	<command>fg</command>:
      </para>

      <screen>
$ <userinput>fg %1</userinput>
sleep 3600
      </screen>

      <para>
	Switching jobs by stopping them and putting them in the
	foreground is often very useful when the shell is used
	interactively. For example, suppose that you are editing a
	file with a text editor, and would like to execute some other
	command and then continue editing. You could stop the editor
	with <emphasis>Ctrl-z</emphasis>, execute a command, and put
	the editor in the foreground again with <command>fg</command>.
      </para>
    </sect2>

    <sect2 xml:id="chap-procmgmt-jobcontrol-background">
      <title>Background jobs</title>

      <para>
	Besides running in the foreground, jobs can also run in the
	background. This means that they are running, but input from
	the terminal is not redirected to background processes. Most
	shells do configure background jobs to direct output to the
	terminal of the shell where they were started.
      </para>

      <para>
	A process that is stopped can be continued in the background
	with the <command>bg</command> command:
      </para>

      <screen>
$ <userinput>sleep 3600</userinput>
  
[1]+  Stopped                 sleep 3600
$ <userinput>bg</userinput>
[1]+ sleep 3600 &amp;
$
      </screen>

      <para>
	You can see that the job is indeed running with
	<command>jobs</command>:
      </para>

      <screen>
$ <userinput>jobs</userinput>
[1]+  Running                 sleep 3600 &amp;
      </screen>

      <para>
	Like <command>fg</command>, you can also move another job than
	the current job to the background by specifying its job
	number:
      </para>

      <screen>
$ <command>bg %1</command>
[1]+ sleep 3600 &amp;
      </screen>

      <para>
	You can also put a job directly in the background when it is
	started, by adding an trailing ampersand (&amp;) to a command
	or pipeline. For instance:
      </para>

      <screen>
$ <userinput>sleep 3600 &amp;</userinput>
[1] 5078
      </screen>

      <!-- XXX - behavior of background processes when a shell is
                 terminated. -->
    </sect2>
  </sect1>
</chapter>
