<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xml:lang="fr" xml:id="kernel">
  <title>Compiler un kernel</title>

  <sect1 xml:id="chap-kernel-intro">
    <title>Introduction</title>

    <para>
      Le kernel Linux est abordé brièvement dans <xref
      linkend="chap-intro-linux" />. Un des avantages de Linux est que les
      sources complets sont disponibles (comme pour la plupart du système
      Linux). Cela signifie que vous pouvez recompiler le kernel. Il y a 
      beaucoup de situations où recompiler le kernel est utile. Par exemple :
    </para> 

    <itemizedlist>
      <listitem>
	<para>
	  <emphasis role="bold">Alléger le kernel</emphasis> :
	  Vous pouvez désactiver certaines fonctionalités du kernel, pour
	  diminuer sa taille. Ceci est particulièrement utile dans des
	  environnements où la mémoire est limitée.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis role="bold">Optimiser le kernel</emphasis> : il est possible
	  d'optimiser le kernel. Par exemple, en le compilant pour un type de
	  processeur spécifique.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis role="bold">Support de matériel</emphasis> : Le support de
	  certains composants matériels n'est pas activé par défaut dans le
	  kernel Linux fourni dans Slackware Linux. Un exemple courant est le
	  support des systèmes SMP.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis role="bold">Utiliser des patches personnalisés</emphasis> :
	  Il y a beaucoup de patches non officiels pour le kernel Linux.
	  En principe, il vaut mieux éviter les patches non officiels. Mais
	  cetains logiciels tiers, comme <ulink
	  url="http://www.win4lin.com">Win4Lin</ulink>, requièrent
	  l'installation un patch additionel.
	</para>
      </listitem>
      <listitem>
	<para>
	  Construire les bons headers et l'infrastructure de compilation
	  disponibles pour compiler des modules tiers.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      Ce chapitre se concentre sur la série par défaut du kernel utilisée dans
      Slackware Linux 12.0, Linux 2.6. Compiler un kernel n'est pas vraiment
      difficile, gardez sous la main un kernel de sauvegarde que vous pourrez
      utiliser quand quelque chose tourne mal. La compilation du kernel Linux
      implique ces étapes :
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Configurer le kernel.
	</para>
      </listitem>
      <listitem>
	<para>
	  Compiler le kernel.
	</para>
      </listitem>
      <listitem>
	<para>
	  Compiler les modules.
	</para>
      </listitem>
      <listitem>
	<para>
	  Installer le kernel et ses modules.
	</para>
      </listitem>
      <listitem>
	<para>
	  Mettre à jour la configuration de LILO.
	</para>
      </listitem>
    </itemizedlist>
    
    <para>
      Dans ce chapitre, nous supposons que les sources du kernel sont
      disponibles dans <filename>/usr/src/linux</filename>. Si vous avez
      installé les sources du kernel à partir de la collection <quote>k</quote>,
      les sources du kernel sont disponibles dans 
      <filename>/usr/src/linux-kernelversion</filename>, et
      <filename>/usr/src/linux</filename> est un lien symbolique vers le
      répertoire réel des sources du kernel. Donc, si vous utilisez le paquet
      standard du kernel Slackware Linux vous êtes fin prêt.
    </para>

    <para>
      Contrairement aux versions antérieures du kernel, il n'est plus nécessaire
      d'utiliser le lien symbolique <filename>/usr/src/linux</filename>. Si vous
      avez extrait des sources plus récentes du kernel dans
      <filename>/usr/src</filename>, vous pouvez compiler le kernel dans
      <filename>/usr/src/linux-&lt;version&gt;</filename>, et utiliser ce
      répertoire pour les exemples de ce chapitre.
    </para>
  </sect1>

  <sect1 xml:id="chap-kernel-build">
    <title>Configuration</title>

    <para>
      Comme exposé ci-dessus, la première étape est de configurer les sources
      du kernel. Pour faciliter la configuration du kernel, il est judicieux de
      copier la configuration par défaut du kernel Slackware Linux dans les
      sources du kernel. Les fichiers de configuration du kernel Slackware Linux
      sont enregistrés sur le média de la distribution en tant que
      <filename>kernels/&lt;kernelname&gt;/config</filename>. Supposez que vous
      désirez utiliser la configuration du kernel <filename>hugesmp.s</filename>
      comme point de départ (qui est le kernel par défaut), et que vous avez le
      CD-ROM Slackware Linux monté en <filename>/mnt/cdrom</filename>, vous
      pouvez copier la configuration du kernel Slackware Linux avec :
    </para>
    
    <screen>
# <userinput>cp /mnt/cdrom/kernels/hugesmp.s/config /usr/src/linux/.config</userinput>
    </screen>

    <para>
      La configuration d'un kernel en cours d'exécution peut aussi être
      récupérée via <filename>/proc/config.gz</filename> si le kernel a été
      compilé avec les options <emphasis>CONFIG_IKCONFIG</emphasis> et
      <emphasis>CONFIG_IKCONFIG_PROC</emphasis>. Les kernels par défaut de
      Slackware Linux sont compilés avec cette option. Donc, si vous désirez
      utiliser la configuration du kernel en cours d'exécution, vous pouvez
      lancer :
    </para>

    <screen>
# <userinput>zcat /proc/config.gz > /usr/src/linux/.config</userinput>
    </screen>

    <para>
      Si vous utilisez un fichier de configuration destiné à une autre version
      du kernel en cours de compilation, il est probable que les 2 versions
      n'aient pas les mêmes options. De nouvelles options sont fréquemment
      ajoutées (i.e., car de nouveaux drivers sont ajoutés), et parfois des
      composants du kernel sont supprimés. Vous pouvez configurer les nouvelles
      options (et supprimer les options non utilisées) avec la commande
      <command>make oldconfig</command> :
    </para>

    <para>
# <userinput>cd /usr/src/linux ; make oldconfig</userinput>
    </para>

    <para>
      Cela vous demande si vous désirez soit la compilation intégrée du support
      de l'option (<emphasis>Y</emphasis>), soit la compilation du support de
      l'option en tant que module (<emphasis>M</emphasis>), soit de ne pas
      inclure le support de l'option (<emphasis>N</emphasis>). Par exemple :
    </para>

    <screen>
IBM ThinkPad Laptop Extras (ACPI_IBM) [N/m/y/?] (NEW)
    </screen>

    <para>
      Comme vous pouvez le voir, sont affichées les options possibles, avec le
      choix par défaut en majuscule. Si vous appuyez sur &lt;Enter&gt;, l'option
      capitalisée sera sélectionnée. Si vous voulez plus d'informations sur une
      option, vous pouvez appuyer sur le point d'interrogation
      (<emphasis>?</emphasis>) :
    </para>

    <screen>
    IBM ThinkPad Laptop Extras (ACPI_IBM) [N/m/y/?] (NEW) <userinput>?</userinput>

This is a Linux ACPI driver for the IBM ThinkPad laptops. It adds
support for Fn-Fx key combinations, Bluetooth control, video
output switching, ThinkLight control, UltraBay eject and more.
For more information about this driver see &lt;file:Documentation/ibm-acpi.txt&gt;
and &lt;http://ibm-acpi.sf.net/&gt; .

If you have an IBM ThinkPad laptop, say Y or M here.

    IBM ThinkPad Laptop Extras (ACPI_IBM) [N/m/y/?] (NEW)
    </screen>

    <para>
      La sortie de cette commande peut être un peu verbeuse, car les options 
      qui étaient utilisées dans le fichier de configuration, et disponibles
      dans le kernel en cours d'exécution sont aussi affichées, mais leur
      valeur sera renseignée automatiquement à partir du fichier de
      configuration.
    </para>
    
    <para>
      A ce stade vous pouvez réellement démarrer la configuration du kernel en
      détails. Il y a 3 interfaces de configuration pour le kernel. La
      première est <parameter class="command">config</parameter> ; elle demande
      juste ce que vous voulez faire pour chaque option kernel. Cela prend
      beaucoup de temps. Donc, normalement ce n'est pas une bonne façon de
      configurer le kernel. Une approche plus conviviale est l'interface
      <parameter class="command">menuconfig</parameter>, qui utilise un système
      à base de menus que vous pouvez utiliser pour configurer le kernel. Il y
      a aussi une interface X, nommée
      <parameter class="command">xconfig</parameter>. Vous pouvez démarrer une
      interface de configuration en allant dans le répertoire source, et en
      exécutant <command>make &lt;front-end&gt;</command>. Par exemple, pour
      configurer le kernel avec l'interface en menus vous pouvez utiliser les
      commandes suivantes :
    </para>
    
    <screen>
# <userinput>cd /usr/src/linux</userinput>
# <userinput>make menuconfig</userinput>
    </screen>
    
    <para>
      Bien sûr, si vous préférez, vous pouvez aussi éditer le fichier
      <filename>.config</filename> directement à l'aide de votre éditeur favori.
    </para>

    <para>
      Comme nous avons vu brièvement auparavant, dans la configuration du kernel
      il y a à la base 3 choix pour chaque option :
      <quote>n</quote> désactive la fonctionalité, <quote>y</quote>
      active la fonctionalité, et <quote>m</quote> compile la fonctionnalité en
      tant que module. La configuration par défaut du kernel Slackware Linux est
      une très bonne configuration, elle inclut le support des contrôleurs de
      disques et les systèmes de fichiers les plus communs, le reste est compilé
      en tant que module. Quel que soient les choix que vous faites, vous devez
      vous assurer qu'à la fois le driver pour le contrôleur de disque et le
      type de système de fichiers gérant votre système de fichiers racine est
      inclus. S'ils ne le sont pas, le kernel ne sera pas capable de monter le
      système de fichiers racine, et le kernel va causer un panic car il ne
      pourra pas poursuivre l'initialisation en passant la main au programme
      <command>init</command>.
    </para>

    <note>
      <para>
	Il est toujours judicieux de garder vos anciens kernel et modules dans
	un coin, au cas où vous avez fait une erreur de configuration. Si le
	kernel compilé a le même numéro de version que le kernel en cours
	d'exécution, vous devriez vraiment veiller à modifier l'option
	<emphasis>CONFIG_LOCALVERSION</emphasis>. La chaîne spécifiée dans cette
	option est ajoutée à la fin du nom de version. Par exemple, si le kernel
	a pour nom de version 2.6.21.6, et si
	<emphasis>CONFIG_LOCALVERSION</emphasis> a pour valeur
	<emphasis>"-smp-ddk"</emphasis>, la version du kernel sera
	<emphasis>2.6.21.6-smp-ddk</emphasis>.
      </para>

      <para>
	Si vous ne modifiez pas la version de cette façon, l'installation des
	modules du nouveau kernel écrasera les modules du kernel en cours
	d'exécution. C'est très ennuyeux si vous devez revenir à l'ancien
	kernel.
      </para>
    </note>
  </sect1>
  
  <sect1 xml:id="chap-kernel-compile">
    <title>Compilation</title>

    <para>
      La compilation du kernel comporte habituellement plusieus étapes, mais
      les kernels Linux 2.6 Linux peuvent être compilés en executant
      <command>make</command> dans le répertoire source du kernel. Cela va
      calculer les dépendances, compiler le kernel, et compiler et linker les
      modules kernel.
    </para>

    <screen>
# <userinput>cd /usr/src/linux</userinput>
# <userinput>make</userinput>
    </screen>
    
    <para>
      Dès que la compilation est terminée, l'arborescence contient les modules
      compilés, et une image du kernel compressée nommée
      <filename>bzImage</filename> dans
      <filename>/usr/src/linux/arch/i386/boot</filename>. Vous pouvez à présent
      continuer en installant le kernel et ses modules.
    </para>
  </sect1>
  
  <sect1 xml:id="chap-kernel-install">
    <title>Installation</title>
    
    <sect2 xml:id="chap-kernel-install-kernel">
      <title>Installer le kernel</title>
      
      <para>
	L'étape suivante est l'installation du kernel et de ses modules.
	Nous alors commencer par installer les modules kernel, car cela est
	réalisé avec une commande depuis l'arborescence source du kernel :
      </para>
      
      <screen>
# <userinput>make modules_install</userinput>
      </screen>
      
      <para>
	Cela installe les modules dans
	<filename>/lib/modules/&lt;kernelversion&gt;</filename>. Si vous
	remplacez un kernel avec exactement le même numéro de version, il est
	judicieux de supprimer les anciens modules avant d'installer les
	nouveaux, i.e. :
      </para>
	
      <screen>
# <userinput>rm -rf /lib/modules/2.6.21.5-smp</userinput>
      </screen>
      
      <para>
	Vous pouvez <quote>installer</quote> le kernel en le copiant dans le
	répertoire <filename>/boot</filename>. Vous pouvez lui donner le nom
	que vous voulez, mais il vaut mieux appliquer une convention de nommage,
	i.e. <filename>vmlinuz-version</filename>. Par exemple, si vous le
	nommez <filename>vmlinuz-2.6.21.5-smp-ddk</filename>, vous pouvez le
	copier depuis l'arborescence source du kernel avec :
      </para>
      
      <screen>
# <userinput>cp arch/i386/boot/bzImage /boot/vmlinuz-2.6.21.5-smp-ddk</userinput>
      </screen>
      
      <para>
	A ce niveau vous avez presque terminé. La dernière étape est d'ajouter
	le nouveau kernel dans la configuration du boot loader Linux (LILO).
      </para>
    </sect2>
    
    <sect2 xml:id="chap-kernel-install-lilo">
      <title>Configurer LILO</title>
      
      <para>
        <acronym>LILO</acronym> (LInux LOader - NdT : chargeur Linux) est le
	loader par défaut utilisé par Slackware Linux. La configuration de LILO
	se fait en 2 étapes ; la première étape consiste à modifier la
	configuration de LILO dans <filename>/etc/lilo.conf</filename>. La
        seconde étape est de lancer <command>lilo</command>, qui va écrire la
	configuration LILO dans le boot loader. La configuration de LILO
	contient déjà une entrée pour le kernel en cours d'exécution. Il est
	conseillé de garder cette entrée, comme option de repli au cas où votre
	nouveau kernel ne fonctionnait pas. Si vous allez à la fin de
        <filename>/etc/lilo.conf</filename> vous verrez cette entrée,
	ressemblant à celle-ci :
      </para>
      
      <screen>
# Linux bootable partition config begins
image = /boot/vmlinuz
  root = /dev/hda5
  label = Slack
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking
# Linux bootable partition config ends
      </screen>
      
      <para>
	La manière la plus facile d'ajouter le nouveau kernel est de dupliquer
	une entrée existante, et d'éditer la première entrée en changeant les
	options <parameter>image</parameter>, et <parameter>label</parameter>.
	Après modification de l'exemple ci-dessus cela devrait ressembler à
	ceci :
      </para>
      
      <screen>
# Linux bootable partition config begins
image = /boot/vmlinuz-2.6.21.5-smp-ddk
  root = /dev/hda5
  label = Slack
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking

image = /boot/vmlinuz
  root = /dev/hda5
  label = SlackOld
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking
# Linux bootable partition config ends
      </screen>
      
      <para>
	Comme vous pouvez le voir la première entrée
	<parameter>image</parameter> pointe sur le nouveau kernel, et le label
	de la seconde entrée a été changée en <quote>SlackOld</quote>. LILO va
	booter automatiquement sur la première image. Vous pouvez à présent
	installer cette nouvelle configuration avec la commande
	<command>lilo</command> :
      </para>

      <screen>
# <userinput>lilo</userinput>
Added Slack *
Added SlackOld
      </screen>

      <para>
	La prochaine fois que vous booterez, les 2 entrées seront disponibles, et
	l'entrée <quote>Slack</quote> sera bootée par défaut.
      </para>
      
      <note>
	<para>
	  Si vous voulez que LILO affiche un menu avec les entrées configurées
	  via <filename>lilo.conf</filename> à chaque boot, assurez-vous que
	  vous avez ajouté une ligne contenant
	</para>

	<screen>
prompt
	</screen>

	<para>
	  dans <filename>lilo.conf</filename>. Autrement LILO bootera sur
	  l'entrée par défaut configurée avec
          <emphasis>default=&lt;name&gt;</emphasis>,
          ou bien la première entrée lorsqu'aucun kernel par défaut n'est
	  configuré. Vous pouvez accéder à tout moment au menu et à ses entrées
	  en maintenant appuyé la touche &lt;Shift&gt; au démarrage de LILO.
	</para>
      </note>
    </sect2>
  </sect1>
</chapter>
