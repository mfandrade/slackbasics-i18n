<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xml:id="chap-pkgmgmt">
  <title>Gestion des paquets</title>

  <sect1 xml:id="chap-pkgmgmt-pkgtools">
    <title>Pkgtools</title>

    <sect2 xml:id="chap-pkgmgmt-pkgtools-intro">
      <title>Introduction</title>

      <para>
	Slackware Linux utilise un système de paquets simple, contrairement à
	beaucoup d'autres distributions Linux. Les paquets ont une extension
	<filename>.tgz</filename>, et sont généralement des archives tar
	ordinaires contenant 2 fichiers additionnels : un script d'installation
	et un fichier de description du paquet. A cause de cette simplicité des
	paquets les outils de gestion de paquets Slackware Linux n'ont pas les
	moyens de gérer les dépendances. Mais nombre d'utilisateurs 
	Slackware Linux préfèrent cette approche, car les dépendances causent
	souvent plus de problèmes qu'ils n'en résolvent.
      </para>

      <para>
        Slackware Linux comporte quelques outils pour gérer les paquets. Les
	outils les plus importants seront abordés dans ce chapitre. Pour
	arriver à comprendre les outils nous devons jeter un oeil au nommage
	des paquets. Voyons un exemple, imaginez que nous avons un paquet dont
	le nom de fichier est <filename>bash-2.05b-i386-2.tgz</filename>. Ici
	le nom du paquet est bash-2.05b-i386-2. Dans le nom du paquet les
	informations à propos du paquet sont séparées par le caractère '-'.
	Un nom de paquet a la signification suivante :
        <emphasis>programname-version-architecture-packagerevision</emphasis>
      </para>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-pkgtools-pkgtool">
      <title>pkgtool</title>

      <para>
	La commande <command>pkgtool</command> fournit une interface de type
	menu pour quelques opérations sur les paquets. Les éléments du menu les
	plus importants sont <emphasis>Remove</emphasis> et
	<emphasis>Setup</emphasis>. L'option <emphasis>Remove</emphasis>
	présente la liste des paquets installés. Vous pouvez sélectionner quels
	paquets vous voulez supprimer avec la barre espace et confirmer vos
	choix par la touche entrée. Vous pouvez aussi désélectionner un paquet à
	supprimer avec la barre espace.
      </para>

      <para>
	L'option <emphasis>Setup</emphasis> permet l'accès à quelques outils qui
	peuvent vous aider à configurer votre système, comme par exemple :
	<command>netconfig</command>, <command>pppconfig</command> et
	<command>xwmconfig</command>.
      </para>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-pkgtools-installpkg">
      <title>installpkg</title>

      <para>
	La commande <command>installpkg</command> est utilisée pour installer
	des paquets. <command>installpkg</command> requiert un fichier de paquet
	en tant que paramètre. Par exemple, si vous voulez installer le paquet
	<filename>bash-2.05b-i386-2.tgz</filename>, executez :
      </para>

      <screen>
# <userinput>installpkg bash-2.05b-i386-2.tgz</userinput>
      </screen>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-pkgtools-upgradepkg">
      <title>upgradepkg</title>

      <para>
        <command>upgradepkg</command> peut être utilisé pour mettre à jour un
	paquet. Contrairement à <command>installpkg</command> il installe des
	paquets uniquement si une version précédante est disponible sur le
	système. La syntaxe de la commande est comparable celle de
        <command>installpkg</command>. Par exemple, si vous voulez mettre à jour
	des paquets se trouvant dans un répertoire, lancez :
      </para>

      <screen>
# <userinput>upgradepkg *.tgz</userinput>
      </screen>

      <para>
	Comme prévu seuls les paquets dont une autre version est déjà installée
	seront traités.
      </para>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-pkgtools-removepkg">
      <title>removepkg</title>

      <para>
	<command>removepkg</command> peut être utilisée pour supprimer des
	paquets installés. Par exemple, si vous voulez supprimer le paquet
	<quote>bash</quote> (il est déconseillé de faire ça !), vous pouvez
	lancer :
      </para>

      <screen>
# <userinput>removepkg bash</userinput>
      </screen>

      <para>
	Comme vous pouvez le voir seul le nom du programme est spécifié dans
	cet exemple. Vous pouvez aussi supprimer un paquet en spécifiant son
	nom complet :
      </para>

      <screen>
# <userinput>removepkg bash-2.05b-i386-2</userinput>
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-pkgmgmt-slackpkg">
    <title>Slackpkg</title>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-intro">
      <title>Introduction</title>

      <para>
        Slackpkg est un outil de gestion de paquets écrit par
	Roberto F. Batista et par  Evaldo Gardenali.  Il aide les utilisateurs
	à installer ou mettre à jour les paquets Slackware Linux par le biais
	des sites mirroirs de Slackware Linux. Slackpkg est inclus dans le
	répertoire <filename>extra/</filename> du second CD du lot de CDs de
        Slackware Linux.
      </para>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-config">
      <title>Configuration</title>

      <para>
        Slackpkg est configuré à l'aide de quelques fichiers dans
        <filename>/etc/slackpkg</filename>. La première chose à faire est de
	configurer quel site mirroir slackpkg doit utiliser. Cela se fait en
	éditant <filename>/etc/slackpkg/mirrors</filename>. Ce fichier contient
	déjà une liste de sites mirroirs, vous pouvez simplement décommenter un
	site mirroir près de chez vous. Par exemple :
      </para>

      <screen>
ftp://ftp.nluug.nl/pub/os/Linux/distr/slackware/slackware-12.0/
      </screen>

      <para>
	Cela va exploiter l'arborescence Slackware Linux 12.0 sur le site
	mirroir ftp.nluug.nl. Assurez-vous d'utiliser une arborescence
	correspondant à votre version de Slackware Linux. Si vous désirez
	synchroniser sur slackware-current vous devez décommenter plutôt la
	ligne (lorsque vous désirez utiliser le site mirroir NLUUG) :
      </para>

      <screen>
ftp://ftp.nluug.nl/pub/os/Linux/distr/slackware/slackware-current/
      </screen>

      <para>
        Slackpkg n'acceptera qu'un seul site mirroir. Décommenter d'autres sites
	mirroirs ne fonctionnera pas.
      </para>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-gpgkey">
      <title>Importer les clés GPG Slackware Linux</title>

      <para>
	Par défaut slackpkg vérifie les paquets en utilisant les signatures de
	paquets et la clé GPG publique Slackware Linux. Puisque c'est une bonne
	idée d'un point de vue sécurité, vous ne voulez probablement pas changer
	ce comportement. Pour permettre de vérifier les paquets vous devez
	importer la clé GPG <emphasis>security@slackware.com</emphasis>. Si vous
	n'avez pas utilisé GPG jusqu'alors vous devez créer le répertoire GPG
	dans le répertoire personnel de l'utilisateur
	<emphasis>root</emphasis> :
      </para>

      <screen>
# <userinput>mkdir ~/.gnupg</userinput>
      </screen>

      <para>
	L'étape suivante consiste à chercher la clé publique de
        <emphasis>security@slackware.com</emphasis>. Nous allons réaliser cela
	en sollicitant le serveur <emphasis>pgp.mit.edu</emphasis> :
      </para>

      <screen>
# <userinput>gpg --keyserver pgp.mit.edu --search security@slackware.com</userinput>
bash-3.1# gpg --keyserver pgp.mit.edu --search security@slackware.comgpg: le porte-clés `/root/.gnupg/secring.gpg` a été créé
gpg: le porte-clés `/root/.gnupg/pubring.gpg` a été créé
gpg: recherche de "security@slackware.com" du serveur hkp pgp.mit.edu
(1)	Slackware Linux Project &lt;security@slackware.com&gt;
	  1024 bit DSA key 40102233, créé: 2003-02-26
Keys 1-1 of 1 for "security@slackware.com".  Entrez le(s) nombre(s), S)uivant, ou Q)uitter &gt;
      </screen>

      <para>
	Comme vous pouvez le voir nous avons trouvé 2 occurrences (identiques).
	Sélectionnez la première en tapant <quote>1</quote>. GnuPG va importer
	cette clé dans le porte-clés de l'utilisateur
	<emphasis>root</emphasis> :
      </para>

      <screen>
Entrez le(s) nombre(s), S)uivant, ou Q)uitter &gt; <userinput>1</userinput>
gpg: requête de la clé 40102233 du serveur hkp pgp.mit.edu
gpg: /root/.gnupg/trustdb.gpg: base de confiance créée
gpg: clé 40102233: clé publique "Slackware Linux Project &lt;security@slackware.com&gt;" importée
gpg: aucune clé de confiance ultime n'a été trouvée
gpg:        Quantité totale traitée: 1
gpg:                       importée: 1
      </screen>

      <para>
	Assurez-vous de revérifier la clé reçue. L'ID clé et l'empreinte
	de cette clé particulière peut se trouver sur Internet sur beaucoup de
	sites de confiance. L'ID clé est, comme mentionné ci-dessus
	<emphasis>40102233</emphasis>.  Vous pouvez obtenir l'empreinte de la
	clé avec le paramètre <parameter
	class="command">--fingerprint</parameter> :
      </para>

      <screen>
# <userinput>gpg --fingerprint security@slackware.com</userinput>
pub   1024D/40102233 2003-02-26 [expire: 2012-12-21]
    Empreinte de la clé = EC56 49DA 401E 22AB FA67  36EF 6A44 63C0 4010 2233
uid                  Slackware Linux Project &lt;security@slackware.com&gt;
sub   1024g/4E523569 2003-02-26 [expire: 2012-12-21]
      </screen>

      <para>
	Dès que vous avez importé et vérifié cette clé clé vous pouvez commencer
	à utiliser slackpkg, et installer des paquets en toute sécurité.
      </para>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-updatepkglist">
      <title>Mettre à jour les listes de paquets</title>

      <para>
	Avant de mettre à jour ou d'installer des paquets vous devez demander à
        slackpkg de télécharger les listes de paquets depuis le site mirroir que
	vous utilisez. Il est judicieux de faire ceci régulièrement pour garder
	ces listes à jour. Les dernières listes peuvent être rappatriées avec :
      </para>

      <screen>
$ <userinput>slackpkg update</userinput>
      </screen>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-upgrade">
      <title>Mettre à jour des paquets</title>

      <para>
        Le paramètre <parameter class="command">upgrade</parameter> est utilisé
	pour mettre à jour des paquets installés. Vous devez ajouter un
	paramètre additionnel pour demander explicitement à
	<command>slackpkg</command> ce que vous voulez mettre à jour, cela est
	différent pour une version stable de Slackware et pour
	slackware-current. Les mises à jour pour une des versions stables
	Slackware Linux sont dans le répertoire <filename>patches</filename>
	des sites FTP mirroirs. Vous pouvez mettre à jour une installation
	slackware-stable (e.g. Slackware Linux 12.0) avec :
      </para>

      <screen>
# <userinput>slackpkg upgrade patches</userinput>
      </screen>

      <para>
	Ici <command>slackpkg</command> va utiliser les paquets à partir du
	répertoire <filename>patches</filename>. Dans 
        slackware-current les paquets mis à jour sont dans les sous-répertoires
	classiques de <filename>slackware</filename>. Donc, nous pouvons passer
	celui-ci en tant que paramètre de <command>slackpkg upgrade</command> :
      </para>

      <screen>
# <userinput>slackpkg upgrade slackware</userinput>
      </screen>

      <para>
	Vous pouvez aussi mettre à jour des paquets séparément en spécifiant un
	nom de paquet à mettre à jour, par exemple :
      </para>

      <screen>
# <userinput>slackpkg upgrade pine</userinput>
      </screen>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-install">
      <title>Installer des paquets</title>

      <para>
        Le paramètre <parameter class="command">install</parameter> est utilisé
	pour installer des paquets :
      </para>

      <screen>
# <userinput>slackpkg install rexima</userinput>
      </screen>

      <para>
	Soyez conscients que ni slackpkg, ni les outils de gestion de paquets
	Slackware Linux ne vérifient les dépendances. Si des programmes ne
	fonctionnent pas à cause de librairies manquantes, vous devez les
	ajouter vous-même avec slackpkg.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-pkgmgmt-rsync">
    <title>Récupérer les mises à jour à travers rsync</title>

    <para>
      Une autre méthode répandue pour garder Slackware Linux à jour est de
      garder un site mirroir local. La façon idéale de réaliser cela est via
      rsync.  rsync est un programme qui synchronise 2 arborescences de 
      fichiers. L'avantage est que rsync ne transfère que les différences dans
      les fichiers, faisant de lui un outil très rapide. Après s'être
      synchronisé avec un site mirroir vous pouvez mettre à jour Slackware Linux
      avec <command>upgradepkg</command>, ou faire un nouveau CD d'installation.
      L'exemple suivant synchronise un répertoire local -current avec une
      arborescence à jour d'un site mirroir :
    </para>

    <screen>
# <userinput>rsync -av --delete \
--exclude=slackware/kde \
--exclude=slackware/kdei \
--exclude=slackware/gnome \
--exclude=bootdisks \
--exclude=extra \
--exclude=testing \
--exclude=pasture \
--exclude=rootdisks \
--exclude=source \
--exclude=zipslack \
rsync://fill-in-mirror/pub/slackware/slackware-current/ \
/usr/share/mirrors/slackware-current</userinput>
    </screen>

    <para>
      Le paramètre <parameter class="command">-a</parameter> requiert quelques
      autres options qui tentent de faire une copie aussi conforme que 
      possible (preserver les liens symboliques, permissions et propriétaires).
      Le paramètre <parameter class="command">--delete</parameter> supprime les
      fichiers qui ne sont plus disponibles sur le site mirroir. Il est
      judicieux d'utiliser ce paramètre, car autrement votre arborescence
      pourrait très rapidement se trouver polluée avec des versions plus 
      anciennes des paquets. Avec le paramètre
      <parameter class="command">--exclude</parameter> vous pouvez spécifier les
      fichier ou répertoires à ignorer.
    </para>

    <para>
      Après avoir synchronisé l'arborescence vous pouvez utiliser
      <command>upgradepkg</command> pour mettre à jour votre installation de
      Slackware Linux. Par exemple :
    </para>

    <screen>
# <userinput>upgradepkg /usr/share/mirrors/slackware-current/slackware/*/*.tgz</userinput>
    </screen>
  </sect1>

  <sect1 xml:id="chap-pkgmgmt-tagfiles">
    <title>Fichiers de tags</title>

    <sect2 xml:id="chap-pkgmgmt-tagfiles-intro">
      <title>Introduction</title>

      <para>
	Les fichiers de tags sont une fonctionnalité relativement méconnue de
	Slackware Linux. Un fichier de tags est un fichier qui peut être utilisé
	pour dire à <command>installpkg</command> les paquets à installer, à
	partir d'une liste de paquets. Par exemple, l'installeur Slackware Linux
	génère un fichier de tags lors des méthodes d'installation
        <emphasis>Expert</emphasis> et <emphasis>Menu</emphasis>
	pour enregistrer les paquets à installer pendant la phase
	d'installation.
      </para>

      <para>
	L'aspect intéressant des fichiers de tags est est le fait de facilement
	pouvoir créer des fichiers de tags par vous-même. En écrivant vos propres
	fichiers de tags pour automatiser l'installation des paquets, ce qui est
	idéal pour de larges déploiements sur clients ou serveurs (ou sur des
	systèmes plus petits si vous trouvez cela plus confortable qu'installer
	les paquets manuellement). La façon la plus aisée de créer vos propres
	fichiers de tags est de démarrer avec les fichiers de tags faisant partie
	de la distribution officielle Slackware Linux. Dans les sections
	suivantes nous allons regarder comment cela se passe.
      </para>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-tagfiles-creating">
      <title>Créer des fichiers de tags</title>

      <para>
	Les fichiers de tags sont des fichiers texte. Chaque ligne comporte un
	nom de paquet et un flag, ces 2 éléments sont séparés par un deux-points
	et un espace. Le flag spécifie quoi faire avec un paquet. Les champs
	sont décrits dans <xref
	linkend="chap-pkgmgmt-tagfiles-creating-fields"/>.  Regardons quelques
	lignes d'un fichier de tags dans la collection <quote>a</quote> :
      </para>

      <screen>
aaa_base: ADD
aaa_elflibs: ADD
acpid: REC
apmd: REC
bash: ADD
bin: ADD
      </screen>

      <para>
	Veuillez noter que vous pouvez aussi ajouter des commentaires dans des
	fichiers de tags avec le caractère de commentaire habituel (#). Comme
	vous pouvez le voir dans l'extrait ci-dessus, il y a des flags
	différents. Le tableau présent ci-dessous décrit les 4 flags différents.
      </para>

      <table xml:id="chap-pkgmgmt-tagfiles-creating-fields">
        <title>Champs de fichier de tag</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>Flag</entry>
              <entry>Signification</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ADD</entry>
              <entry>Un paquet marqué avec ce flag sera automatiquement installé
	      </entry>
            </row>
            <row>
              <entry>SKP</entry>
              <entry>Un paquet marqué avec ce flag sera automatiquement passé
	      </entry>
            </row>
            <row>
              <entry>REC</entry>
              <entry>Demande à l'utilisateur ce qu'il faut faire, en
		recommandant l'installation du paquet.</entry>
            </row>
            <row>
              <entry>OPT</entry>
              <entry>Demande à l'utilisateur ce qu'il faut faire, le paquet sera
		décrit comme optionel.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>
	Comme vous pouvez le voir dans le tableau <command>installpkg</command>
        ne va agir automatiquement que si
        <emphasis>ADD</emphasis> ou <emphasis>SKP</emphasis> est précisé.
      </para>

      <para>
	Il serait plutôt fastidieux d'écrire un fichier de tag pour chaque
	collection Slackware Linux. La distribution officielle Slackware Linux
	contient un fichier de tags dans le répertoire de chaque collection. Vous
	pouvez utiliser ces fichiers de tags comme base de départ. Le petit
	fichier de script ci-dessous peut être utilisé pour copier les fichiers
	de tags dans le répertoire courant, préservant la structure des
	collections.
      </para>

      <screen>
#!/bin/sh

if [ ! $# -eq 1 ] ; then
  echo "Syntax: $0 [directory]"
  exit
fi

for tagfile in $1/*/tagfile; do 
  setdir=`echo ${tagfile} | egrep -o '\w+/tagfile$' | xargs dirname`
  mkdir ${setdir}
  cp ${tagfile} ${setdir}/tagfile.org
  cp ${tagfile} ${setdir}
done
      </screen>

      <para>
	Après avoir écrit ce script dans un fichier vous pouvez l'exécuter, et
	specifier un répertoire <filename>slackware/</filename> qui contient
	les collections. Par exemple :
      </para>

      <screen>
$ <command>sh copy-tagfiles.sh /mnt/flux/slackware-current/slackware</command>
      </screen>

      <para>
	Après avoir effectué cela, le répertoire courant contiendra une structure
	arborescente comme ceci, dans laquelle vous pouvez éditer chacun des
	fichiers de tags :
      </para>

      <screen>
a/tagfile
a/tagfile.org
ap/tagfile
ap/tagfile.org
d/tagfile
d/tagfile.org
e/tagfile
e/tagfile.org
[...]
      </screen>

      <para>
	Les fichiers se terminant par <emphasis>.org</emphasis> sont des copies
	de sauvegarde, que vous pouvez utiliser en tant que référence lors de
	l'édition les fichiers de tags. De plus ils sont aussi utilisés dans le
	script décrit dans la section suivante.
      </para>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-tagfiles-autogen" >
      <title>Génération automatique des fichiers de tags</title>

      <para>
	Avec un script simple, il est aussi possible de construire des
	fichiers de tags basés sur les paquets installés sur le système courant.
	Je dois remercier Peter Kaagman d'avoir soumis cette idée géniale !
      </para>

      <para>
	D'abord construisez un répertoire de fichier de tags à partir du média
	d'installation Slackware Linux, comme décrit dans la section précédente.
	Lorsque vous avez fait cela, vous pouvez créer le script suivant :
      </para>

      <screen>
#!/bin/sh

if [ ! $# -eq 1 ] ; then
  echo "Syntax: $0 [directory]"
  exit
fi

for tforg in $1/*/tagfile.org ; do
  tf=${tforg%.org}
  rm -f ${tf}
  for package in $(grep -v '^#' ${tforg} | cut -d ':' -f 1) ; do
    if ls /var/log/packages/${package}-[0-9]* &amp;&gt; /dev/null ; then 
      echo "${package}: ADD" &gt;&gt; ${tf}
    else
      echo "${package}: SKP" &gt;&gt; ${tf}
    fi
  done
done
      </screen>

      <para>
        Supposez que vous l'ayez sauvegardé en tant que
        <filename>build-tagfiles.sh</filename>, vous pouvez l'utiliser en
	spécifiant le répertoire qui contient les fichiers de tags ent tant que
	premier argument :
      </para>

      <screen>
$ <userinput>sh build-tagfiles.sh .</userinput>
      </screen>

      <para>
	Ce script va marquer les paquets installés en tant que
        <emphasis>ADD</emphasis>, et les paquets non installés en tant que
        <emphasis>SKP</emphasis>.
      </para>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-tagfiles-using">
      <title>Utiliser les fichiers de tags</title>

      <para>
	Sur un sytème installé vous pouvez donner à
        <command>installpkg</command> un fichier de tags avec le paramètre
        <parameter class="command">-tagfile</parameter>. Par exemple :
      </para>

      <screen>
# <userinput>installpkg -infobox -root /mnt-small -tagfile a/tagfile /mnt/flux/slackware-current/slackware/a/*.tgz</userinput>
      </screen>

      <note>
	<para>
	  Vous devez utiliser l'option <parameter
	  class="command">-infobox</parameter>, autrement les fichiers de tag
	  ne seront pas pris en compte.
	</para>
      </note>

      <para>
	Bien sûr, les fichiers de tags seraient inutiles s'ils ne pouvaient pas
	être utilisés lors de l'installation de Slackware Linux. C'est
	évidemment possible : après avoir sélectionné quelles collections vous
	désirez installer, vous pouvez choisir la manière de sélectionner les
	paquets (la boîte de dialogue se nomme <emphasis>SELECT PROMPTING
        MODE</emphasis>). Sélectionnez <emphasis>tagpath</emphasis> dans ce
	menu. On vous demandera alors d'entrer le chemin de l'arborescence
	contenant les fichiers de tags. La manière traditionnelle de fournir
	les fichiers de tags à l'installation de Slackware Linux est de les
	placer sur unde disquette ou tout autre média, et de le monter avant ou
	pendant l'installation. E.g. vous pouvez permuter sur la seconde console
	en pressant les touches &lt;ALT&gt; and &lt;F2&gt;, et créer un
	point de montage et monter le média avec les fichiers de tags :
      </para>

      <screen>
# <userinput>mkdir /mnt-tagfiles</userinput>
# <userinput>mount /dev/fd0 /mnt/mnt-tagfiles</userinput>
      </screen>

      <para>
	Après avoir monté le disque vous pouvez retourner sur la console
	virtuelle dans laquelle vous exécutez <command>setup</command>, en
	pressant &lt;ALT&gt; et &lt;F1&gt;.
      </para>
    </sect2>
  </sect1>
</chapter>
