<chapter id="getstarted-custominstall"> <?dbhtml filename="custom-installation.html" ?>
  <title>Installation personnalisée</title>

  <para>
    Parfois, vous aimeriez faire une installation personnalisée de Slackware
    Linux, par exemple pour mieux comprendre la façon dont les systèmes
    GNU/Linux travaillent, ou pour préparer un script d'installation
    automatique. Ce chapitre décrit les étapes nécessaires pour installer Slackware
    Linux manuellement. Un exemple de script d'installation est également
    disponible à <xref linkend="getstarted-custominstall-script" />.
  </para>

  <sect1 id="getstarted-custominstall-partition">
    <title>Partitionner un disque dur</title>

    <para>
      Si vous avez effectué une installation normale, vous ne devriez pas avoir
      de problèmes avec le partitionnement d'un disque. Vous pouvez utiliser les
      commandes <command>fdisk</command> et <command>cfdisk</command> pour
      partitionner les disques. Si vous automatisez l'installation de Slackware
      Linux par script, il est utile de savoir que vous pouvez envoyer des
      commandes (pipe) <command>fdisk</command> vers <command>fdisk</command>.
      Par exemple :
    </para>

    <screen>
# <command>fdisk /dev/hda &lt;&lt; EOF
n
p
1

+10000M
n
p
2

+512M
t
2
82
w
EOF</command>
    </screen>

    <para>
      Ces commandes créent une partition primaire Linux de 10000Mo, et une
      partition primaire swap Linux de 512Mo. Vous pouvez enregistrer les
      commandes <command>fdisk</command> dans plusieurs profils de disque, et 
      utiliser un de ces profils en fonction d'un critère spécifique (e.g. la
      taille de disque). Par exemple :
    </para>

    <screen>
# <command>cat /usr/share/fdisk-profiles/smalldisk | fdisk</command>
    </screen>
  </sect1>

  <sect1 id="getstarted-custominstall-initfs">
    <title>Initialiser et monter des systèmes de fichiers</title>

    <para>
      Après avoir créé au moins une partition swap et une partition Linux, vous
      pouvez initialiser le système de fichiers et l'espace de swap et utiliser
      cet espace de stockage. Sur les systèmes à mémoire réduite, vous devez
      l'initialiser, et utiliser la swap en premier. Nous allons utiliser la
      configuration des partitions mentionnée dans l'exemple ci-dessus, dans les
      exemples suivants.
      Pour configurer et utiliser la swap, exécuter :

    </para>

    <screen>
# <command>mkswap /dev/hda2</command>
# <command>swapon /dev/hda2</command>
    </screen>

    <para>
      La signification de ces commandes est relativement évidente.
      <command>mkswap</command> initialise l'espace swap, et
      <command>swapon</command> active la swap. Vous n'avez besoin d'exécuter
      <command>mkswap</command> qu'une seule fois, cependant
      <command>swapon</command> doit être exécutée à chaque démarrage du
      système. Cela peut être automatisé en ajoutant une entrée pour la 
      partition de swap dans <filename>/etc/fstab</filename>, ce que nous ferons
      dans une étape ultérieure.
    </para>

    <para>
      A présent, il est important d'initaliser les partitions cible. Cela
      peut être réalisé avec la commande <command>mkfs</command>. Vous pouvez
      spécifier quel système de fichiers doit être utilisé en ajoutant le
      paramètre <parameter class="command">-t</parameter>.
      <command>mkfs</command> lancera automatiquement la commande
      <command>mkfs.filesystem</command> basée sur le système de fichiers que vous
      avez choisi. Attention, les systèmes de fichiers que vous pouvez utiliser
      dépendent du noyau installé sur lequel vous avez démarré. Si vous avez
      démarré avec le noyau <emphasis>bare.i</emphasis>, vous pouvez utiliser
      les systèmes de fichiers <emphasis>ext2</emphasis>,
      <emphasis>ext3</emphasis> et <emphasis>reiserfs</emphasis>.
    </para>

    <para>
      Pour initialiser un système de fichiers <emphasis>ext3</emphasis>, et pour
      le monter, vous devez lancer les commandes suivantes :
    </para>

    <screen>
# <command>mkfs -t ext3 /dev/hda1</command>
# <command>mount /dev/hda1 /mnt</command>
    </screen>

    <para>
      Si vous avez créé des partitions séparées pour certains répertoires dans
      le système de fichiers racine, e.g. <filename>/home</filename>, vous
      pouvez aussi les initialiser et les monter à ce moment. Par exemple :
    </para>

    <screen>
# <command>mkfs -t ext3 /dev/hda2</command>
# <command>mkdir /mnt/home</command>
# <command>mount /dev/hda2 /mnt/home</command>
    </screen>

    <para>
      Enfin, vous devez monter le média source. Si vous utilisez un CD-ROM,
      c'est facile. Supposez que <filename>/dev/hdc</filename> est le fichier de
      périphérique CD-ROM, vous pouvez monter le CD-ROM avec :
    </para>

    <screen>
# <command>mount /dev/hdc /var/log/mount</command>
    </screen>

    <para>
      L'utilisation de NFS comme média d'installation requiert quelques étapes
      de plus.
      D'abord, vous devez charger le disque réseau. Vous faites cela en lançant
      la commande <command>network</command> et en saisissant le disque réseau.
      Vous pouvez charger ce disque depuis un autre média, comme par exemple
      depuis une clé USB. Supposez que vous avez monté une clé USB sur 
      /var/log/mount, vous pouvez charger le disque réseau en faisant :
      <command>network /var/log/mount/network.dsk</command>. Après avoir chargé
      le disque réseau, vous devez configurer l'interface réseau. Si le serveur
      NFS est sur le même réseau vous n'aurez qu'à saisir une adresse IP
      pour votre interface réseau. Par exemple, pour utiliser l'adresse
      <emphasis>192.168.2.201</emphasis>, vous devez exécuter la commande
      suivante :
    </para>

    <screen>
# <command>ifconfig eth0 192.168.2.201</command>
    </screen>

    <para>
      Vous pouvez alors charger le portmapper, qui est nécessaire au bon
      fonctionnement du client NFS :
    </para>

    <screen>
# <command>/sbin/rpc.portmap</command>
    </screen>

    <para>
      Si le portmapper a correctement démarré, vous pouvez monter le volume NFS.
      Cependant, assurez-vous au préalable que vous avez démonté tout système de
      fichiers précédemment monté dans <filename>/var/log/mount</filename>.
      Si aucun autre système de fichiers n'est monté dans 
      <filename>/var/log/mount</filename>, vous pouvez monter le volume NFS.
      Supposez que vous voulez monter
      <emphasis>192.168.2.1:/home/pub/slackware-current</emphasis>,
      vous devez utiliser la commande suivante :
    </para>

    <screen>
# <command>mount -r -t nfs -o nolock 192.168.2.1:/home/pub/slackware-current /var/log/mount</command>
    </screen>

    <para>
      Si aucune erreur n'est apparue quand le volume a été monté, il devrait être
      accessible via <filename>/var/log/mount</filename>
    </para>
  </sect1>

  <sect1 id="getstarted-custominstall-packages">
    <title>Installer les paquets</title>

    <para>
      Tout est prêt maintenant pour démarrer l'installation des paquets depuis
      le média d'installation. Puisque <command>installpkg</command> est
      disponible sur le système d'installation, vous pouvez l'utiliser pour
      installer les paquets Slackware Linux. Pour installer les paquets sur
      la(les) partition(s) cible(s) montée(s) dans <filename>/mnt</filename>,
      ajoutez l'option <parameter class="command">-root</parameter>. La
      commande suivante installe tous les paquets depuis le média source :
    </para>

    <screen>
# <command>installpkg -root /mnt /var/log/mount/slackware/*/*.tgz</command>
    </screen>

    <para>
      Si vous avez créé des fichiers de tags pour définir quels paquets doivent
      être installés, vous pouvez les utiliser maintenant (les fichiers de tags
      sont décrits dans <xref linkend="chap-pkgmgmt-tagfiles" />). Supposez
      que vous avez enregistré les fichiers de tags pour chaque catégorie dans
      <filename>/usr/share/tagfiles/small-desktop</filename>, vous pouvez
      installer les paquets en fonction des fichiers de tags de la façon
      suivante :
    </para>

    <screen>
# <command>for p in a ap d e f k kde kdei l n t tcl x xap y; do
   installpkg -infobox -root /mnt \
     -tagfile /usr/share/tagfiles/small-desktop/$p/tagfile \
     /var/log/mount/slackware/$p/*.tgz
done</command>
    </screen>
  </sect1>

  <sect1 id="getstarted-custominstall-config">
    <title>Configuration post-installation</title>

    <para>
      Les sections suivantes décrivent la configuration minimale nécessaire pour
      avoir un système fonctionnel.
    </para>

    <sect2 id="getstarted-custominstall-config-fstab">
      <title>fstab</title>

      <para>
	Une des étapes nécessaires est de créer un fichier
	<command>fstab</command>, afin que le système puisse chercher quelles
	partitions ou volumes doivent être montés. Le format du fichier
	<filename>/etc/fstab</filename> est décrit dans 
	<xref linkend="basics-filesystem-mounting-fstab" />.
	Le strict minimum que vous aurez à rajouter sont les entrées pour le
	système de fichiers <filename>/</filename>, le pseudo-système de
	fichiers <filename>/proc</filename>, le pseudo-système de fichiers
	<filename>devpts</filename>, et la partition de swap.
      </para>

      <para>
	Avec l'exemple de partitionnement utilisé précédemment dans ce chapitre,
	vous pouvez créer un <filename>/etc/fstab</filename> ainsi :
      </para>

      <screen>
# <command> cat &gt; /mnt/etc/fstab &lt;&lt; EOF
/dev/hda2	 swap             swap        defaults         0   0
/dev/hda1        /                ext3        defaults         1   1
devpts           /dev/pts         devpts      gid=5,mode=620   0   0
proc             /proc            proc        defaults         0   0
EOF</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-lilo">
      <title>LILO</title>

      <para>
	Pour rendre un système bootable vous devez configurer et installer le
	Linux Loader (LILO). La configuration de LILO est décrite dans
        <xref linkend="chap-init-lilo" />. Pour cette partie nous allons juste
	montrer un exemple de configuration de LILO, qui est utilisé avec la
	table des partitions décrite dans ce chapitre. La première étape est de
	créer le fichier <filename>/etc/lilo.conf</filename> :
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/lilo.conf &lt;&lt; EOF
boot = /dev/hda
vga = normal
timeout = 50
image = /boot/vmlinuz
	root = /dev/hda1
	label = Slackware
	read-only
EOF</command>
      </screen>

      <para>
	Vous pouvez alors installer LILO avec <filename>/mnt</filename> comme
	racine pour LILO. Avec <filename>/mnt</filename> comme racine,
        LILO va utiliser <filename>/etc/lilo.conf</filename> de la partition
	cible :
      </para>

      <screen>
# <command>lilo -r /mnt</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-network">
      <title>Réseau</title>

      <para>
	La configuration du réseau dans Slackware Linux est couverte ici
	<xref linkend="sysadmin-netconfig" />. Cette section portera sur un
	exemple d'un hôte qui utilise le protocole DHCP pour obtenir une
	adresse IP.
      </para>

      <para>
        Le fichier <filename>/etc/networks</filename> contient des informations
	sur les réseaux Internet connus. Puisque nous allors récupérer les
	informations réseau via DHCP, nous allons seulement utiliser
	<emphasis>127.0.0.1</emphasis> comme réseau local.
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/networks &lt;&lt; EOF
loopback        127.0.0.0
localnet        127.0.0.0
EOF</command>
      </screen>

      <para>
	Même si nous allons obtenir un nom d'hôte via le protocole DHCP, nous
	allons néanmoins configurer un nom d'hôte temporaire :
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/HOSTNAME &lt;&lt; EOF
sugaree.example.net
EOF</command>
      </screen>

      <para>
	Maintenant que le nom d'hôte est configuré, le nom d'hôte et
	<emphasis>localhost</emphasis> doivent également être resolus,
	en créant une base de données <filename>/etc/hosts</filename> :
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/hosts &lt;&lt; EOF
127.0.0.1	localhost
127.0.0.1	sugaree.example.net	sugaree	
EOF</command>
      </screen>

      <para>
	Nous n'avons pas à créer <filename>/etc/resolv.conf</filename>,
	puisqu'il va être créé automatiquement par le client DHCP
	<command>dhcpcd</command>. Donc, enfin, nous pouvons configurer
	l'interface dans <filename>/etc/rc.d/rc.inet1.conf</filename> :
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/rc.d/rc.inet1.conf &lt;&lt; EOF
IPADDR[0]=""
NETMASK[0]=""
USE_DHCP[0]="yes"
DHCP_HOSTNAME[0]=""
EOF</command>
      </screen>

      <para>
	Vous pouvez éventuellement faire une copie de sauvegarde de l'ancien
	fichier <filename>rc.inet1.conf</filename> d'abord, car il contient
	beaucoup de commentaires utiles. Ou bien vous pouvez utiliser
	<command>sed</command> pour modifier cette option précise :
      </para>

      <screen>
# <command>sed -i 's/USE_DHCP\[0\]=""/USE_DHCP[0]="yes"/' \
   /mnt/etc/rc.d/rc.inet1.conf</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-init">
      <title>Personnaliser les scripts d'initialisation</title>

      <para>
	Selon l'objectif du système en cours d'installation, il faut décider
	quels scripts d'initialisation doivent être démarrés. Le nombre de
	services disponibles dépend des paquets que vous avez installé. Vous
	pouvez obtenir une liste des scripts disponibles avec
	<command>ls</command> :
      </para>

      <screen>
# <command>ls -l /mnt/etc/rc.d/rc.*</command>
      </screen>

      <para>
	Si le bit d'exécution est positionné pour un script, il sera démarré,
	ou pas dans le cas contraire. Evidemment, vous devez garder les scripts
	essentiels exécutables, y compris les scripts spécifiques au niveau
	d'exécution. Vous pouvez ajouter le bit d'exécution sur un script avec :
      </para>

      <screen>
# <command>chmod +x /mnt/etc/rc.d/rc.scriptname</command>
      </screen>

      <para>
        Ou l'enlever avec :
      </para>

      <screen>
# <command>chmod -x /mnt/etc/rc.d/rc.scriptname</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-ldconfig">
      <title>Configurer le linker dynamique</title>

      <para>
	GNU/Linux utilise un cache pour le chargement des librairies dynamiques.
	Etant donné que beaucoup de programmes requièrent les numéros de
	versions génériques des librairies (e.g.
	<filename>/usr/lib/libgtk-x11-2.0.so</filename>, plutôt que
	<filename>/usr/lib/libgtk-x11-2.0.so.0.600.8</filename>).
        Le cache et les liens symboliques sont mis à jour en une seule
	exécution de <command>ldconfig</command> :
      </para>

      <screen>
# <command>chroot /mnt /sbin/ldconfig</command>
      </screen>

      <para>
	Vous ne connaissez  peut-être pas la commande <command>chroot</command>
	; c'est une commande qui exécute une commande avec un autre répertoire
	racine que le répertoire racine courant. Dans cet exemple, le répertoire
	racine est changé en <filename>/mnt</filename>, et à partir de là
	<command>chroot</command> lance <command>/sbin/ldconfig</command>. Une
	fois la commande terminée le système reviendra sur le shell, qui utilise la
	racine originale. Pour utiliser <command>chroot</command> avec d'autres
	commandes cette commande <command>ldconfig</command> doit être exécutée
	une fois avant tout, car sans l'initialisation des associations	runtime
	du linker dynamique la plupart des commandes ne se lanceront pas, à
	cause de dépendances de librairies non résolues.
      </para>
    </sect2>

    <sect2 id="getstarted-custominstall-config-rootpasswd">
      <title>Configurer le mot de passe root</title>

      <para>
	Maintenant que le cache de librairies dynamique et les liens sont
	configurés, vous pouvez lancer des commandes sur le système installé.
	Nous allons l'utiliser pour configurer le mot de passe
	<emphasis>root</emphasis>. La commande <command>passwd</command> est
	utilisée pour configurer le mot de passe d'un utilisateur existant
	(l'utilisateur <emphasis>root</emphasis> fait partie du fichier initial
	<filename>/etc/passwd</filename>). Nous allons utiliser la commande
	<command>chroot</command> à nouveau, pour lancer la commande sur la
	partition cible :
      </para>

      <screen>
# <command>chroot /mnt /usr/bin/passwd root</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-timezone">
      <title>Configurer le fuseau horaire</title>

      <para>
	Sur les systèmes de type UNIX, il est important de configurer le fuseau
	horaire correctement, car il est utilisé par plusieurs parties du
	système. Par exemple, le fuseau horaire est utilisé par NTP pour
	synchroniser le temps correctement, ou par certains programmes réseau
	pour calculer la différence de temps entre un client et un serveur. Sur
	Slackware Linux le fuseau horaire peut être configuré en créant un lien
	symbolique de <filename>/etc/localtime</filename> sur un fichier de
	fuseau horaire. Vous pouvez trouver le fuseau horaire pour votre zone en
	consultant le répertoire <filename>/mnt/usr/share/zoneinfo</filename>.
	La plupart des fuseaux horaires se trouvent dans les sous-répertoires
	de leurs régions respectives. Par exemple pour utiliser
	<emphasis>Europe/Amsterdam</emphasis> comme fuseau horaire, vous pouvez
	lancer les commandes suivantes :
      </para>

      <screen>
# <command>cd /mnt</command>
# <command>rm -rf etc/localtime</command>
# <command>ln -sf /usr/share/zoneinfo/Europe/Amsterdam etc/localtime</command>
      </screen>

      <para>
	Après la configuration du fuseau horaire, les programmes ne savent
	toujours pas si l'horloge matérielle est configurée sur le temps local,
	ou sur le standard UTC (Coordinated Universal Time). Si vous utilisez
	un autre système d'exploitation sur la même machine qui n'utilise pas
	UTC il est bon de configurer l'horloge matérielle sur le temps local.
	Sur les systèmes de type UNIX il est coutume de configurer le temps
	système à UTC. Vous pouvez configurer le temps qu'utilise l'horloge
	système en créant le fichier <filename>/etc/hardwareclock</filename>, et
	en y ajoutant le mot <emphasis>localtime</emphasis> si votre horloge
	est configurée sur le temps local, ou <emphasis>UTC</emphasis> pour UTC.
        Par exemple, pour utiliser UTC, vous pouvez créer
        <filename>/etc/hardwareclock</filename> de la façon suivante :
      </para>

      <screen>
# <command>echo "UTC" &gt; /mnt/etc/hardwareclock</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-fonts">
      <title>Créer le cache de fontes X11</title>

      <para>
	Si vous allez utiliser X11, vous devez initialiser le cache de fontes
	pour les fontes TrueType et Type1. Cela s'effectue avec la commande
	<command>fc-cache</command> :
      </para>

      <screen>
# <command>chroot /mnt /usr/bin/fc-cache</command>
      </screen>
    </sect2>
  </sect1>

  <sect1 id="getstarted-custominstall-script">
    <title>Script d'installation automatisée</title>

    <para>
      Il est facile de rassembler les étapes d'une installation personalisée
      dans un script, qui effectue les étapes de configuration automatiquement.
      C'est idéal pour fabriquer des installations par défaut de serveurs ou
      pour procéder à des installations en masse de clients Linux. Ces sections
      contiennent un script d'exemple qui a été écrit par William Park. Il est
      facile d'ajouter un script d'installation sur le média d'installation de
      Slackware Linux, particulièrement si vous utilisez un CD-ROM
      d'installation ou si vous démarrez le système d'installation depuis une
      clé USB.
    </para>

    <para>
      Le système d'installation est stocké dans un fichier image compressé,
      disponible sur le média de la distribution sous le nom de
      <filename>isolinux/initrd.img</filename>. Vous pouvez en faire une copie
      sur votre disque dur, et la décompresser avec <command>gunzip</command> :
    </para>

    <screen>
# <command>mv initrd.img initrd.img.gz</command>
# <command>gunzip initrd.img.gz</command>
    </screen>

    <para>
      Après décompression de l'image, vous pouvez monter le fichier en tant que
      disque, en utilisant le périphérique loopback :
    </para>

    <screen>
# <command>mount -o loop initrd.img /mnt/hd</command>
    </screen>

    <para>
      Vous pouvez alors ajouter un script au fichier initrd en l'ajoutant dans
      l'arborescence qui est disponible depuis le point de montage. Après avoir
      effectué les modifications nécessaires, vous pouvez démonter le système
      de fichiers et le compresser :
    </para>

    <screen>
# <command>umount /mnt/hd</command>
# <command>gzip initd.img</command>
# <command>mv initrd.img.gz initrd.img</command>
    </screen>

    <para>
      Vous pouvez alors placer le nouveau fichier
      <filename>initrd.img</filename> sur le média d'installation, et tester le
      script.
    </para>

    <programlisting>
#! /bin/sh
# Copyright (c) 2003-2005 by William Park &lt;opengeometry@yahoo.ca&gt;.
# All rights reserved.
#
# Usage: slackware-install.sh

rm_ln ()		# Usage: rm_ln from to
{
	rm -rf $2; ln -sf $1 $2
}


###############################################################################
echo "Partitioning harddisk..."

(   echo -ne "n\np\n1\n\n+1000M\n"	# /dev/hda1 --> 1GB swap
	echo -ne "n\np\n2\n\n+6000M\n"	# /dev/hda2 --> 6GB /
	echo -ne "t\n1\n82\nw\n"
) | fdisk /dev/hda

mkswap /dev/hda1		# swap
swapon /dev/hda1

mke2fs -c /dev/hda2		# /
mount /dev/hda2 /mnt


###############################################################################
echo "Installing packages..."

mount -t iso9660 /dev/hdc /cdrom	# actually, /var/log/mount
cd /cdrom/slackware
for p in [a-z]*; do		# a, ap, ..., y
	installpkg -root /mnt -priority ADD $p/*.tgz
done

cd /mnt


###############################################################################
echo "Configuring /dev/* stuffs..."

rm_ln psaux dev/mouse		# or, 'input/mice' for usb mouse
rm_ln ttyS0 dev/modem
rm_ln hdc dev/cdrom
rm_ln hdc dev/dvd


###############################################################################
echo "Configuring /etc/* stuffs..."

cat &gt; etc/fstab &lt;&lt; EOF
/dev/hda1   swap         swap     defaults         0  0
/dev/hda2   /            ext2     defaults         1  1
devpts      /dev/pts     devpts   gid=5,mode=620   0  0
proc        /proc        proc     defaults         0  0
#
/dev/cdrom  /mnt/cdrom   iso9660  noauto,owner,ro  0  0
/dev/fd0    /mnt/floppy  auto     noauto,owner     0  0
tmpfs       /dev/shm     tmpfs    noauto           0  0
EOF

cat &gt; etc/networks &lt;&lt; EOF
loopback	127.0.0.0
localnet	192.168.1.0
EOF
cat &gt; etc/hosts &lt;&lt; EOF
127.0.0.1	localhost
192.168.1.1	node1.example.net	node1
EOF
cat &gt; etc/resolv.conf &lt;&lt; EOF
search example.net
nameserver 127.0.0.1
EOF
cat &gt; etc/HOSTNAME &lt;&lt; EOF
node1.example.net
EOF

## setup.05.fontconfig
chroot . /sbin/ldconfig		# must be run before other program
chroot . /usr/X11R6/bin/fc-cache

chroot . /usr/bin/passwd root

## setup.06.scrollkeeper
chroot . /usr/bin/scrollkeeper-update

## setup.timeconfig
rm_ln /usr/share/zoneinfo/Canada/Eastern  etc/localtime
cat &gt; etc/hardwareclock &lt;&lt; EOF
localtime
EOF

## setup.liloconfig
cat &gt; etc/lilo.conf &lt;&lt; EOF
boot=/dev/hda
delay=100
vga=normal	# 80x25 char
# VESA framebuffer console:
#   pixel	char	8bit	15bit	16bit	24bit
#   -----	----	----	-----	-----	-----
#   1600x1200		796	797	798	799
#   1280x1024	160x64	775	793	794	795
#   1024x768	128x48	773	790	791	792
#   800x600	100x37	771	787	788	789
#   640x480	80x30	769	784	785	786
image=/boot/vmlinuz		# Linux
	root=/dev/hda2
	label=bare.i
	read-only
# other=/dev/hda1		# Windows
#     label=win
#     table=/dev/hda
EOF
lilo -r .

## setup.xwmconfig
rm_ln xinitrc.fvwm95  etc/X11/xinit/xinitrc


###############################################################################
echo "Configuring /etc/rc.d/rc.* stuffs..."

cat &gt; etc/rc.d/rc.keymap &lt;&lt; EOF
#! /bin/sh
[ -x /usr/bin/loadkeys ] &amp;&amp; /usr/bin/loadkeys us.map
EOF
chmod -x etc/rc.d/rc.keymap

## setup.mouse
cat &gt; etc/rc.d/rc.gpm &lt;&lt; 'EOF'
#! /bin/sh
case $1 in
	stop)
	    echo "Stopping gpm..."
	    /usr/sbin/gpm -k
	    ;;
	restart)
	    echo "Restarting gpm..."
	    /usr/sbin/gpm -k
	    sleep 1
	    /usr/sbin/gpm -m /dev/mouse -t ps2
	    ;;
	start)
	    echo "Starting gpm..."
	    /usr/sbin/gpm -m /dev/mouse -t ps2
	    ;;
	*)
	    echo "Usage $0 {start|stop|restart}"
	    ;;
esac
EOF
chmod +x etc/rc.d/rc.gpm

## setup.netconfig
cat &gt; etc/rc.d/rc.inet1.conf &lt;&lt; EOF
IPADDR=(192.168.1.1)		# array variables
NETMASK=(255.255.255.0)
USE_DHCP=()			# "yes" or ""
DHCP_HOSTNAME=()
GATEWAY=""
DEBUG_ETH_UP="no"
EOF

cat &gt; etc/rc.d/rc.netdevice &lt;&lt; EOF
/sbin/modprobe 3c59x
EOF
chmod +x etc/rc.d/rc.netdevice

## setup.setconsolefont
mv etc/rc.d/rc.font{.sample,}
chmod -x etc/rc.d/rc.font

## setup.services
chmod +x etc/rc.d/rc.bind
chmod +x etc/rc.d/rc.hotplug
chmod +x etc/rc.d/rc.inetd
chmod +x etc/rc.d/rc.portmap
chmod +x etc/rc.d/rc.sendmail
#
chmod -x etc/rc.d/rc.atalk
chmod -x etc/rc.d/rc.cups
chmod -x etc/rc.d/rc.httpd
chmod -x etc/rc.d/rc.ip_forward
chmod -x etc/rc.d/rc.lprng
chmod -x etc/rc.d/rc.mysqld
chmod -x etc/rc.d/rc.pcmcia
chmod -x etc/rc.d/rc.samba
chmod -x etc/rc.d/rc.sshd
    </programlisting>
  </sect1>
</chapter>
