<!-- $Id: concepts.xml 333 2007-10-21 17:20:54Z danieldk $ -->

<chapter id="concepts"> <?dbhtml filename="concepts.html"?>
  <title>Concepts généraux</title>

  <para>
    Ce chapitre est une introduction aux concepts généraux UNIX et GNU/Linux.
    Il est important de lire ce chapitre entièrement si vous n'avez aucune
    expérience en UNIX ou GNU/Linux. Beaucoup de concepts couverts dans ce
    chapitres sont repris dans ce livre et dans GNU/Linux.
  </para>

  <sect1 id="concepts-multitasking">
    <title>Multitâche</title>

    <sect2 id="concepts-multitasking-intro">
      <title>Introduction</title>

      <para>
	Une des forces traditionnelles d'UNIX est le multitâche. Multitâche
	signifie que plusieurs programmes peuvent être exécutés en même temps.
	Vous devez vous demander pourquoi c'est important, car la plupart des
	gens utilisent seulement une application à la fois. Le multitâche
	est une nécessité élémentaire pour les systèmes de type UNIX. Même si
	vous n'avez démarré aucun programme, il y a des programmes qui tournent
	en tâche de fond. Par exemple, certains programmes fournissent des
	services réseau, alors que d'autres affichent un prompt de login et
	attendent qu'un utilisateur se logue sur un terminal (virtuel). Les
	programmes qui s'exécutent en tâche de fond sont souvent appelé des
	<emphasis>processus démon</emphasis><footnote>
          <para>
            Le terme <emphasis>démon</emphasis> (daemon en anglais) n'a rien à
	    avoir avec le <emphasis>démon</emphasis> qui fait référence à des
	    êtres supernaturels de la mythologie grecque.
          </para>
        </footnote>.
      </para>
    </sect2>

    <sect2 id="concepts-multitasking-procsthreads">
      <title>Processus et threads</title>

      <para>
	Après avoir chargé un programme depuis un média de stockage, une
	instance de ce programme est démarrée. Cette instance est appelée un
        <emphasis>processus</emphasis>. Un processus a sa propre mémoire
	protégée, nommée l'<emphasis>espace mémoire du processus</emphasis>.
	L'espace mémoire d'un processus a 2 zones importantes : la section
	<emphasis>texte</emphasis> et la section <emphasis>data</emphasis>. La
	section <emphasis>texte</emphasis> est le code du programme en
	lui-même ; il est utilisé pour dire au système quoi faire. La section
	<emphasis>data</emphasis> est utilisée pour stocker les données
	constantes et les variables d'exécution. Le système d'exploitation donne
	à chaque processus un temps d'exécution. Sur un système mono-processeur
	les processus ne s'exécutent pas réellement simultanément. En réalité,
	un ordonnanceur dans le noyau divise le temps CPU pour chaque processus,
	donnant l'illusion que les processus tournent en parallèle. Ce
	fonctionnement est appelé <emphasis>partage de temps</emphasis>. Sur un
	système multi-CPU ou multi-core, plus d'un processus tourne
	simultanément, mais le partage de temps est toujours utilisé pour
	diviser le temps CPU disponible par processus.
      </para>

      <para>
	Les nouveaux processus sont créés par duplication d'un processus
	existant à l'aide de l'appel système <command>fork</command>. <xref
        linkend="fork" /> montre le schéma d'un appel fork() en action. Le
	processus père effectue l'appel fork(). Le noyau répond à cet appel
	en dupliquant le processus et en nommant un processus le
	<emphasis>père</emphasis>, et l'autres processus le
	<emphasis>fils</emphasis>.
      </para>

      <figure id="fork">
        <title>Fork d'un processus</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/fork.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>
	Le fork peut être utilisé par un programme pour créer 2 processus qui
	s'exécutent simultanément sur des machines multiprocesseurs. Cependant,
	ce n'est pas souvent idéal, car chaque processus aura sont propre espace
	d'adressage. La duplication de la mémoire du processus au départ prend
	relativement beaucoup de temps, et il est difficile de partager des
	données entre les 2 processus. Ce problème est résolu par le concept
	nommé <emphasis>multithreading</emphasis>. Le multithreading signifie
	que plusieurs instances de la section texte peuvent s'exécuter en même
	temps, partageant la même section data. Ces instances, nommées threads,
	peuvent être executées en parallèle sur plusieurs CPUs.
      </para>
    </sect2>
  </sect1>

  <sect1 id="concepts-fshierarchy">
    <title>Système de fichiers hiérarchique</title>

    <sect2 id="concepts-fshierarchy-structure">
      <title>Structure</title>

      <para>
	Les systèmes d'exploitation stockent les données dans des systèmes de
	fichiers. Un système de fichiers est une structure arborescente de
	répertoires qui contiennent des fichiers, comme le système
	d'exploitation, des programmes et données utilisateur. La plupart des
	systèmes de fichiers peuvent aussi stocker des méta-données concernant
	les fichiers et répertoires, comme par exemple les dates d'accès et de
	modification. Sur GNU/Linux il n'y a qu'une seule hiérarchie de système
	de fichiers, ce qui signifie que GNU/Linux n'a pas de lettre désignant
	les disques (e.g. A:, C:, D:) pour chaque système de fichiers, comme
	sous DOS et Windows. Le système de fichiers ressemble à un arbre, avec
	un répertoire racine (qui n'a pas de répertoire parent), des branches,
	et des feuilles (répertoire sans sous-répertoires). Le répertoire racine
	est toujours noté avec une barre oblique (slash - <quote>/</quote>).
	Les répertoires sont séparés par ce même caractère.
      </para>

      <figure id="filesystem-structure">
        <title>La structure du système de fichiers</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/fs-structure.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>
        <xref linkend="filesystem-structure"/> montre la structure d'un système
	de fichiers.  Vous pouvez voir que le répertoire racine
        <filename>/</filename> a 2 répertoires fils:
        <filename>bin</filename> et <filename>home</filename>. Le répertoire
        <filename>home</filename> a 2 répertoires fils, <filename>joe</filename>
	et <filename>jack</filename>. Le diagramme montre le chemin complet de
	chaque répertoire. La même notation est utilisée pour les fichiers.
	Supposez qu'il y ait un fichier nommé <filename>memo.txt</filename> dans
	le répertoire <filename>/home/jack</filename>, le chemin complet du
	fichier est <filename>/home/jack/memo.txt</filename>.
      </para>

      <para>
	Chaque répertoire a 2 entrées spéciales,
        <quote><filename>.</filename></quote>, et
        <quote><filename>..</filename></quote>. La première fait référence au
	répertoire lui-même, la seconde fait référence au répertoire parent.
	Ces entrées sont utilisées pour créer des chemins relatifs. Si vous
	travaillez dans le répertoire <filename>jack</filename> vous pouvez
	faire référence au répertoire <filename>/home/joe</filename> avec 
        <filename>../joe</filename>.
      </para>
    </sect2>

    <sect2 id="concepts-fshierarchy-mounting">
      <title>Montage</title>

      <para>
	Vous vous demandez peut-être comment il est possible d'accéder à
	d'autres périphériques ou partitions que celles du disque dur qui
	contient le système de fichiers racine. Linux utilise la même approche
	qu'UNIX pour l'accès aux autres systèmes de fichiers. Linux permet à
	l'administrateur de connecter un périphérique à un quelconque répertoire
	de la structure du système de fichiers. Ce processus est appelé le
        <emphasis>montage</emphasis>.  Par exemple, quelqu'un peut monter le
	lecteur de CD-ROM sur le répertoire <filename>/cdrom</filename>.
        Si le montage est correct, les fichiers du CD-ROM sont accessibles à
	travers de ce répertoire. Le processus de montage est décrit en détails
	dans <xref linkend="basics-filesystem-mounting"/>.
      </para>
    </sect2>

    <sect2 id="concepts-fshierarchy-commondirs">
      <title>Répertoires standards</title>

      <para>
	Le Filesystem Hierarchy Standard Group (le groupe sur le standard de
	hiérarchie du système de fichiers) a essayé de créer un standard qui
	décrit quels répertoires devraient être disponibles sur un système
	GNU/Linux. Actuellement, la plupart des distributions majeures utilisent
	le standard de hiérarchie du système de fichiers
	(Filesystem Hierarchy Standard - FHS) comme base. Cette section décrit
	quelques répertoires obligatoires sur les systèmes GNU/Linux.
      </para>

      <para>
	Notez que GNU/Linux n'a pas un répertoire séparé pour chaque application
	(comme sous Windows). Au lieu de cela, les fichiers sont ordonnés par
	fonction et par type. Par exemple, les binaires les plus communs, pour
	la plupart des programmes utilisateur sont stockés dans 
        <filename>/usr/bin</filename>, et leurs librairies dans 
        <filename>/usr/lib</filename>. Voici une petite vue d'ensemble des
	répertoires importants sur un système Slackware Linux:
      </para>


      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">/bin</emphasis>: les programmes utilisateur
	    essentiels que doivent être disponible au cas où
            <filename>/usr</filename> n'était pas monté.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/dev</emphasis>: les fichiers de périphérique.
	    Ce sont des fichies spéciaux qui permettent d'accéder à certains
	    périphériques.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/etc</emphasis>: le répertoire
            <filename>/etc</filename> contient tous les fichiers de
	    configuration importants.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/home</emphasis>: contient les répertoires
	    personnels de chaque utilisateur.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/lib</emphasis>: les librairies système
	    essentielles (comme glibc), et les modules noyau.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/root</emphasis>: le répertoire personnel de
	    l'administrateur <emphasis>root</emphasis>.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/sbin</emphasis>: les programmes essentiels
	    qui sont utilisés pour l'administration système.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/tmp</emphasis>: un répertoire en écriture
	    pour tout le monde pour les fichiers temporaires.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/bin</emphasis>: contient la plupart des
	    programes utilisateur.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/lib</emphasis>: les librairies qui ne
	    sont pas essentielles au démarrage du système.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/sbin</emphasis>: les programmes
	    d'administration système non essentiels.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/var</emphasis>: des fichiers de données
	    variables, comme les logs.
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="concepts-devices">
    <title>Périphériques</title>

    <sect2 id="concepts-devices-intro">
      <title>Introduction</title>

      <para>
	Sous GNU/Linux virtuellement tout est représenté par un fichier, y
	compris	les périphériques. Tout système GNU/Linux a un répertoire avec
	des fichiers spéciaux, nommé <filename>/dev</filename>. Chaque fichier
	dans le répertoire <filename>/dev</filename> représente un périphérique
	ou un pseudo-périphérique. A un fichier de périphérique, 2 numéros
	spéciaux sont associés, le numéro de périphérique
	<emphasis>majeur</emphasis> et le numéro de périphérique
	<emphasis>mineur</emphasis>. Le noyau sait quel périphérique représente
	le fichier grâce à ces numéros de périphérique. L'exemple suivant montre
	les numéros de périphérique pour le fichier de périphérique
	<filename>/dev/zero</filename> :
      </para>

      <screen>
$ <command>file /dev/zero</command>
/dev/zero: character special (1/5)
      </screen>

      <para>
	La commande <command>file</command> peut être utilisée pour connaître le
	type d'un fichier. Ce fichier particulier est reconnu comme un fichier
	de périphérique qui a <emphasis>1</emphasis> pour numéro de périphérique
	majeur, et <emphasis>5</emphasis> pour numéro de périphérique mineur.
      </para>

      <para>
	Si vous avez installé le paquet kernel source, vous trouverez une
	imposante liste de tous les périphériques les plus importants avec leur
	numéros mineur et majeur dans le fichier
        <filename>/usr/src/linux/Documentation/devices.txt</filename>. Une liste
	à jour est aussi en ligne dans les archives du noyau Linux (Linux Kernel
	Archives<footnote>
          <para>
            <ulink url="ftp://ftp.kernel.org/pub/linux/docs/device-list/" />
          </para>
        </footnote>.
      </para>

      <para>
	Le noyau Linux gère 2 types de périphériques : les périphériques
        <emphasis>caractère</emphasis> et les périphériques <emphasis>bloc</emphasis>. Les
	périphériques caractère peuvent être lus octet par octet, les
	périphériques bloc ne le peuvent pas. Les périphériques bloc sont lus par
	blocs (par exemple 4096 octets à la fois). Un périphérique est de type
	caractère ou bloc en fonction de la nature de ce périphérique. Par
	exemple, la plupart des médias de stockage sont des périphériques bloc,
	et la plupart des périphériques d'entrée sont des périphériques
	caractère. Les périphériques bloc ont un avantage, à savoir qu'il
	peuvent être mis en cache. Cela signifie que les blocs les plus
	fréquemment lus ou écrits sont stockés dans une zone spécifique de la
	mémoire, nommée cache. La mémoire est bien plus rapide que la plupart
	des médias de stockage, donc il y a un fort gain de performances en
	effectuant les opérations fréquentes de lecture et d'écriture de blocs
	en mémoire. Evidemment,	les modifications finissent par être écrites sur
	le média de stockage afin de refléter les changements qui ont été faits
	dans le cache.
      </para>
    </sect2>

    <sect2 id="concepts-devices-atascsi">
      <title>Les périphériques ATA et SCSI</title>

      <para>
	Il y a deux types de périphériques de bloc que nous allons examiner
        en détail, car la compréhension du nommage de ces périphériques est
        cruciale pour le partitionnement d'un disque dur et leur montage.
	Presque tous les ordinateurs modernes à architecture x86 utilisent des
	disques durs et CD-ROMs ATA.
        Sous Linux, ces périphériques sont nommés de la manière suivante :
      </para>

      <screen>
/dev/hda - périphérique maître sur le premier canal ATA
/dev/hdb - périphérique esclave sur le premier canal ATA
/dev/hdc - périphérique maître sur le second canal ATA
/dev/hdd - périphérique esclave sur le second canal ATA
      </screen>

      <para>
	Sur la plupart des ordinateurs avec un seul disque dur, le disque dur
	est le périphérique maître sur le premier canal ATA
	(<filename>/dev/hda</filename>), et le CD-ROM est le périphérique
	maître sur le second canal ATA. Les partitions disque dur sont nommées
	d'après le nom du disque auquel elles appartiennent suivi d'un numéro.
        Par exemple, <filename>/dev/hda1</filename> est la première partition du
	disque représenté par le fichier de périphérique
	<filename>/dev/hda</filename>
      </para>

      <para>
	Les disques durs SCSI et les lecteurs de CD-ROM suivent une autre 
	convention de nommage. Le SCSI n'est pas couramment utilisé dans les
	machines d'entrée de gamme, mais les périphériques USB et Serial ATA
	(SATA) sont aussi représentés comme des disques SCSI. La notation
	suivante est utilisée pour les périphériques SCSI :
      </para>

      <screen>
/dev/sda - Premier disque SCSI
/dev/sdb - Deuxième disque SCSI
/dev/sdc - Troisième disque SCSI
/dev/scd0 - Premier CD-ROM
/dev/scd1 - Deuxième CD-ROM
/dev/scd2 - Troisième CD-ROM
      </screen>

      <para>
	Les noms de partitions sont construits comme pour les disques ATA ;
        <filename>/dev/sda1</filename> est la première partition du premier
	disque SCSI.
      </para>

      <para>
	Si vous utilisez l'implépentation logicielle RAID du noyau Linux, les
	volumes RAID sont disponibles en tant que <filename>/dev/mdn</filename>,
	pour lesquels <emphasis>n</emphasis> est le numéro de volume,
	démarrant à 0.
      </para>
    </sect2>
  </sect1>
</chapter>
