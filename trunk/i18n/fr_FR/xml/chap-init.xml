<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xml:id="chap-init">
  <title>Initialisation du système</title>

  <para>
    Ce chapitre décrit l'initialisation de Slackware Linux. Plusieurs fichiers
    de configuration seront décrits au fil de l'eau, utilisés pour manipuler
    le processus d'initialisation.
  </para>

  <sect1 xml:id="chap-init-lilo">
    <title>Le bootloader</title>

    <para>
      La pièce sans doute la plus importante d'un système d'exploitation est le
      noyau. Le noyau gère les ressources matérielles et les processus
      logiciels. Le noyau est lancé par une interface fine entre le
      <acronym>BIOS</acronym> (Basic Input/Output System - NdT : système
      entrée/sortie basique) et le noyau, appelée le bootloader. Le bootloader
      gère la complexité induite par un noyau spécifique (ou même moins
      spécifique).
    </para>

    <para>
      La plupart des bootloaders fonctionnent en fait en 2 phases. La première
      étape du loader charge la seconde phase du loader, qui réalise le vrai
      travail. Le bootloader est divisé en 2 phases sur les ordinateurs x86, car
      le BIOS ne charge qu'un seul secteur (le dit secteur de boot) de
      taille égale à 512 octets.
    </para>

    <para>
      Slackware Linux utilise le bootloader <acronym>LILO</acronym> (LInux
      LOader - NdT : chargeur Linux). Ce bootloader est développé depuis 1992,
      et il est écrit spécialement pour charger le kernel Linux. Récemment LILO
      a été remplacé par <acronym>GRUB</acronym> (GRand Unified Bootloader) dans
      la plupart des distributions GNU/Linux. GRUB est disponible en tant que
      paquet supplémentaire sur les médias d'installation de Slackware Linux.
    </para>

    <sect2 xml:id="chap-init-lilo-config">
      <title>Configuration de LILO</title>

      <para>
	LILO est configuré à travers le fichier de configuration
	<filename>/etc/lilo.conf</filename>. Slackware Linux fournit un outil
	simple pour configurer LILO. Cet outil de configuration peut être lancé
	avec la commande <command>liloconfig</command>, décrit dans le chapitre
	installation (<xref linkend="chap-install-installing"/>).
      </para>

      <para>
	La configuration manuelle de LILO est assez simple. Le fichier de
	configuration de LILO commence par quelques réglages globaux :
      </para>

      <screen>
# Start LILO global section
boot = /dev/sda <co xml:id="liloconf-global-1" />
#compact        # faster, but won't work on all systems.
prompt <co xml:id="liloconf-global-2" />
timeout = 50 <co xml:id="liloconf-global-3" />
# Normal VGA console
vga = normal <co xml:id="liloconf-global-4" />
      </screen>

      <calloutlist>
	<callout arearefs="liloconf-global-1">
	  <para>
	    L'option <emphasis>boot</emphasis> spécifie où le bootloader LILO
	    doit être installé. Si vous voulez utiliser LILO en tant que
	    bootloader principal pour démarrer Linux et/ou d'autres systèmes
	    d'exploitation, il est conseillé d'installer LILO dans le 
	    <acronym>MBR</acronym> (Master Boot Record) du disque dur utilisé
	    pour démarrer le système. LILO est installé dans le MBR en omettant
	    le numéro de partition, par exemple <filename>/dev/hda</filename>
	    ou <filename>/dev/sda</filename>.  Si vous voulez installer LILO
	    sur une partition spécifique, ajoutez un numéro de partition, comme
	    <filename>/dev/sda1</filename>.  Assurez-vous que vous avez un autre
	    bootloader dans le MBR, ou que la partition est active en utilisant
	    <command>fdisk</command>.  Autrement vous risquez d'obtenir un
	    système qui ne démarre pas.
	  </para>

	  <para>
	    Faites attention is vous utilisez des partitions avec un système de
	    fichiers XFS ! Ecrire LILO sur une partition XFS va écraser une
	    partie du système de fichiers. Si vous utilisez un système de
	    fichiers racine (<filename>/</filename>) XFS, créez un système de
	    fichiers non XFS <filename>/boot</filename> sur lequel vous
	    installez LILO, ou installez LILO sur le MBR.
	  </para>
	</callout>
	<callout arearefs="liloconf-global-2">
	  <para>
	    L'option <emphasis>prompt</emphasis> va commander à LILO d'afficher
	    un menu de boot. A partir de ce menu vous pouvez sélectionner quel
	    kernel ou système d'exploitation doit être démarré. Si vous n'avez
	    pas activé cette option, vous pouvez toujours accéder au menu
	    bootloader en maintenant appuyé la touche &lt;Shift&gt; quand le
	    bootloader est démarré.
            </para>
	</callout>
	<callout arearefs="liloconf-global-3">
	  <para>
	    La valeur <emphasis>timeout</emphasis> spécifie combien de temps
	    LILO doit attendre avant que le kernel ou OS par défaut soit
	    démarré. Le temps est spécifié en dixièmes de secondes, donc dans
	    l'exemple ci-dessus LILO va attendre 5 secondes avant d'effectuer le
	    démarrage.
	  </para>
	</callout>
	<callout arearefs="liloconf-global-4">
	  <para>
	    Vous pouvez spécifier le mode vidéo que le noyau doit utiliser avec
	    l'option <emphasis>vga</emphasis>. Lorsqu'elle est positionnée à
	    <emphasis>normal</emphasis> le noyau va utiliser le mode texte
	    normal 80x25.
	  </para>
	</callout>
      </calloutlist>

      <para>
	Les options globales sont suivies par des sections ajoutant des noyaux
	Linux ou d'autres systèmes d'exploitation. La plupart des sections
	du noyau Linux ressemblent à ceci :
      </para>

      <screen>
image = /boot/vmlinuz <co xml:id="co-liloconf-kernel-1" />
  root = /dev/sda5 <co xml:id="co-liloconf-kernel-2" /> 
  label = Slack <co xml:id="co-liloconf-kernel-3" />
  read-only <co xml:id="co-liloconf-kernel-4" />
      </screen>

      <calloutlist>
	<callout arearefs="co-liloconf-kernel-1">
	  <para>
	    L'option <emphasis>image</emphasis> spécifie l'image kernel devant
	    être chargée pour cet item LILO.
	  </para>
	</callout>
	<callout arearefs="co-liloconf-kernel-2">
	  <para>
	    Le paramètre <emphasis>root</emphasis> est passé au kernel, et sera
	    utilisé par le kernel en tant que système de fichiers 
	    (<filename>/</filename>).
	  </para>
	</callout>
	<callout arearefs="co-liloconf-kernel-3">
	  <para>
	    Le texte <emphasis>label</emphasis> est utilisé en tant que label
	    pour cette entrée dans le menu de démarrage LILO.
	  </para>
	</callout>
	<callout arearefs="co-liloconf-kernel-4">
	  <para>
	    <emphasis>read-only</emphasis> spécifie que le système de fichiers
	    racine doit être monté en lecture seule. Le système de fichiers doit
	    être monté en lecture seule afin de permettre la vérification du
	    système de fichiers.
	  </para>
	</callout>
      </calloutlist>
    </sect2>

    <sect2 xml:id="chap-init-lilo-installation">
      <title>Installation de LILO</title>

      <para>
	LILO ne lit pas le fichier <filename>/etc/lilo.conf</filename> lors de
	la seconde phase. Donc, vous devrez enregistrer les modifications de la
	seconde phase du chargement lors de la configuration de LILO.
	Ceci est même nécessaire si vous installez un nouveau kernel avec le
	même nom de fichier, puisque la position du kernel sur le disque peut
	avoir changé. Réinstaller LILO se fait simplement avec la commande
	<command>lilo</command> :
      </para>

      <screen>
# <command>lilo</command>
Added Slack26 *
Added Slack
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-init-init">
    <title>init</title>

    <para>
      Après le chargement et le démarrage du noyau, celui-ci démarre la commande
      <command>init</command>. <command>init</command> est le parent de tous les
      processus, et veille à démarrer les scripts d'initialisation, et à créer
      les consoles de login avec <command>agetty</command>. Le comportement de
      <command>init</command> est configuré par
      <filename>/etc/inittab</filename>.
    </para>

    <para>
      Le fichier <filename>/etc/inittab</filename> est assez bien documenté. Il
      spécifie les scripts que le système doit lancer pour chacun des niveaux
      d'exécution. Un niveau d'exécution traduit l'état dans lequel le système
      s'exécute. Par exemple, le niveau d'exécution 1 est le mode utilisateur
      unique, et le niveau d'exécution 3 est le mode utilisateurs multiples.
      Nous allons regarder rapidement les lignes de
      <filename>/etc/inittab</filename> pour voir comment ça fonctionne :
    </para>

    <screen>
rc:2345:wait:/etc/rc.d/rc.M
    </screen>

    <para>
      Cette ligne spécifie que <command>/etc/rc.d/rc.M</command>
      doit être démarré quand le système passe au niveau d'exécution 2, 3, 4 ou
      5. La seule ligne que vous aurez à toucher est probablement celle du
      niveau d'exécution :
    </para>

    <screen>
id:3:initdefault:
    </screen>

    <para>
      Dans cet exemple le niveau d'exécution par défaut est positionné à
      <emphasis>3</emphasis> (mode multiutilisateurs). Vous pouvez le changer
      pour un autre niveau d'exécution en remplaçant le 3 par le nouveau niveau
      d'exécution par défaut. Le niveau d'exécution 4 est particulièrement
      intéressant sur des ordinateurs de bureau, puisque Slackware Linux va
      tenter de démarrer le gestionnaire d'affichage GDM, KDM ou XDM (dans cet
      ordre). Les gestionnaires d'affichage offrent un login graphique, et font
      partie respectivement de GNOME, KDE et X11.
    </para>

    <para>
      Une autre section intéressante, les lignes spécifiant la commande pour
      gérer une console. Par exemple :
    </para>

    <screen>
c1:1235:respawn:/sbin/agetty 38400 tty1 linux
    </screen>

    <para>
      Cette ligne spécifie que <command>agetty</command> doit être démarrée sur
      <emphasis>tty1</emphasis> (le premier terminal virtuel) pour les niveaux
      d'exécution 1, 2, 3 et 5. La commande <command>agetty</command> ouvre le
      port tty, et affiche le prompt de saisie du login.
      <command>agetty</command> va alors invoquer <command>login</command> pour
      gérer le login. Comme vous pouvez le voir par ces entrées, Slackware Linux
      ne démarre qu'une seule console, <emphasis>tty6</emphasis>. Vous vous 
      demandez peut-être ce qu'il advient de <emphasis>tty0</emphasis>,
      <emphasis>tty0</emphasis> existe bien sûr, et représente la console
      active.
    </para>

    <para>
      Puisque <emphasis>/etc/inittab</emphasis> est l'endroit pour invoquer des
      instances de <command>agetty</command> pour demander des logins, vous
      pouvez ajouter un ou plusieurs agettys écoutant sur le port série. C'est
      particulièrement pratique lorsque vous avez un ou plusieurs terminaux
      connectés à une machine. Vous pouvez ajouter quelque chose ressemblant à
      ce qui suit pour démarrer une instance de <command>agetty</command>
      écoutant sur le port COM1 :
    </para>

    <screen>
s1:12345:respawn:/sbin/agetty -L ttyS0 9600 vt100
    </screen>
  </sect1>

  <sect1 xml:id="chap-init-initscripts">
    <title>Scripts d'initialisation</title>

    <para>
      Comme décrit dans la section <command>init</command> (<xref
      linkend="chap-init-init" />), <command>init</command> démarre des scripts
      gérant les différents niveaux d'exécution. Ces scripts effectuent des
      travaux et modifient les réglages nécessaires pour un niveau d'exécution
      donné, mais aussi ils démarrent d'autres scripts. Examinons un exemple
      extrait de <filename>/etc/rc.d/rc.M</filename>, le script
      qu'<command>init</command> exécute lorsque le système bascule dans le
      niveau d'exécution multiutilisateurs :
    </para>

    <programlisting>
# Start the sendmail daemon:
if [ -x /etc/rc.d/rc.sendmail ]; then
  . /etc/rc.d/rc.sendmail start
fi
    </programlisting>

    <para>
      Ces lignes demandent d'<quote>exécuter <command>/etc/rc.d/rc.sendmail
      start</command> si <filename>/etc/rc.d/rc.sendmail</filename> est
      exécutable</quote>. Cela témoigne de la simplicité des script
      d'initalisation de Slackware Linux. Des fonctionnalités différentes, comme
      par exemple les services réseau, peuvent être activés ou désactivés, en
      modifiant le flag d'exécution de leur script d'initialisation. Si le
      script d'initialisation est exécutable, le service sera démarré, sinon il
      ne le sera pas. Modifier les flags de fichiers est décrit dans
      <xref linkend="chap-filesystem-permissions-permbits" />, cependant nous
      allons voir un petit exemple sur la façon d'activer ou de désactiver
      sendmail.
    </para>

    <para>
      Pour démarrer sendmail lors de l'initialisation du système, lancez :
    </para>

    <screen>
# <command>chmod +x /etc/rc.d/rc.sendmail</command>
    </screen>

    <para>
      Pour empêcher le démarrage de sendmail lors de l'initialisation du
      système, lancez :
    </para>

    <screen>
# <command>chmod -x /etc/rc.d/rc.sendmail</command>
    </screen>

    <para>
      La plupart des scripts d'initialisation spécifiques à un service acceptent
      3 paramètres pour changer l'état du service :
      <emphasis>start</emphasis>, <emphasis>restart</emphasis> et
      <emphasis>stop</emphasis>. Ces paramètres sont plutôt explicites. Par
      exemple, si vous désirez redémarrer sendmail, vous pouvez lancer :
    </para>

    <screen>
# <command>/etc/rc.d/rc.sendmail restart</command>
    </screen>

    <para>
      Si le script n'est pas exécutable, vous devrez dire au shell que vous
      voulez exécuter le fichier avec <command>sh</command>. Par exemple :
    </para>

    <screen>
# <command>sh /etc/rc.d/rc.sendmail start</command>
    </screen>
  </sect1>

  <sect1 xml:id="chap-init-udev">
    <title>Connexion à chaud (hotplugging) et gestion des points d'accès de périphérique</title>

    <para>
      Slackware Linux supporte le hotplugging depuis Slackware Linux
      9.1.  Activé, le kernel passe les notifications d'événements à propos des
      périphériques à une commande de l'espace utilisateur. Depuis Slackware
      Linux 11.0, la collection d'outils <command>udev</command> gère ces
      notifications. <command>udev</command> gère aussi le répertoire dynamique
      <filename>/dev</filename>.
    </para>

    <para>
      Le mode opératoire de <command>udev</command> pour la gestion du
      hotplugging des périphériques est plutôt simple. Lorsqu'un périphérique
      est ajouté au système, le kernel notifie les clients des événements
      hotplug du monde utilisateur. <command>udev</command> reçoit la
      notification d'ajout du périphérique, et regarde s'il y a une
      correspondance avec un module pour ce périphérique. Si c'est le cas, le
      module pilote de périphérique pour celui-ci est chargé automatiquement.
      <command>udev</command> enlèvera le module lorsqu'il sera notifié du
      retrait du périphérique, et que plus aucun périphérique n'utilise le
      module chargé.
    </para>

    <para>
      Le sous-système udev est initialisé dans
      <filename>/etc/rc.d/rc.S</filename> par l'exécution de
      <command>/etc/rc.d/rc.udev start</command>. Comme pour la plupart des
      fonctionnalités, vous pouvez activer ou désactiver udev en changeant le
      flag d'exécution du script <filename>/etc/rc.d/rc.udev</filename> (voir
      <xref linkend="chap-init-initscripts" />).
    </para>

    <para>
      Si udev charge automatiquement des modules que vous ne voulez pas, vous
      pouvez ajouter une <emphasis>blacklist</emphasis> à votre configuration
      <command>modprobe</command> dans
      <filename>/etc/modprobe.d/blacklist</filename>. Par exemple, si vous
      voulez empêcher le chargement du module <emphasis>8139cp</emphasis>, vous
      pouvez ajouter la ligne suivante (en fait, ce module est déjà blacklisté
      dans Slackware Linux):
    </para>

    <screen>
blacklist 8139cp
    </screen>
  </sect1>

  <sect1 xml:id="chap-init-firmware">
    <title>Firmware de périphérique</title>

    <sect2 xml:id="chap-init-firmware-introduction">
      <title>Introduction</title>

      <para>
	Certains composants matériels requièrent le téléchargement d'un
	firmware. Un firmware est un morceau de logiciel utilisé pour contrôler
	le matériel. En principe, le firmware est enregistré de façon permanente
	dans un média ROM (mémoire à lecture seule - NdT : read-only memory) ou
	non-volatile comme une mémoire flash.
	Cependant, beaucoup de périphériques récents utilisent de la mémoire
	volatile pour enregistrer leur firmware, ce qui signifie que le firmware
	doit être rechargé dans la mémoire du périphérique lorsque le système
	est redémarré.
      </para>

      <para>
	Les pilotes pour les périphériques ayant besoin d'un firmware possèdent
	une table des fichiers firmware requis. Pour chaque fichier firmware
	requis par le pilote, il va générer un événement d'ajout de firmware. Si
	udev gère les événement hotplug, il va tenter de gérer cet événement.
	Les règles udev contiennent une entrée pour les événement d'ajout de
	firmware dans
	<filename>/etc/udev/rules.d/50-udev.rules</filename> :
      </para>

      <programlisting>
# firmware loader
SUBSYSTEM=="firmware", ACTION=="add", RUN+="/lib/udev/firmware.sh"
      </programlisting>

      <para>
	Cela signifie que sur événement d'ajout de firmware, le script
	<filename>/lib/udev/firmware.sh</filename> doit être exécuté. Ce script
	cherche dans les répertoires <filename>/lib/firmware</filename> et
	<filename>/usr/local/lib/firmware</filename> le firmware demandé. Si le
	fichier firmware existe, il sera chargé en copiant son contenu dans
	un point d'accès spécial de sysfs.
      </para>
    </sect2>

    <sect2 xml:id="chap-init-firmware-adding">
      <title>Ajouter un firmware</title>

      <para>
	Comme décrit dans la section précédente, certains composants matériels
	demandent le téléchargement d'un firmware au système d'exploitation.
	Si tel est le cas, et qu'aucun firmware n'est installé, le kernel va
	émettre un message d'erreur lorsque le pilote de ce matériel est chargé.
	Vous pouvez voir la sortie du kernel avec la commande
	<command>dmesg</command> ou dans le fichier de log
	<filename>/var/log/messages</filename>. Un tel message d'erreur dit
	explicitement que le firmware n'a pas pu être chargé, comme par
	exemple :
      </para>

      <screen>
ipw2100: eth1: Firmware 'ipw2100-1.3.fw' not available or load failed.
ipw2100: eth1: ipw2100_get_firmware failed: -2 
      </screen>

      <para>
	Dans ce cas, vous devrez chercher le firmware pour votre périphérique.
	Habituellement il suffit de chercher sur le web le chipset ou le pilote
	(ici <emphasis>ipw2100</emphasis>) avec le terme litéral
	<quote>firmware</quote>. L'archive du firmware contient souvent un
	fichier avec les instructions d'installation. En principe vous pouvez
	juste copier les fichiers du firmware dans
	<filename>/lib/firmware</filename>.
      </para>

      <para>
	Après avoir installé le firmware, vous pouvez recharger le pilote avec
	<command>rmmod</command> et <command>modprobe</command>, ou en
	redémarrant le système.
      </para>
    </sect2>
  </sect1>

<!-- XXX - udev rules sections should be added here <sect2
     xml:id="chap-init-hotplug-hooks"> <title>Executing scripts on
     hotplug events</title>

      <para>
	One of the useful aspects of the hotplug scripts is that you
	can execute scripts when a device is added or removed. When a
	device event occurs, hotplug will execute all scripts with the
	<filename>.hotplug</filename> suffix in
	<filename>/etc/hotplug.d/&lt;class&gt;/</filename>, in which
	<emphasis>&lt;class&gt;</emphasis> denotes the class in which
	the device is in that caused the event. There most important
	classes are:
      </para>

      <table>
	<title>Hotplug device classes</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>Prefix</entry><entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>default</entry>
	      <entry>Scripts for this device class are started
	      after any hotplug event.</entry>
	    </row>
	    <row>
	      <entry>ieee1394</entry>
	      <entry>IEEE1394/Firewire devices.</entry>
	    </row>
	    <row>
	      <entry>input</entry>
	      <entry>Input devices like keyboards and mice.</entry>
	    </row>
	    <row>
	      <entry>net</entry>
	      <entry>Network devices. Network devices will also
	      trigger bus-specific hotplug events.</entry>
	    </row>
	    <row>
	      <entry>pci</entry>
	      <entry>Devices on the PCI bus.</entry>
	    </row>
	    <row>
	      <entry>scsi</entry>
	      <entry>SCSI disks, CD-ROM and tape devices.</entry>
	    </row>
	    <row>
	      <entry>usb</entry>
	      <entry>Devices that use the USB bus.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Besides the device class, there is something some other
	convention that is worth observing: it is best to add a number
	and a dash as a prefix to the script, because this will allow
	you to order the priority of the scripts. For example,
	<filename>10-dosomething.hotplug</filename> will be executed
	before <filename>20-dosomething.hotplug</filename>.
      </para>

      <note>
	<para>
	  There is black no magic going on with the priority of the
	  script :^). <filename>/sbin/hotplug</filename> uses a
	  wildcard to loop through the scripts, and
	  <filename>10</filename> matches earlier than
	  <filename>20</filename>:
	</para>

	<programlisting>
for I in "${DIR}/$1/"*.hotplug "${DIR}/"default/*.hotplug ; do
	</programlisting>

	<para>
	  Hopefully this will give some taste of the power of shell
	  scripting.
	</para>
      </note>

      <para>
	Now, let's look at an example stub script, that does nothing
	besides outputting debug messages:
      </para>

      <programlisting>
#!/bin/sh

cd /etc/hotplug
. ./hotplug.functions

DEBUG=yes export DEBUG

debug_mesg "arguments ($*) env (`env`)"

case $ACTION in
  add|register)
    # Stub 
  ;;
  remove|unregister)
    # Stub 
  ;;
esac
      </programlisting>

      <para>
	By default, the hotplug scripts log at the
	<emphasis>notice</emphasis> level. The standard syslog
	configuration on Slackware Linux does not log this. To debug
	hotplugging scripts, it is best to change the logging
	level. You can do this by replacing the following line in
	<filename>/etc/hotplug/hotplug.functions</filename>:
      </para>

      <programlisting>
$LOGGER -t $(basename $0)"[$$]" "$@"
      </programlisting>

      <para>
	to:
      </para>

      <programlisting>
$LOGGER -p user.info -t $(basename $0)"[$$]" "$@"
      </programlisting>

      <para>
	After this change hotplug debug messages will be visible in
	<filename>/var/log/messages</filename>.
      </para>

      <para>
	As you can see the script makes use of the
	<emphasis>$ACTION</emphasis> variable to see what kind of
	hotplug action took place. Let's take a look at an example
	action when this script is used for handling USB events, and
	named <filename>10-stub.hotplug</filename>:
      </para>

      <screen>
Jul 19 16:13:23 mindbender 10-stub.hotplug[18970]: arguments (usb) env
(SUBSYSTEM=usb OLDPWD=/ DEVPATH=/devices/pci0000:00/0000:00:10.0/usb2/2-1/2-1.3/2-1.3:1.2
PATH=/bin:/sbin:/usr/sbin:/usr/bin ACTION=add PWD=/etc/hotplug HOME=/ SHLVL=2
DEVICE=/proc/bus/usb/002/009 PHYSDEVDRIVER=snd-usb-audio INTERFACE=1/2/0
PRODUCT=d8d/651/1 TYPE=0/0/0 DEBUG=yes PHYSDEVBUS=usb SEQNUM=1528 _=/usr/bin/env)
      </screen>

      <para>
	That is nice, when I plugged an USB device, the script gets
	loaded (a couple of times, this is just one of the interesting
	bits).  Actually, this is my USB Phone, which is represented
	as an USB audio device under GNU/Linux. The problem with USB
	audio devices is that the device volumes that are saved with
	<command>alsactl store</command> are not automatically set
	when the device is plugged. But right know we can easily
	execute <command>alsactl restore</command> when the device is
	plugged. Please note that the script gets very useful
	information through some environment variables.
      </para>

      <para>
	To solve the volume problem, we can create a script, say
	<filename>/etc/hotplug.d/usb/50-usb-audio-volume.hotplug</filename>,
	that looks like this:
      </para>

      <programlisting>
#!/bin/sh

cd /etc/hotplug
. ./hotplug.functions
# DEBUG=yes export DEBUG

debug_mesg "arguments ($*) env (`env`)"

case $ACTION in
  add|register)
    if [ $PHYSDEVDRIVER = "snd-usb-audio" ]; then
      /usr/sbin/alsactl restore
    fi
  ;;
  remove|unregister)
  ;;
  *)
    debug_mesg "Unknown action '$ACTION'"
  ;;
esac
      </programlisting>

      <para>
	Based on the environment variables this script can be refined
	to restrict running <command>alsactl</command> for specific
	USB audio devices.
      </para>
    </sect2>
-->
</chapter>
