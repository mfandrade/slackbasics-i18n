<!-- $Id: miscadmin.xml 283 2007-09-18 20:14:31Z danieldk $ -->

<chapter id="sysadmin-misc"> <?dbhtml filename="miscadmin.html"?>
  <title>Divers</title>

  <sect1 id="sysadmin-misc-cron">
    <sect1info>
    <authorgroup>
      <author>
        <firstname>Murray</firstname>
	<surname>Stokely</surname>
	<contrib>Ecrit par </contrib>
      </author>
    </authorgroup>

    <!-- You can modify the stylesheet to not display the above in
         print or HTML output.  It's just a way to keep things clear
	 in the source document. -->

    </sect1info>

    <title>Planifier des tâches avec cron</title>

    <indexterm><primary>cron</primary></indexterm>
    <indexterm><primary>fichier crontab</primary></indexterm>
    <indexterm><primary>planifier</primary><secondary>tâches</secondary></indexterm>

    <para>Slackware Linux comporte une implémentation du démon traditionnel UNIX
      cron permettant aux utilisateurs de planifier des tâches à exécuter à
      intervalles réguliers.  Chaque utilisateur peut créer supprimer ou
      modifier un fichier individuel crontab. Ce fichier crontab spécifie les
      commandes ou les scripts à lancer à des intervalles de temps donnés.
      Les lignes blanches dans la crontab ou les lignes commençant par un dièse
      (<quote><literal>#</literal></quote>) sont ignorées.</para>

    <para>Chaque entrée dans le fichier crontab doit contenir 6 champs séparés
      par des espaces. Ces champs sont: minute, heure, jour, mois, jour de la
      semaine, et commande. Chacun des 5 premiers champs peuvent contenir un
      temps ou un astérique <quote><literal>*</literal></quote> pour
      correspondre à tout temps pour ce champ.  Par exemple, pour exécuter la
      commande <command>date</command> chaque jour à 6h10, l'entrée
      suivante peut être insérée.</para>

    <programlisting>10 6 * * * date</programlisting>

    <para>Une crontab utilisateur peut être visualisé avec la commande
    <command>crontab -l</command>. Pour une explication plus en profondeur de la
    syntaxe du fichier crontab, examinons le crontab par défaut de
    <emphasis>root</emphasis>.</para>

    <screen># <userinput>crontab -l</userinput>
# If you don't want the output of a cron job mailed to you, you have to direct
# any output to /dev/null.  We'll do this here since these jobs should run
# properly on a newly installed system, but if they don't the average newbie
# might get quite perplexed about getting strange mail every 5 minutes. :^)
#
# Run the hourly, daily, weekly, and monthly cron jobs.
# Jobs that need different timing may be entered into the crontab as before,
# but most really don't need greater granularity than this.  If the exact
# times of the hourly, daily, weekly, and monthly cron jobs do not suit your
# needs, feel free to adjust them.
#
# Run hourly cron jobs at 47 minutes after the hour:
47<co id="co-crontab-1" /> *<co id="co-crontab-2" /> *<co id="co-crontab-3" /> *<co id="co-crontab-4" /> *<co id="co-crontab-5" /> /usr/bin/run-parts /etc/cron.hourly 1&gt; /dev/null<co id="co-crontab-6" />
#
# Run daily cron jobs at 4:40 every day:
40 4 * * * /usr/bin/run-parts /etc/cron.daily 1> /dev/null
#
# Run weekly cron jobs at 4:30 on the first day of the week:
30 4 * * 0 /usr/bin/run-parts /etc/cron.weekly 1> /dev/null
#
# Run monthly cron jobs at 4:20 on the first day of the month:
20 4 1 * * /usr/bin/run-parts /etc/cron.monthly 1> /dev/null</screen>


    <calloutlist>
      <callout arearefs="co-crontab-1">
        <para>Le premier champ, <literal>47</literal>, spécifie quel travail
	  doit être lancé à 47 après l'heure.</para>
      </callout>

      <callout arearefs="co-crontab-2">
        <para>Le second champ, <literal>*</literal>, est un astérique, donc ce
	  travail sera lancé <emphasis>chaque</emphasis> heure.</para>
      </callout>

      <callout arearefs="co-crontab-3">
        <para>Le troisième champ, <literal>*</literal>, est un astérique, donc
	  ce travail sera lancé <emphasis>chaque</emphasis> jour.</para>
      </callout>

      <callout arearefs="co-crontab-4">
        <para>Le quatrième champ, <literal>*</literal>, est un astérique, donc
	  ce travail sera lancé <emphasis>chaque</emphasis> mois.</para>
      </callout>

      <callout arearefs="co-crontab-5">
        <para>Le cinquième champ, <literal>*</literal>, est un astérique, donc
	  ce travail sera lancé <emphasis>chaque</emphasis> jour de la
	  semaine.</para>
      </callout>

      <callout arearefs="co-crontab-6">
        <para>Ce sixième champ, <command>/usr/bin/run-parts
	  /etc/cron.hourly 1> /dev/null</command>, spécifie la commande doit
	  être lancée au temps spécifié défini dans les 5 premiers champs.
	</para>
      </callout>
    </calloutlist>

    <indexterm><primary>scripts périodiques</primary></indexterm>
    <indexterm><primary>slocate</primary></indexterm>

    <para>Le crontab de root par défaut est configuré pour lancer des scripts
      dans <filename>/etc/cron.monthly</filename> à fréquence mensuelle, les
      scripts dans <filename>/etc/cron.weekly</filename> à fréquence
      hebdomadaire, les scripts dans <filename>/etc/cron.daily</filename> à
      fréquence quotidienne, et les scripts dans
      <filename>/etc/cron.hourly</filename> toutes les heures. Pour cette raison
      ils n'est absolument pas nécessaire pour un administrateur de comprendre
      les rouages internes de cron. Avec Slackware Linux, vous pouvez simplement
      ajouter un nouveau script des répertoires ci-dessus pour planifier de
      nouvelles tâches périodiques. En effet, en parcourant ces répertoires vous
      donnera une bonne idée du travail réalisé dans l'ombre régulièrement par
      Slackware Linux pour garder les choses à jour comme la base de données
      <command>slocate</command>.</para>

  </sect1>

  <sect1 id="sysadmin-misc-hdparm">
    <title>Paramètres du disque dur</title>

    <indexterm><primary>hdparm</primary></indexterm>
    <indexterm><primary>DMA</primary><secondary>activer</secondary></indexterm>

    <para>
      Beaucoup de disques durs modernes offrent des fonctionnalités variées pour
      améliorer les performances disque et pour améliorer l'intégrité. Beaucoup
      de ces fonctionnalités peuvent être configurées avec la commande
      <command>hdparm</command>. Attention en changeant les réglages disque avec
      cet utilitaire, car quelques modifications peut endommager votre disque.
    </para>

    <para>
      Vous pouvez avoir un aperçu des réglages courants d'un disque en passant
      le point d'accès d'un disque en tant que paramètre
      <command>hdparm</command> :
    </para>

    <screen>
# <command>hdparm /dev/hda</command>

/dev/hda:
 multcount    =  0 (off)
 IO_support   =  1 (32-bit)
 unmaskirq    =  1 (on)
 using_dma    =  1 (on)
 keepsettings =  0 (off)
 readonly     =  0 (off)
 readahead    = 256 (on)
 geometry     = 65535/16/63, sectors = 78165360, start = 0
    </screen>

    <para>
      Une cause commune de mauvaise performance est que le DMA n'est pas utilisé
      pour un disque automatiquement par le noyau. Le DMA va accélerer le débit
      entrée/sortie et décharger la CPU, en permettant au disque de transférer
      directement de celui-ci vers la mémoire du système. Si le DMA est
      désactivé, l'aperçu des réglages devraient contenir cette ligne :
    </para>

    <screen>
using_dma    =  0 (off)
    </screen>

    <para>
      Vous pouvez facilement activer le DMA pour ce disque avec le paramètre
      <parameter class="command">-d</parameter> de <command>hdparm</command> :
    </para>

    <screen>
# <command>hdparm -d 1 /dev/hda</command>

/dev/hda:
 setting using_dma to 1 (on)
 using_dma    =  1 (on)
    </screen>

    <para>
      Vous pouvez faire cela à chaque démarrage en ajoutant la commande hdparm
      à <filename>/etc/rc.d/rc.local</filename>.
    </para>

    <para>
      Le paramètre <parameter class="command">-i</parameter> de
      <command>hdparm</command> est aussi très utile, car il fournit des
      informations détaillées sur un disque :
    </para>

    <screen>
# <command>hdparm -i /dev/hda</command>
/dev/hda:

 Model=WDC WD400EB-00CPF0, FwRev=06.04G06, SerialNo=WD-WCAAT6022342
 Config={ HardSect NotMFM HdSw>15uSec SpinMotCtl Fixed DTR>5Mbs FmtGapReq }
 RawCHS=16383/16/63, TrkSize=57600, SectSize=600, ECCbytes=40
 BuffType=DualPortCache, BuffSize=2048kB, MaxMultSect=16, MultSect=off
 CurCHS=16383/16/63, CurSects=16514064, LBA=yes, LBAsects=78163247
 IORDY=on/off, tPIO={min:120,w/IORDY:120}, tDMA={min:120,rec:120}
 PIO modes:  pio0 pio1 pio2 pio3 pio4 
 DMA modes:  mdma0 mdma1 mdma2 
 UDMA modes: udma0 udma1 udma2 udma3 udma4 *udma5 
 AdvancedPM=no WriteCache=enabled
 Drive conforms to: device does not report version: 

 * signifies the current active mode
    </screen>
  </sect1>

  <sect1 id="sysadmin-memory-hdparm">
    <title>Contrôler l'utilisation de la mémoire</title>

    <para>
      Dans certains cas, il est utile de diagnostiquer la façon dont est
      utilisée la mémoire. Par exemple, sur un serveur peu performant vous
      voulez voir si un manque de RAM oblige le système à swapper des pages, ou
      bien vous voulez configurer un service réseau et vous cherchez les
      paramètres de cache optimaux. Slackware Linux fournit quelques outils qui
      peuvent vous aider à analyser la façon dont la mémoire est utilisée.
    </para>

    <sect2 id="sysadmin-misc-memory-vmstat">
      <title>vmstat</title>

      <para>
        <command>vmstat</command> est une commande qui fournit des statistiques
	sur différentes parties du système de mémoire virtuelle.
        Sans paramètre <command>vmstat</command> fournit un résumé de quelques
	statistiques pertinentes :
      </para>

      <screen>
# <command>vmstat</command>
procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 0  0      0 286804   7912  98632    0    0   198     9 1189   783  5  1 93  1
      </screen>

      <para>
	Puisque nous ne nous intéressons qu'à l'utilisation mémoire dans cette
	section, nous ne regarderons que les champs <emphasis>memory</emphasis> 
	et <emphasis>swap</emphasis>.
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <emphasis>swpd</emphasis>: La quantité de mémoire virtuelle
	    utilisée.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>free</emphasis>: La quantité de mémoire non utilisé à cet
	    instant.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>buff</emphasis>: La quantité de mémoire utilisée en tant
	    que buffers.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>cache</emphasis>: La quantité de mémoire utilisée en tant
	    que mémoire cache.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>si</emphasis>: La quantité de mémoire swappée récupérée du
	    disque par seconde.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>so</emphasis>: La quantité de mémoire swappée enregistrée
	    sur le disque par seconde.
          </para>
        </listitem>
      </itemizedlist>

      <para>
	Il est souvent utile de voir comment l'utilisation de la mémoire varie
	au cours du temps. Vous pouvez ajouter un intervalle en tant que
	paramètre de <command>vmstat</command>, pour lancer
	<command>vmstat</command> en continu, affichant les statistiques
	courantes. Cet intervalle est en secondes. Donc, si vous voulez avoir
	les statistiques toutes les secondes, vous pouvez exécuter :
      </para>

      <screen>
# <command>vmstat 1</command>
procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 2  0      0 315132   8832  99324    0    0   189    10 1185   767  5  1 93  1
 1  0      0 304812   8832  99324    0    0     0     0 1222  6881 24  8 68  0
 0  0      0 299948   8836  99312    0    0     0     0 1171  1824 41  9 49  0
 [...]
      </screen>

      <para>
	De plus, vous pouvez dire à <command>vmstat</command> combien de fois il
	doit afficher ces statistiques (plutôt que de le faire indéfiniment).
        Par exemple, si vous voulez afficher ces statistiques toutes les 2
	secondes, et 5 fois au total, vous pouvez lancer
        <command>vmstat</command> de la manière suivante :
      </para>

      <screen>
# <command>vmstat 2 5</command>
procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 2  0      0 300996   9172  99360    0    0   186    10 1184   756  5  1 93  1
 0  1      0 299012   9848  99368    0    0   336     0 1293  8167 20  8 21 51
 1  0      0 294788  11976  99368    0    0  1054     0 1341 12749 14 11  0 76
 2  0      0 289996  13916  99368    0    0   960   176 1320 17636 22 14  0 64
 2  0      0 284620  16112  99368    0    0  1086   426 1351 21217 25 18  0 58
      </screen>
    </sect2>

  </sect1>

</chapter>
