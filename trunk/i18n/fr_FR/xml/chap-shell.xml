<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xml:id="chap-shell">
  <title>Le shell</title>

  <sect1 xml:id="chap-shell-intro">
    <title>Introduction</title>

    <para>
      Dans ce chapitre nous allons voir l'environnement de travail traditionnel
      des systèmes UNIX : le shell. Le shell est un interpréteur qui peut être
      utilisé de façon interactive ou non interactive. Quand le shell est
      utilisé de façon non interactive il opère comme un simple mais efficace
      language de script.
    </para>

    <para>
      La procédure pour démarrer le shell dépend de l'utilisation du login en
      mode graphique ou en mode texte. Si vous vous loggez en mode texte le
      shell est démarré immédiatement après avoir saisi le [bon] mot de passe.
      Si vous utilisez un gestionnaire de login graphique comme KDM, loggez-vous
      comme d'habitude, et cherchez dans le menu de votre gestionnaire de
      fenêtres ou de votre environnement de bureau une entrée nommée
      <quote>XTerm</quote>, <quote>Terminal</quote> ou <quote>Konsole</quote>.
      XTerm est un émulateur de terminal, dès que l'émulateur de terminal est
      démarré le shell apparaît.
    </para>
		
    <para>
      Avant d'aller plus loin, vous devez être avertis que Slackware Linux
      fournit plus qu'un seul shell. Il y a 2 types de shell devenus populaires
      avec le temps, le Bourne shell et le C shell.  Dans ce chapitre nous
      décrirons le Bourne shell qui est conforme au standard IEEE 1003.1. Les
      shells Bash (Bourne Again Shell) et ksh (Korn Shell) sont conformes à ces
      standards. Donc, il est judicieux d'utiliser un de ces 2 shells. Vous
      pouvez facilement quel shell le système exécute en lançant
      <command>echo $SHELL</command>.  Voici ce qu'un shell Bash doit
      retourner :
    </para>

    <screen>
$ <userinput>echo $SHELL</userinput>
/bin/bash
    </screen>
		
    <para>
      Si vous utilisez un shell différent, vous pouvez changer votre shell par
      défaut. Avant de configurer un shell différent, vous devez trouver le
      chemin complet du shell. Vous pouvez faire cela avec la commande
      <command>which</command>. Par exemple :
    </para>

    <screen>
$ <userinput>which bash</userinput>
/bin/bash
$ <userinput>which ksh</userinput>
/bin/ksh
    </screen>

    <para>
      Sur ce système Slackware, le chemin complet vers le shell bash est
      <filename>/bin/bash</filename>, et vers le shell ksh
      <filename>/bin/ksh</filename>. Avec cette information, et la commande 
      <command>chsh</command> vous pouvez changer le shell par défaut. L'exemple
      suivant configure le shell par défaut à bash :
    </para>

    <screen>
$ <userinput>chsh -s /bin/bash</userinput>
Changing shell for daniel.
Password:
Shell changed.
    </screen>

    <para>
      Le nouveau shell sera activé après s'être déloggé du shell courant (avec
      <command>logout</command> ou <command>exit</command>), ou en ouvrant un
      nouvelle fenêtre de terminal X si vous êtes sous X11.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-executing">
    <title>Exécuter des commandes</title>

    <para>
      Un shell interactif est utilisé pour lancer des programmes en exécutant
      des commandes. Il y a 2 sortes de commandes qu'un shell peut lancer :
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  <emphasis>Les commandes internes :</emphasis> les commands internes
	  sont intégrées dans le shell. Les commandes internes courantes sont :
	  <command>cd</command>, <command>fg</command>,
	  <command>bg</command>, et <command>jobs</command>.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis>Les commandes externes :</emphasis> les commandes externes
	  sont des programmes qui ne font pas partie du programme shell, et qui
	  sont stockées séparément sur le système de fichiers. Les commandes 
	  externes courantes sont : <command>ls</command>,
	  <command>cat</command>, <command>rm</command>, et
	  <command>mkdir</command>.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      Toutes les commandes shell sont exécutées suivant la même syntaxe :
    </para>
		
    <screen>
<command>nomcommande [argument1 argument2 ... argumentn]</command>
    </screen>

    <para>
      Le nombre d'arguments est arbitraire, et ils sont toujours transmis à la
      commande. La commande peut décider de ce qu'elle fait de ces arguments.
    </para>

    <para>
      Toutes les commandes internes peuvent toujours être exécutées, car elles
      font partie du shell. Les commandes externes peuvent être exécutées juste
      par leur nom si le programme est dans le chemin de recherche du shell.
      Sinon, vous devez spécifier le chemin d'accès au programme. Le chemin de
      recherche du shell est stocké dans une variable appelée
      <emphasis>PATH</emphasis>. Une variable est un nom de bout de mémoire,
      dont le contenu peut être modifié. Nous pouvons voir le contenu de la
      variable PATH de la manière suivante :
    </para>

    <screen>
$ <userinput>echo $PATH</userinput>
/usr/kerberos/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/daniel/bin
    </screen>

    <para>
      Les chemins de répertoire dans la variable <emphasis>PATH</emphasis> sont
      séparés par le caractère deux-points (<emphasis>:</emphasis>). Vous pouvez
      utiliser la commande <command>which</command> pour vérifier si une
      commande donnée est dans le chemin de recherche du shell. Vous faites cela
      en fournissant la commande en tant qu'argument de
      <command>which</command>. Par exemple :
    </para>

    <screen>
$ <userinput>which pwd</userinput>
/bin/pwd
$ <userinput>which sysstat</userinput>
/usr/bin/which: no sysstat in (/usr/kerberos/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/daniel/bin)
    </screen>

    <para>
      Si un programme n'est pas dans le chemin, vous pouvez quand-même le lancer
      en écrivant le chemin absolu ou relatif.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-moving">
    <title>Se déplacer</title>

    <para>
      Il est souvent nécessaire de passer d'un endroit à un autre d'une ligne,
      et modifier celle-ci, quand vous éditez des commandes plus larges.
      <command>bash</command> et <command>ksh</command> on tous les deux des
      raccourcis clavier pour effectuer ces opérations communes. Il y a 2 modes
      shell, dans lesquels les raccourcis clavier sont différents. Ces modes
      correspondent dans leur comportement à 2 éditeurs populaires pour UNIX.
      Ces éditeurs sont <command>vi</command> et <command>emacs</command>. Dans
      ce livre nous ne couvrirons que les touches de type EMACS. Vous pouvez
      vérifier sous quel mode un shell s'exécute en affichant la variable
      <emphasis>SHELLOPTS</emphasis>. Dans le premier exemple le shell est
      utilisé en mode <emphasis>emacs</emphasis>, dans le second exemple le mode
      <emphasis>vi</emphasis> est utilisé. Vous identifiez le mode en cherchant
      les chaînes <emphasis>emacs</emphasis> ou <emphasis>vi</emphasis> dans le
      contenu de la variable.
    </para>

    <screen>
$ <userinput>echo $SHELLOPTS</userinput>
braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor
    </screen>

    <screen>
$ <userinput>echo $SHELLOPTS</userinput>
braceexpand:hashall:histexpand:history:interactive-comments:monitor:vi
    </screen>

    <para>
      Si le shell utilise le mode <emphasis>vi</emphasis>, vous pouvez changer
      pour le mode <emphasis>emacs</emphasis> en configurant l'option à
      <emphasis>emacs</emphasis> :
    </para>

    <screen>
$ <userinput>set -o emacs</userinput>
    </screen>

    <para>
      Avec le mode d'édition <emphasis>emacs</emphasis> activé, vous pouvez
      commencer à utiliser des raccourcis. Nous allons voir 3 types de
      raccourcis : les raccourcis d'édition de caractères, les raccourcis
      d'édition de mots et les raccourcis d'édition de ligne. Plus tard dans ce
      chapitre nous verrons aussi quelques raccourcis qui sont utilisés pour
      récupérer des entrées dans l'historique des commandes.
    </para>

    <sect2 xml:id="chap-shell-moving-char">
      <title>Edition de caractères</title>

      <para>
	Le premier groupe de raccourcis a comme unité logique le caractère,
	ce qui signifie qu'ils permettent les opérations d'édition de la ligne
	de commande au niveau du caractère.
	<xref linkend="chap-shell-moving-char-shortcuts-move" /> fournit un
	aperçu des raccourcis utilisés pour se déplacer sur une ligne caractère
	par caractère.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-move">
	<title>Déplacement par caractère</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Touches</entry><entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-b</entry>
	      <entry>Se déplace d'un caractère en arrière.</entry>
	    </row>
	    <row>
	      <entry>Ctrl-f</entry>
	      <entry>Se déplace d'un caractère en avant.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Ces raccourcis sont simples, et ne font rien d'inattendu. Supposez que
	vous ayez tapé la ligne suivante :
      </para>

      <screen>
find ~/music -name '*.ogg' - -print<emphasis role="cursor">&#32;</emphasis>
      </screen>

      <para>
	Le curseur est à la fin. Vous pouvez à présent vous déplacer vers le
	début de la ligne en laissant appuyé <emphasis>Ctrl-b</emphasis> :
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music - -name '*.ogg' -print
      </screen>

      <para>
	De même, vous pouvez revenir à la fin de la ligne en laissant appuyé
	<emphasis>Ctrl-f</emphasis>. Il y a une erreur sur cette ligne, 
	puisqu'il y a un tiret de trop. Pour enlever ce tiret, vous pouvez
	utiliser un des raccourcis de suppression de caractère.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-delete">
	<title>Effacer des caractères</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Touches</entry><entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-h</entry>
	      <entry>Supprime le caractère avant le curseur. Cela a le même
		effet qu'utiliser la touche Backspace sur la plupart des
		ordinateurs personnels.</entry>
	    </row>
	    <row>
	      <entry>Ctrl-d</entry>
	      <entry>Supprime le caractère sous le curseur.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Vous pouvez supprimer le tiret de 2 manières. La première façon est de
	déplacer le curseur sur le tiret :
      </para>

      <screen>
find ~/music <emphasis role="cursor">-</emphasis> -name '*.ogg' -print
      </screen>

      <para>
	et de presser la touche <emphasis>Ctrl-d</emphasis> 2 fois. Cela
	supprimera le caractère tiret, et l'espace qui suit le tiret :
      </para>

      <screen>
find ~/music <emphasis role="cursor">-</emphasis>name '*.ogg' -print
      </screen>

      <para>
	Revenant à la ligne originale, l'autre approche est de positionner le
	curseur sur l'espace après le tiret :
      </para>

      <screen>
find ~/music -<emphasis role="cursor">&#32;</emphasis> -name '*.ogg' -print
      </screen>

      <para>
	et de presser la touche <emphasis>Ctrl-h</emphasis> 2 fois pour
	supprimer les 2 caractères précédents, qui sont le tiret et l'espace
	avant le tiret. Le résultat sera le même sauf que le curseur va bouger :
      </para>

      <screen>
find ~/music<emphasis role="cursor">&#32;</emphasis>-name '*.ogg' -print
      </screen>

      <para>
	Une des fonctions intéressantes sur la plupart des shells modernes est
	que vous pouvez transposer (permuter) des caractères. C'est utile si
	vous faites une faute de frappe dans laquelle 2 caractères sont
	intervertis.  <xref linkend="chap-shell-moving-char-shortcuts-swap" />
	liste les raccourcis pour transposer des caractères.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-swap">
	<title>Echanger des caractères</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Touches</entry><entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-t</entry>
	      <entry>Permute (transpose) le caractère sous le curseur avec celui
		juste avant le curseur. Ceci est pratique pour corriger
		rapidement des fautes de frappe.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Supposez que vous avez tapé la commande suivante :
      </para>

      <screen>
cat myreport.ttx
      </screen>

      <para>
	L'extension contient une faute de frappe si vous vouliez faire
	<command>cat</command> <filename>myreport.txt</filename>. Cela peut
	être corrigé avec le raccourci de transposition de caractères. D'abord
	déplacez-vous sur le second caractère du couple de caractères dans le
	mauvais ordre :
      </para>

      <screen>
cat myreport.tt<emphasis role="cursor">x</emphasis>
      </screen>

      <para>
	Vous pouvez alors appuyer sur <emphasis>Ctrl-t</emphasis>. Les
	caractères vont être échangés, et le curseur sera placé avant les
	caractères échangés :
      </para>

      <screen>
cat myreport.txt<emphasis role="cursor">&#32;</emphasis>
      </screen>
    </sect2>

    <sect2 xml:id="chap-shell-moving-word">
      <title>Edition de mots</title>

      <para>
	Il est souvent fastidieux de se déplacer au niveau caractère.
	Heureusement les shells Korn et Bash permettent aussi de se déplacer
	dans les lignes au niveau du mot. Les mots sont des séquences de
	caractères séparées par un caractère spécial, comme un espace. 
	<xref linkend="chap-shell-moving-word-shortcuts-move" /> 
	résume les raccourcis qui peuvent être utilisés pour naviguer à travers
	une ligne mot par mot.
      </para>

      <table xml:id="chap-shell-moving-word-shortcuts-move">
	<title>Déplacement par mot</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Touches</entry>
	      <entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Esc b</entry>
	      <entry>
		Revient au début du mot courant ou du mot précédent.
	      </entry>
	    </row>
	    <row>
	      <entry>Esc f</entry>
	      <entry>
		Va au dernier caractère du mot courant ou du mot suivant.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Comme vous pouvez le voir les lettres de ces raccourcis sont les mêmes
	que pour se déplacer en avant et en arrière au niveau caractère. La
	logique de déplacement est un peu curieuse. Aller de l'avant met le
	curseur à la fin du mot courant, pas au premier caractère du mot
	suivant contrairement à ce que vous pouviez espérer. Regardons un petit
	exemple. Au début, le curseur est sur le premier caractère de la ligne.
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music -name '*.ogg' -print
      </screen>

      <para>
	Appuyer sur <emphasis>Esc f</emphasis> déplace le curseur avant le
	dernier caractère du premier mot, en l'occurrence
	<emphasis>find</emphasis> :
      </para>

      <screen>
find<emphasis role="cursor">&#32;</emphasis>~/music -name '*.ogg' -print
      </screen>

      <para>
	Se déplacer en avant encore une fois mettra le curseur derrière
	<emphasis>~/music</emphasis> :
      </para>

      <screen>
find ~/music<emphasis role="cursor">&#32;</emphasis>-name '*.ogg' -print
      </screen>

      <para>
	Un déplacement en arrière met le curseur sur le premier caractère du mot
	courant, ou sur le premier caractère du mot précédent si le curseur est
	sur le premier caractère d'un mot. Ainsi, le déplacement en arrière
	d'un mot dans l'exemple précédent placera le curseur sur la première
	lettre de <quote>music</quote> :
      </para>

      <screen>
find ~/<emphasis role="cursor">m</emphasis>usic -name '*.ogg' -print
      </screen>

      <para>
	Effacer par mot fonctionne comme le déplacement par mots, sauf que les
	caractères balayés sont supprimés.  <xref
	linkend="chap-shell-moving-word-shortcuts-delete" /> liste les
	raccourcis utilisés pour supprimer des mots.
      </para>

      <table  xml:id="chap-shell-moving-word-shortcuts-delete">
	<title>Supprimer des mots</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Touches</entry>
	      <entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>
		Alt-d
	      </entry>
	      <entry>
		Supprime le mot, commençant à la position du curseur.
	      </entry>
	    </row>
	    <row>
	      <entry>
		Alt-Backspace
	      </entry>
	      <entry>
		Supprime tout caractère depuis la position courante du curseur
		jusqu'au premier caractère du mot rencontré.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Enfin, il y a des raccourcis utiles pour manipuler les mots. Ces
	raccourcis sont listés dans <xref
	linkend="chap-shell-moving-word-shortcuts-modify" />.
      </para>

      <table  xml:id="chap-shell-moving-word-shortcuts-modify">
	<title>Modifier les mots</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Touches</entry>
	      <entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Alt-t</entry>
	      <entry>
		Permute (transpose) le mot courant avec le mot précédent.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-u</entry>
	      <entry>
		Passe le mot en majuscules, depuis la position courante du
		curseur.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-l</entry>
	      <entry>
		Passe le mot en minuscules, depuis la position courante du
		curseur.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-c</entry>
	      <entry>
		Capitalise le caractère courant du mot ou le premier
		caractère du mot suivant renconté.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	La transposition permute les mots. Si vous utilisez des mots normaux,
	son comportement est prévisible. Par exemple, si vous avez la ligne
	suivante avec le curseur sur <quote>two</quote>
      </para>

      <screen>
one <emphasis role="cursor">t</emphasis>wo three
      </screen>

      <para>
	La transposition va permuter <quote>two</quote> et <quote>one</quote> :
      </para>

      <screen>
two one three
      </screen>

      <para>
	Cependant s'il y a des caractères n'appartenant pas à un mot, le shell
	va permuter le mot avec le mot précédent sans toucher à ces caractères.
	Cela est très utile pour l'édition des arguments des commandes. Supposez
	que vous avez fait une erreur, et mélangé l'extension du fichier que
	vous recherchez, et le paramètre <emphasis>print</emphasis> :
      </para>

      <screen>
find ~/music -name '*.print' -ogg
      </screen>

      <para>
	Vous pouvez réparer cela en plaçant le curseur sur le second mot erroné,
	dans ce cas <quote>ogg</quote>, et en permutant les 2 mots. Cela donnera
	le résultat que nous voulons :
      </para>

      <screen>
find ~/music -name '*.ogg' -print
      </screen>

      <para>
	Enfin, il y a quelques raccourcis qui changent la capitalization des
	mots. Le raccourci Alt-u passe tous les caractèes en majuscules, depuis
	la position courante du curseur jusqu'à la fin du mot. Donc, si nous
	avons un nom en minuscules <quote>alice</quote>, passer en majuscules
	le nom avec le curseur sur <quote>i</quote> donne <quote>alICE</quote>.
	Alt-l fait de même, sauf qu'il passe les lettre minuscules.
	Donc, utiliser Alt-l sur <quote>alICE</quote> avec le curseur sur
	<quote>I</quote> changera la chaîne de caractères en
	<quote>alice</quote>. Alt-c ne passe en majuscules que le caractère
	sous le curseur, ou le caractère du mot suivant rencontré. Par exemple,
	en appuyant sur Alt-c avec le curseur sur le <quote>a</quote> de
	<quote>alice</quote> donnera <quote>Alice</quote>.
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-moving-line">
      <title>Editer une ligne</title>

      <para>
	Le plus haut niveau d'édition est la ligne elle-même.
	<xref linkend="chap-shell-moving-line-shortcuts-move" />
	liste les 2 raccourcis de déplacement.
      </para>

      <table xml:id="chap-shell-moving-line-shortcuts-move">
	<title>Déplacement dans les lignes</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Touches</entry>
	      <entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-a</entry>
	      <entry>
		Se déplace au début de la ligne courante.
	      </entry>
	    </row>
	    <row>
	      <entry>Ctrl-e</entry>
	      <entry>
		Se déplace à la fin de la ligne courante.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Supposez que le curseur est quelque part au milieu d'une ligne :
      </para>

      <screen>
find ~/music -name<emphasis role="cursor">&#32;</emphasis>'*.ogg' -print
      </screen>

      <para>
	Appuyer sur Ctrl-e une fois va déplacer le curseur à la fin de la
	ligne :
      </para>

      <screen>
find ~/music -name '*.ogg' -print<emphasis role="cursor">&#32;</emphasis>
      </screen>

      <para>
	Appuyer sur Ctrl-a déplacera le curseur au début de la ligne :
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music -name '*.ogg' -print
      </screen>

      <para>
	Vous pouvez aussi effacer des caractères au niveau de la ligne. Les
	raccourcis sont listés dans <xref
	linkend="chap-shell-moving-line-shortcuts-delete" />. Ces raccourcis
	fonctionnent comme les déplacements, sauf qu'ils effacent tout
	caractère rencontré. Ctrl-k effacera le caractère sous le curseur, mais
	Ctrl-x Backspace ne le fera pas. Se déplacer au début de la ligne avec
	Ctrl-a, suivi de Ctrl-k, est un truc rapide pour effacer une ligne
	entièrement.
      </para>

      <table xml:id="chap-shell-moving-line-shortcuts-delete">
	<title>Suppression de lignes</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Touches</entry>
	      <entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-k</entry>
	      <entry>
		Efface tous les caractères de la ligne, à partir de la position
		du curseur.
	      </entry>
	    </row>
	    <row>
	      <entry>Ctrl-x Backspace</entry>
	      <entry>
		Efface tous les caractères de la ligne jusqu'à la position
		courante du curseur.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-shell-history">
    <title>Historique des commandes</title>

    <para>
      Il arrive souvent que vous deviez exécuter des commandes que vous avez
      déjà exécuté plus tôt. Heureusement, vous n'avez pas à toutes les retaper
      de nouveau. Vous pouvez consulter l'historique des commandes exécutées
      avec les touches flèche haut et bas. En outre, il est également possible
      de chercher une commande. Pressez Control-r et commencez à taper la
      commande que vous souhaitez exécuter. Vous remarquerez que bash affiche
      la première occurrence possible. Si ce n'est pas l'occurrence que vous
      cherchez, vous pouvez continuer à taper la commande (jusqu'à ce que ce
      soit une occurrence unique), ou appuyez sur Control-r, une fois de plus
      pour obtenir la prochaine occurrence. Quand vous avez trouvé la commande
      que vous cherchez, vous pouvez l'exécuter en appuyant sur &lt;Enter&gt;.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-completion">
    <title>Complétion</title>

    <para>
      La complétion est une des fonctionnalités les plus utiles des shells de
      type UNIX. Supposez que vous avez un répertoire contenant 2 fichiers
      nommés <filename>websites</filename> et <filename>recipe</filename>. Et
      supposez que vous voulez effectuer <command>cat</command> sur le fichier
      <filename>websites</filename> (<command>cat</command> affiche le contenu
      d'un fichier), en spécifiant <filename>websites</filename> comme paramètre
      de cat. Normalement vous auriez tapé <quote>cat websites</quote>, et
      exécuté la commande. Essayez de taper <quote>cat w</quote>, et frappez la
      touche &lt;Tab&gt;. Bash va compléter automatiquement ce que vous avez
      tapé en <quote>cat websites</quote>.
    </para>

    <para>
      Mais que se passe-t-il si vous avez plusieurs fichiers qui commencent
      avec la même lettre ? Supposez que vous avez les fichiers
      <filename>recipe1.txt</filename> et <filename>recipe2.txt</filename>.
      Tapez <quote>cat r</quote> et tapez &lt;Tab&gt;, Bash va compléter le nom
      de fichier du mieux qu'il le peut. I devrait vous laisser avec
      <quote>cat recipe</quote>. Essayez de taper encore &lt;Tab&gt;, et Bash va
      vous afficher une liste de noms de fichiers qui commencent par
      <quote>recipe</quote>, dans ce cas les 2 fichiers recipe. A ce niveau vous
      devez aider Bash en tapant le caractère suivant du fichier désiré.
      Supposez que vous voulez faire <command>cat</command>
      <filename>recipe2.txt</filename>, vous pouvez presser la touche &lt;2&gt;.
      Après il n'y a plus de problème pour compléter le nom de fichier, et
      appuyer sur &lt;Tab&gt; complète la commande en
      <quote>cat recipe2.txt</quote>.
    </para>

    <para>
      Il est intéressant de noter que la complétion fonctionne également avec
      les commandes. La plupart des commandes GNU/Linux sont assez courtes, donc
      ce ne sera pas utile la plupart du temps.
    </para>

    <para>
      Il est judicieux de pratiquer un peu la complétion, cela peut faire
      économiser beaucoup de temps de frappe au clavier, si vous pouvez jouer
      correctement avec la complétion. Vous pouvez créer des fichiers vides pour
      vous entraîner en utilisant la commande <command>touch</command>. Par
      exemple, pour créer un fichier nommé <filename>recipe3.txt</filename>,
      lancez <command>touch recipe3.txt</command>.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-wildcards">
    <title>Les jokers</title>

    <para>
      La plupart des shells, y compris Bash et ksh, supportent les jokers (ou
      métacaractères, wildcards). Les jokers sont des caractères spéciaux qui
      peuvent être utilisés pour faire du filtrage. Le tableau figurant
      ci-dessous liste des jokers utilisés couramment. Nous allons regarder
      plusieurs exemples pour donner une idée générale de la façon dont les
      jokers fonctionnent.
    </para>

    <table xml:id="chap-shell-wildcards-thewildcards">
      <title>Jockers bash</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
	<thead>
	  <row>
	    <entry>Joker</entry> <entry>Filtre</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>*</entry>
	    <entry>Une chaîne de caractères</entry>
	  </row>
	  <row>
	    <entry>?</entry>
	    <entry>Un seul caractère</entry>
	  </row>
	  <row>
	    <entry>[]</entry>
	    <entry>Un caractère parmi un ensemble de caractères</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 xml:id="chap-shell-wildcards-string">
      <title>Filtrer une chaîne de caractères</title>

      <para>
	Comme vous pouvez le voir dans le tableau ci-dessus le caractère
	<quote>*</quote> filtre une chaîne de caractères. Par exemple,
	<emphasis>*.html</emphasis> filtre tout ce qui se termine par
	<emphasis>.html</emphasis>, <emphasis>d*.html</emphasis>
	filtre tout ce qui commence par <emphasis>d</emphasis> et se termine par
	<emphasis>.html</emphasis>.
      </para>

      <para>
	Supposez que vous vouliez la liste de tous les fichiers dans le
	répertoire courant avec l'extension <emphasis>.html</emphasis>, la
	commande suivante va faire le travail :
      </para>

      <screen>
$ <userinput>ls *.html</userinput>
book.html        installation.html     pkgmgmt.html  usermgmt.html
filesystem.html  internet.html         printer.html  xfree86.html
gfdl.html        introduction.html     proc.html
help.html        slackware-basics.html shell.html
      </screen>

      <para>
	De la même façon nous pouvons supprimer tous les fichiers commençant par
 	<emphasis>in</emphasis> :
      </para>

      <screen>
$ <userinput>rm in*</userinput>
      </screen>
    </sect2>

    <sect2 xml:id="chap-shell-wildcards-single">
      <title>Filtrer un seul caractère</title>

      <para>
	Le joker <quote>?</quote> fonctionne comme le joker <quote>*</quote>,
	mais filtre un seul caractère. Supposez que nous ayons 3 fichiers, 
	<filename>file1.txt</filename>, <filename>file2.txt</filename> et
	<filename>file3.txt</filename>. La chaîne <emphasis>file?.txt</emphasis>
	filtre tous ces 3 fichiers, mais ne filtre pas
	<filename>file10.txt</filename> (<quote>10</quote> sont 2 caractères).
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-wildcards-set">
      <title>Filtrer un caractère parmi un ensemble</title>

      <para>
	Le joker <quote>[]</quote> filtre tout caractère entre crochets.
	Supposez que nous ayons les fichiers de l'exemple précédent,
	<filename>file1.txt</filename>,
	<filename>file2.txt</filename> et
	<filename>file3.txt</filename>. La chaîne
	<emphasis>file[23].txt</emphasis> filtre
	<filename>file2.txt</filename> et
	<filename>file3.txt</filename>, mais pas
	<filename>file1.txt</filename>.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-shell-inout">
    <title>Redirections et tubes</title>

    <para>
      Parmi les fonctionnalités principales des shells de type UNIX-like il y a
      les redirections et les tubes (pipes en anglais). Avant de regarder ces 2
      techniques nous devons regarder command la plupart des commandes de type
      UNIX fonctionnent. Quand une commande ne prend pas de données dans un
      fichier, elle va ouvrir un pseudo-fichier spécial nommé
      <emphasis>stdin</emphasis>, et attendre que des données y arrivent. Le
      même principe s'applique pour la sortie de la commande, quand il n'y a
      pas de raison explicite de sauver la sortie dans un fichier, le
      pseudo-fichier <emphasis>stdout</emphasis> sera ouvert pour la sortie des
      données. Ce principe est décrit schématiquement dans <xref
      linkend="fig-shell-inout" />
    </para>

    <figure xml:id="fig-shell-inout">
      <title>Entrée et sortie standard</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="../../images/shell-inout.png" format="PNG"/>
	</imageobject>
      </mediaobject>
    </figure>

    <para>
      Vous pouvez voir <emphasis>stdin</emphasis> et
      <emphasis>stdout</emphasis> en action avec la commande 
      <command>cat</command>. Si cat est lancé sans paramètre elle va juste
      attendre une entrée dans <emphasis>stdin</emphasis> et sortir la même
      donnée dans <emphasis>stdout</emphasis>. Si aucune redirection n'est
      faite l'entrée clavier sera utilisée en tant que
      <emphasis>stdin</emphasis>, et la sortie <emphasis>stdout</emphasis> sera
      affichée dans le terminal :
    </para>

    <screen>
$ <userinput>cat</userinput>
<command>Hello world!</command>
Hello world!
    </screen>

    <para>
      Comme vous pouvez le voir cat va afficher les données dans
      <emphasis>stdout</emphasis> après avoir reçu des données en entrée de
      <emphasis>stdin</emphasis> en utilisant le clavier.
    </para>

    <sect2 xml:id="chap-shell-inout-redir">
      <title>Redirection</title>

      <para>
	Le shell vous permet d'utiliser <emphasis>stdin</emphasis> et
	<emphasis>stdout</emphasis> en utilisant <quote>&lt;</quote> et
	<quote>&gt;</quote>. Les données sont redirigées dans le sens vers
	lequel pointe le symbole. Dans l'exemple suivant nous allons rediriger
	les sommes calculées par md5 pour un ensemble de fichiers vers un
	fichier nommé <filename>md5sums</filename> :
      </para>

      <screen>
$ <userinput>md5sum * &gt; md5sums</userinput>
$ <userinput>cat md5sums</userinput> 
6be249ef5cacb10014740f61793734a8  test1
220d2cc4d5d5fed2aa52f0f48da38ebe  test2
631172a1cfca3c7cf9e8d0a16e6e8cfe  test3
      </screen>

      <para>
	Comme nous pouvons le voir par la sortie de <command>cat</command> la
	sortie de <command>md5sum *</command> a été redirigée vers le fichier
	<filename>md5sums</filename>. Nous pouvons aussi utiliser la redirection
	pour fournir une entrée à une commande :
      </para>

      <screen>
$ <userinput>md5sum &lt; test1</userinput>
6be249ef5cacb10014740f61793734a8  -
      </screen>

      <para>
	Cela alimente <command>md5sum</command> avec le contenu de
	<filename>test1</filename>
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-inout-pipes">
      <title>Tubes</title>

      <para>
	Vous pouvez aussi connecter les entrées et sorties des commandes en
	utilisant les dits <emphasis>tubes</emphasis>. Un tube entre commandes
	peut être fait avec le caractère <quote>|</quote>. La combinaison de 2
	ou plus de commandes est appelée un <emphasis>pipeline</emphasis>.
	<xref linkend="fig-shell-pipeline" /> montre une vue d'ensemble
	schématique d'un pipeline constitué de 2 commandes.
      </para>

      <figure xml:id="fig-shell-pipeline">
	<title>Un pipeline</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="../../images/shell-pipeline.png" format="PNG"/>
	  </imageobject>
	</mediaobject>
      </figure>

      <para>
	La <quote>syntaxe</quote> d'un pipeline est : <command>command1
	| command2 ... | commandn</command>. Si vous savez comment la plupart
	des commandes de type UNIX fonctionnent vous pouvez maintenant les
	faire travailler ensemble. Voyons un petit exemple :
      </para>

      <screen>
$ <userinput>cat /usr/share/dict/american-english | grep "aba" | wc -l</userinput>
123
      </screen>

      <para>
	La première commande, <command>cat</command>, lit le fichier
	dictionnaire <filename>/usr/share/dict/american-english</filename>. La
	sortie de la commande <command>cat</command> est redirigée vers
	<command>grep</command>, qui affiche tous les fichiers contenant la
	phrase <quote>aba</quote>.  A son tour, la sortie de <quote>grep</quote>
	est redirigée vers <command>wc -l</command>, qui compte le nombre de
	lignes qu'elle reçoit de <emphasis>stdin</emphasis>. Enfin, quand le
	flux est terminé <command>wc</command> affiche le nombre de ligne
	qu'elle a compté. Donc, la combinaison des 3 commandes compte le nombre
	de lignes contenant la phrase <quote>aba</quote> dans ce dictionnaire
	particulier.
      </para>

      <para>
	Il y a des centaines de petits utilitaires qui réalisent des tâches
	spécifiques. Comme vous pouvez l'imaginer, l'ensemble de ces commandes
	fournit une boîte à outils puissante par combinaisons, en utilisant les
	tubes.
      </para>
    </sect2>
  </sect1>
</chapter>
