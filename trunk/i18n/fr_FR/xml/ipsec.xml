<!-- $Id: ipsec.xml 315 2007-09-21 15:26:04Z danieldk $ -->

<chapter id="ipsec"> <?dbhtml filename="ipsec.html"?>
  <title>IPsec</title>

  <sect1>
    <title>Théorie</title>

    <para>
      <acronym>IPsec</acronym> est un standard de communications IP sécurisé
      par authentification, et par cryptage. Il peut d'ailleurs compresser les
      paquets, réduisant ainsi le trafic. Les protocoles suivants font partie du
      standard IPsec :
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <acronym>AH</acronym> (Authentication Header) fournit la garantie
	  d'autthenticité des paquets transportés. Cela se fait par le calcul
	  d'une somme de contrôle sur les paquets à l'aide d'un algorithme
	  cryptographique. Si la somme de contrôle est détectée correcte par le
	  receveur, le receveur peut être assuré que le paquet n'a pas été
	  modifié, et que le paquet provient bien de l'émetteur déclaré (pourvu
	  que les clés soient connues seulement de l'émetteur et du receveur).
        </para>
      </listitem>
      <listitem>
        <para>
          <acronym>ESP</acronym> (Encapsulating Security Payload) est utilisé
	  pour crypter les paquets. Cela rend les données confidentielles, et
	  lisibles uniquement par l'hôte ayant la bonne clé de décryptage.
        </para>
      </listitem>
      <listitem>
        <para>
          <acronym>IPcomp</acronym> (IP payload compression) fournit la
	  compression avant l'encryptage du paquet. Ceci est utile, car les
	  données déjà cryptées se compressent plus mal que les données non
	  cryptées.
        </para>
      </listitem>
      <listitem>
        <para>
          <acronym>IKE</acronym> (Internet Key Exchange) fournit le moyen de
	  négocier les clés en secret. Veuillez noter que IKE est optionel, les
	  clés peuvent être configurées manuellement.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Il y a en fait 2 modes de fonctionnement : le <emphasis>mode transport
      </emphasis> est utilisé pour crypter des connexions classiques entre 2
      hôtes, le <emphasis>mode tunnel</emphasis> encapsule le paquet d'origine
      dans une nouvelle en-tête. Dans ce chapitre nous allons voir le mode
      transport, car le but premier de ce chapitre est de montrer comment
      configurer une connexion sécurisée entre 2 hôtes.
    </para>

    <para>
      Il y a aussi 2 méthodes majeures d'authentification. Vous pouvez utiliser
      les clés manuelles, ou un démon Internet Key Exchange (IKE), comme racoon,
      qui échange automatiquement les clés de façon sécurisée entre 2 hôtes.
      Dans les 2 cas vous devez configurer une politique dans la Security Policy
      Database (SPD - NdT : base de données de politique de sécurité). Cette
      base de données est utilisée par le kernel pour decider le type de
      politique de sécurité doit être utilisée pour communiquer avec un autre
      hôte. Si vous utilisez un système de clés manuelles vous devez aussi
      configurer des entrées de la Security Association Database (SAD - NdT :
      base de données d'association de sécurité), qui spécifient quel algorithme
      de cryptage et quell clé doivent être utilisés pour les communications
      sécurisées avec un autre hôte. Si vous utilisez un démon IKE les
      associations de sécurité sont automatiquement établies.
    </para>
  </sect1>

  <sect1>
    <title>Configuration de Linux</title>

    <para>
      Le support natif d'IPsec n'est disponible que dans les noyaux Linux 2.6.x.
      Les noyaux précédents n'ont pas de support natif d'IPsec. Donc,
      assurez-vous d'avoir un noyau 2.6.x. Le noyau 2.6 kernel est disponible
      dans Slackware Linux 10.0, 10.1, et 10.2 dans le répertoire
      <filename>testing</filename> sur le CD 2 de la collection des CD Slackware
      Linux, ou sur tout site mirroir officiel Slackware Linux.
      Le noyau 2.6 est le noyau par défaut depuis Slackware Linux 12.0.
      Le noyau par défaut de Slackware Linux supporte AH, ESP et IPcomp à la
      fois pour IPv4 et IPv6. Si vous compilez un noyau personnalisé, activez
      au moins les options suivantes dans la configuration de votre noyau :
    </para>

    <screen>
CONFIG_INET_AH=y
CONFIG_INET_ESP=y
CONFIG_INET_IPCOMP=y
    </screen>

    <para>
      Ou vous pouvez compiler le support des protocoles IPsec en tant que
      modules :
    </para>

    <screen>
CONFIG_INET_AH=m
CONFIG_INET_ESP=m
CONFIG_INET_IPCOMP=m
    </screen>


    <para>
      Dans ce chapitre nous n'allons voir que l'utilisation des transformations
      AH et ESP, cependant ce n'est pas une mauvaise idée d'activer la
      transformation IPComp pour configuration ultérieure de IPsec. En plus du
      support des protocoles IPsec, vous devez compiler le support noyau des
      algorithmes de cryptage et de hachage utilisés par AH et ESP. Le support
      Linux ou module de ces algorithmes peut être activé en manipulant les
      diverses options <emphasis>CONFIG_CRYPTO</emphasis>. Ca ne fait pas de mal
      de compiler tous les algorithmes de chiffrage et de hachage en tant que
      modules.
    </para>

    <para>
      Lorsque vous choisissez de compiler le support IPsec en tant que module,
      assurez-vous que les modules requis sont chargés. Par exemple, si vous
      allez utiliser ESP pour les connexions IPv4, chargez le module
      <emphasis>esp4</emphasis>.
    </para>

    <para>
      Compiler le noyau comme d'habitude et démarrez-le.
    </para>
  </sect1>

  <sect1>
    <title>Installer IPsec-Tools</title>

    <para>
      L'étape suivante consiste à installer
      <ulink url="http://ipsec-tools.sourceforge.net">IPsec-Tools</ulink>.
      Ces outils sont le portage des utilitaires IPsec
      <ulink url="http://www.kame.net">KAME</ulink> .
      Téléchargez les dernières sources et décompressez, configurez et
      installez-les :
    </para>

    <screen>
# <command>tar jxf ipsec-tools-x.y.z.tar.bz2</command>
# <command>cd ipsec-tools-x.y.z</command>
# <command>CFLAGS="-O2 -march=i486 -mcpu=i686" \
  ./configure --prefix=/usr \
              --sysconfdir=/etc \
              --localstatedir=/var \
              --enable-hybrid \
              --enable-natt \
              --enable-dpd \
              --enable-frag \
              i486-slackware-linux</command>
# <command>make</command>
# <command>make install</command>
    </screen>

      <para>
        Remplacez <emphasis>x.y.z</emphasis> par la version des sources
	téléchargés. Les flags les plus importants que nous spécifions lors de
	la configuration des sources sont :
      </para>

      <itemizedlist>
        <listitem>
	  <para>
	    <emphasis>--enable-dpd</emphasis>: active le  dead peer detection
	    (DPD). DPD est une méthode pour détecter si un des hôtes pour
	    lesquels des associations de sécurité ont été configurées est
	    injoignable. Lorsque c'est le cas les associations de sécurité
	    vers cet hôte sont supprimées.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <emphasis>--enable-natt</emphasis>: active le NAT traverse
	    (NAT-T). Puisque NAT modifie les en-têtes IP, cela cause des
	    problèmes pour garantir l'authenticité d'un paquet. NAT-T est une
	    méthode permettant de surmonter ce problème. Configurer NAT-T est
	    au-delà du périmètre de cet article.
	  </para>
	</listitem>
      </itemizedlist>
  </sect1>

  <sect1>
    <title>Configurer IPsec avec des clés manuelles</title>

    <sect2>
      <title>Introduction</title>

      <para>
	Nous allons utiliser un exemple comme fil conducteur pour configurer une
	connexion cryptée entre 2 hôtes. Les hôtes ont pour adresses IP
        <emphasis>192.168.1.1</emphasis> et <emphasis>192.168.1.169</emphasis>.
        Le <quote>mode transport</quote> sera utilisé avec les transformations
        AH and ESP et des clés manuelles.
      </para>
      
    </sect2>

    <sect2>
      <title>Ecrire le fichier de configuration</title>

      <para>
	La première étape consiste à écrite le fichier de configuration que nous
	nommerons <filename>/etc/setkey.conf</filename>. Sur le premier hôte
        (192.168.1.1) la configuration suivante
	<filename>/etc/setkey.conf</filename> sera utilisée :
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

add 192.168.1.1 192.168.1.169 ah 0x200 -A hmac-md5 
0xa731649644c5dee92cbd9c2e7e188ee6;
add 192.168.1.169 192.168.1.1 ah 0x300 -A hmac-md5 
0x27f6d123d7077b361662fc6e451f65d8;

add 192.168.1.1 192.168.1.169 esp 0x201 -E 3des-cbc 
0x656c8523255ccc23a66c1917aa0cf30991fce83532a4b224;
add 192.168.1.169 192.168.1.1 esp 0x301 -E 3des-cbc
0xc966199f24d095f3990a320d749056401e82b26570320292

spdadd 192.168.1.1 192.168.1.169 any -P out ipsec
           esp/transport//require
           ah/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P in ipsec
           esp/transport//require
           ah/transport//require;
      </screen>

      <para>
	La première ligne (une ligne se termine par un <quote>;</quote>) ajoute
	une clé pour l'opétation de somme de contrôle de l'en-tête des paquets
	venant de 192.168.1.1 et allant vers 192.168.1.169. La deuxième ligne
	fait de même pour les paquets venant de 192.168.1.169 et allant vers
	192.168.1.1. Les troisième et quatrième lignes définissent les clés pour
	le cryptage des données de la même façon que les 2 premières lignes.
	Enfin les lignes <quote>spadd</quote> définissent 2 politiques, en
	l'occurrence les paquets sortant de 192.168.1.1 et allant vers
	192.168.1.169 doivent être (require) encodés (esp) et
	<quote>signés</quote> avec l'en-tête d'autorisation. La seconde
	politique s'applique aux paquets entrants et est identique à celle pour
	les paquets sortants.
      </para>

      <para>
	Soyez conscient que vous de devriez pas utiliser ces clés, mais plutôt
	vos propres clés uniques gardées secrètement. Vous pouvez générer des
	clés en utilisant le périphérique  <filename>/dev/random</filename> :
      </para>

      <screen>
# <command>dd if=/dev/random count=16 bs=1 | xxd -ps</command>
      </screen>

      <para>
	Cette commande utilise dd pour afficher 16 octets depuis
        <filename>/dev/random</filename>. N'oubliez pas d'ajouter
	<quote>0x</quote> au début de la ligne dans les fichiers de
	configuration. Vous pouvez utiliser les 16 octets (128 bits) pour
	l'algorithme hmac-md5 utilisé pour AH.
        L'algorithme 3des-cbc utilisé pour ESP dans l'exemple doit être alimenté
	par une clé 24 octets (192 bits). Ces clés peuvent être générées avec :
      </para>

      <screen>
# <command>dd if=/dev/random count=24 bs=1 | xxd -ps</command>
      </screen>  

      <para>
	Assurez-vous que le fichier <filename>/etc/setkey.conf</filename> ne
	peut être lu que par l'utilisateur root. Si les utilisateurs normaux
	peuvent lire ces clés, IPsec ne fournit aucune sécurité. Vous pouvez
	réaliser cela avec :
      </para>

      <screen>
# <command>chmod 600 /etc/setkey.conf</command>
      </screen>

      <para>
	La même chose pour <filename>/etc/setkey.conf</filename> peut être faite
	sur l'hôte 192.168.1.169, en inversant les options
	<parameter class="command">-P in</parameter> et
	<parameter class="command">-P out</parameter>. Donc, le fichier
        <filename>/etc/setkey.conf</filename> ressemblera à ceci :
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

add 192.168.1.1 192.168.1.169 ah 0x200 -A hmac-md5
0xa731649644c5dee92cbd9c2e7e188ee6;
add 192.168.1.169 192.168.1.1 ah 0x300 -A hmac-md5
0x27f6d123d7077b361662fc6e451f65d8;

add 192.168.1.1 192.168.1.169 esp 0x201 -E 3des-cbc
0x656c8523255ccc23a66c1917aa0cf30991fce83532a4b224;
add 192.168.1.169 192.168.1.1 esp 0x301 -E 3des-cbc
0xc966199f24d095f3990a320d749056401e82b26570320292

spdadd 192.168.1.1 192.168.1.169 any -P in ipsec
           esp/transport//require
           ah/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P out ipsec
           esp/transport//require
           ah/transport//require;
      </screen>
    </sect2>

    <sect2>
      <title>Activer la configuration IPsec</title>

      <para>
        La configuration IPsec peut être activée avec la commande
	<command>setkey</command> :
      </para>

      <screen>
# <command>setkey -f /etc/setkey.conf</command>
      </screen>

      <para>
	Si vous voulez activer IPsec de manière permanente vous pouvez ajouter
	la ligne suivante à <filename>/etc/rc.d/rc.local</filename> sur chacun
	des hôtes :
      </para>

      <screen>
/usr/sbin/setkey -f /etc/setkey.conf
      </screen>

      <para>
	Après avoir configuré IPsec vous pouvez tester la connexion en lançant
        <command>tcpdump</command> et en ping-ant en même temps l'autre hôte.
	Vous pouvez voir si AH et ESP sont réellement utilisés dans la sortie de
        <command>tcpdump</command> :
      </para>

      <screen>
# <command>tcpdump -i eth0</command>
tcpdump: listening on eth0
11:29:58.869988 terrapin.taickim.net > 192.168.1.169: AH(spi=0x00000200,seq=0x40f): ESP(spi=0x00000201,seq=0x40f) (DF)
11:29:58.870786 192.168.1.169 > terrapin.taickim.net: AH(spi=0x00000300,seq=0x33d7): ESP(spi=0x00000301,seq=0x33d7)
      </screen>
      
    </sect2>

  </sect1>
  
  <sect1>
    <title>Configurer IPsec avec échange automatique de clés</title>

    <sect2>
      <title>Introduction</title>
    
      <para>
	Le sujet de l'échange automatique de clés a déjà été abordé brièvement
	à l'introduction de ce chapitre. En termes simples, IPsec avec IKE
	fonctionne suivant les étapes suivantes.
      </para>
      
      <orderedlist>
        <listitem>
	  <para>
	    Certains processus sur l'hôte veulent se connecter à un autre hôte.
	    Le noyau vérifie s'il y a une politique de sécurité définie pour
	    cet autre hôte. S'il y a déjà une association de sécurité
	    correspondant à la politique la connexion peut s'effectuer, et sera
	    authentifiée, cryptée et/ou compressée comme défini dans
	    l'association de sécurité. S'il n'y a pas d'association de sécurité,
	    le noyau va demander à un démon IKE user-land de définir le(s)
	    association(s) de sécurité nécessaire(s).
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Lors de la première phase d'échange de clés le démon IKE va tenter
	    de vérifier l'authenticité de l'autre hôte. Cela s'effectue en
	    principe avec une clé pré-partagée ou un certificat. Si
	    l'authentification réussit un canal sécurisé est défini entre les 2
	    hôtes, appelé usuellement une association de sécurité IKE, afin de
	    continuer l'échange de clé.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Lors de la seconde phase d'échange de clés, les associations de
	    sécurité pour la communication avec l'autre hôte sont définies.
	    Cela comprend le choix de l'algorithmes de cryptage à utiliser, et
	    la génération des clés utilisées pour le cryptage de la
	    communication.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    A ce stade la première phase est répétée à nouveau, mais comme il y
	    a à présent des associations de sécurité la communication peut
	    continuer.
	  </para>
	</listitem>
      </orderedlist>
      
      <para>
        Le démon IKE <command>racoon</command> est inclus avec les mêmes outils
	IPsec KAME, les sections suivantes expliquent comment configurer racoon.
      </para>
    </sect2>
    
    <sect2>
      <title>Utiliser racoon avec une clé pré-partagée</title>
      
      <para>
	Comme d'habitude la première étape de configuration IPsec est de définir
	les politiques de sécurité. Contrairement à l'exemple à clés manuelles
	vous ne devez pas définir d'association de sécurité, car racoon va les
	fabriquer pour vous. Nous allons utiliser les mêmes IPs d'hôtes que dans
	l'exemple ci-dessus.
	Les règles de politique de sécurité ressemblent à ceci :
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

spdadd 192.168.1.1 192.168.1.169 any -P out ipsec
	esp/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P in ipsec
	esp/transport//require;
      </screen>

      <para>
	Les esprits prudents auront probablement remarqué que les politiques AH
	sont absents de cet exemple. Dans la plupart des cas ce n'est pas un
	problème, ESP peut fournir l'authentification. Cependant vous devez
	savoir que l'authentification est moins étendue ; elle ne protège pas
	les informations en-dehors des en-tête ESP. Par contre c'est plus
	efficace que d'encapsuler les paquets ESP dans AH.
      </para>

      <para>
        Avec les politiques de sécurité définies vous pouvez configurer
	<command>racoon</command>.
	Puisque les informations spécifiques à la connexion, comme la méthode
	d'authentification, ont été définies lors de phase un de la
	configuration, nous pouvons utiliser, de manière générale, la phase de
	configuration 2. Il est aussi possible de réaliser des réglages
	spécifiques de la phase 2 pour certains hôtes. Mais de manière générale
	une configuration globale suffira souvent dans des configurations
	simples. Nous pouvons aussi ajouter des chemins pour le fichier de clé
	pré-partagée, et ajouter le répertoire de certificat. Ceci est un
	exemple de <filename>/etc/racoon.conf</filename> avec les chemins et
	la politique générale de phase 2 configurés :
      </para>

      <screen>
path pre_shared_key "/etc/racoon/psk.txt";
path certificate "/etc/racoon/certs";

sainfo anonymous {
{
	pfs_group 2;
	lifetime time 1 hour;
	encryption_algorithm 3des, blowfish 448, rijndael;
	authentication_algorithm hmac_sha1, hmac_md5;
	compression_algorithm deflate;
}
      </screen>

      <para>
        L'identificateur <parameter>sainfo</parameter> est utilisé pour créer un
	bloc spécifiant les réglages pour les associations de sécurité. Au lieu
	de configurer ceci pour un hôte spécifique, le paramètre
	<parameter>anonymous</parameter> est utilisé pour spécifier que ces
	réglages doivent être utilisés pour tous les hôtes n'ayant pas de
	configuration spécifique. <parameter>pfs_group</parameter> spécifie
	quel groupe d'exponentiations Diffie-Hellman doivent être utilisés.
	Les différents groupes fournissent différentes longueurs de nombres
	premiers de base utilisés pour le processus authentification. Le groupe
	2 fournit une longueur de 1024 bits. Si vous voulez utiliser une
	longueur plus importante, pour une sécurité renforcée, vous pouvez
	utiliser un autre groupe (comme 14 pour une longueur de 2048 bits).
	<parameter>encryption_algorithm</parameter> spécifie quels algorithmes
	de cryptage cet hôte va utiliser pour le cryptage ESP.
	<parameter>authentication_algorithm</parameter> spécifie l'algorithme
	à utiliser pour authentification ESP ou AH. Enfin,
	<parameter>compression_algorithm</parameter> est utilisé pour spécifier
	quel algorithm de compression doit être utilisé lorsque IPcomp est
	spécifié dans une association.
      </para>

      <para>
	L'étape suivante est l'ajout d'une phase de configuration 1 pour
	l'échange de clé avec l'autre hôte dans le fichier de configuration
	<filename>racoon.conf</filename>.
        Par exemple :
      </para>

      <screen>
remote 192.168.1.169 
{
	exchange_mode aggressive, main;
	my_identifier address;
	proposal {
		encryption_algorithm 3des;
		hash_algorithm sha1;
		authentication_method pre_shared_key;
		dh_group 2;
	}
}
      </screen>

      <para>
        Le bloc <parameter>remote</parameter> spécifie une phase de
	configuration 1. <parameter>exchange_mode</parameter> est utilisé pour
	configurer quel mode d'échange doit être utilisé dans cette phase.
	Vous pouvez spécifier plus d'un mode d'échange, cependant la première
	méthode est utilisée si cet hôte est l'initiateur de l'échange de clé.
	L'option <parameter>my_identifier</parameter> spécifie quel
	identificateur doit être envoyé à l'hôte distant. Si cette option est
	omise, <parameter>address</parameter> est utilisé, ce qui envoie
	l'adresse IP en tant qu'identificateur. Le bloc
        <parameter>proposal</parameter> spécifie les paramètres qui seront
	proposés à l'autre hôte lors de la phase 1 d'authentification.
        <parameter>encryption_algorithm</parameter>, et
        <parameter>dh_group</parameter> sont décrit ci-dessus. L'option
        <parameter>hash_algorithm</parameter> est obligatoire, et configure
	l'algorithme de hachage à utiliser. Cela peut être
	<parameter>md5</parameter>, ou <parameter>sha1</parameter>.
        <parameter>authentication_method</parameter> est crucial pour cette
        configuration, vu que ce paramètre est utilisé pour spécifier qu'une
	clé pré-partagée doit être utilisée, avec
	<parameter>pre_shared_key</parameter>.
      </para>

      <para>
	Avec racoon configuré, il y a une chose qui reste à faire : la clé
	pré-partagée doit être ajoutée à
	<filename>/etc/racoon/psk.txt</filename>.
	La syntaxe est très simple, chaque ligne contient une adresse IP d'hôte
	et une clé. Ces paramètres sont séparés par une tabulation.
	Par exemple :
      </para>

      <screen>
192.168.1.169	somekey
      </screen>
    </sect2>

    <sect2>
      <title>Activer la configuration IPsec</title>

      <para>
	A ce stade la configuration des politiques de sécurité et de racoon sont
	terminées, et vous pouvez commencer à tester la configuration. Il est
	conseillé de démarrer <command>racoon</command> avec le paramètre
        <parameter class="command">-F</parameter>. Cela lancera
        <command>racoon</command> au premier plan d'exécution, facilitant la
	récupération des messages d'erreur. Pour résumer :
      </para>

      <screen>
# <command>setkey -f /etc/setkey.conf</command>
# <command>racoon -F</command>
      </screen>

      <para>
	Maintenant que vous avez ajouté des politiques de sécurité à la base de
	données de politique de sécurité, et démarré <command>racoon</command>,
	vous pouvez tester votre configuration IPsec. Par exemple, vous pouvez
	commencer par ping-er l'autre d'hôte. La première fois que vous ping-ez
	l'autre hôte, cela va échouer :
      </para>

      <screen>
$ <command>ping 192.168.1.169</command>
connect: Resource temporarily unavailable
      </screen>

      <para>
	La raison est que les associations de sécurité restent à configurer.
	Mais le paquet ICMP va provoquer l'échange de clé.
        ping va provoquer l'échange de clé. Vous pouvez voir si l'échange a
	réussi ou non en regardant les messages de log de
	<command>racoon</command> dans <filename>/var/log/messages</filename>,
	ou la sortie dans le terminal si vous avez lancé
	<command>racoon</command> au premier plan d'exécution. Un échange de clé
	réussi ressemble à ceci :
      </para>

      <screen>
 Apr  4 17:14:58 terrapin racoon: INFO: IPsec-SA request for 192.168.1.169 queued due to no phase1 found.
 Apr  4 17:14:58 terrapin racoon: INFO: initiate new phase 1 negotiation: 192.168.1.1[500]&lt;=&gt;192.168.1.169[500] 
 Apr  4 17:14:58 terrapin racoon: INFO: begin Aggressive mode. 
 Apr  4 17:14:58 terrapin racoon: INFO: received Vendor ID: DPD 
 Apr  4 17:14:58 terrapin racoon: NOTIFY: couldn't find the proper pskey, try to get one by the peer's address.
 Apr  4 17:14:58 terrapin racoon: INFO: ISAKMP-SA established 192.168.1.1[500]-192.168.1.169[500] spi:58c4669f762abf10:60593eb9e3dd7406
 Apr  4 17:14:59 terrapin racoon: INFO: initiate new phase 2 negotiation: 192.168.1.1[0]&lt;=&gt;192.168.1.169[0] 
 Apr  4 17:14:59 terrapin racoon: INFO: IPsec-SA established: ESP/Transport 192.168.1.169-&gt;host1ip; spi=232781799(0xddff7e7) 
 Apr  4 17:14:59 terrapin racoon: INFO: IPsec-SA established: ESP/Transport 192.168.1.1-&gt;192.168.1.169 spi=93933800(0x59950e8) 
      </screen>

      <para>
	Après l'échange de clé, vous pouvez vérifier que IPsec est correctement
	configuré en analysant les paquets entrants et sortants avec
	<command>tcpdump</command>. <command>tcpdump</command> est disponible
	dans la collection <emphasis>n</emphasis>. Supposez que la connexion
	sortante vers l'autre hôte passe à travers l'interface
	<emphasis>eth0</emphasis>, vous pouvez analyser les paquets passant à
	travers l'interface <emphasis>eth0</emphasis> avec
        <command>tcpdump -i eth0</command>. Si les paquets sortants sont cryptés
	avec ESP, vous pouvez le voir avec la sortie de
	<command>tcpdump</command>. Par exemple :
      </para>

      <screen>
# <command>tcpdump -i eth0</command>
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
17:27:50.241067 IP terrapin.taickim.net &gt; 192.168.1.169: ESP(spi=0x059950e8,seq=0x9)
17:27:50.241221 IP 192.168.1.169 &gt; terrapin.taickim.net: ESP(spi=0x0ddff7e7,seq=0x9)
      </screen>

    </sect2>
    
  </sect1>

</chapter>
