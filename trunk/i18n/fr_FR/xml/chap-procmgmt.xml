<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xmlns:xl="http://www.w3.org/1999/xlink" xml:lang="fr"
	 xml:id="chap-procmgmt">

  <title>Gestion de processus</title>

  <sect1 xml:id="chap-procmgmt-theory">
    <title>Théorie</title>

    <sect2 xml:id="chap-procmgmt-theory-proc">
      <title>Processus</title>

      <para>
	Une instance d'un programme en cours d'exécution est appelée un
	<emphasis>processus</emphasis>. Chaque processus a son propre espace
	mémoire protégé, nommé l'<emphasis>espace d'adressage du processus
	</emphasis>. Cet espace d'adressage se compose de 2 zones :
	la <emphasis>zone texte</emphasis> et la <emphasis>zone données
	</emphasis>. La zone texte contient le code réel du programme, et dit au
	système quoi faire. La zone données stocke les données constantes et les
	données d'exécution d'un processus. Puisqu'il y a beaucoup de processus
	dans un système, et 1 ou quelques processeurs, le noyau du système
	d'exploitation divise le temps processeur entre les processus. Cette
	opération est appelée <emphasis>partage de temps</emphasis>.
      </para>

      <table xml:id="chap-procmgmt-theory-proc-struct">
	<title>La structure d'un processus</title>

	<tgroup cols="2">
	  <thead>
	    <row><entry>Champ</entry><entry>Description</entry></row>
	  </thead>

	  <tbody>
	    <row>
	      <entry>pid</entry><entry>L'identifiant numérique d'un processus
	      </entry>
	    </row>
	    <row>
	      <entry>ppid</entry><entry>L'identifiant numérique du père d'un
		processus</entry>
	    </row>
	    <row>
	      <entry>euid</entry><entry>L'ID utilisateur effectif du processus.
	      </entry>
	    </row>
	    <row>
	      <entry>ruid</entry><entry>L'ID utilisateur réel du processus
	      </entry>
	    </row>
	    <row>
	      <entry>egid</entry><entry>L'ID du groupe du processus</entry>
	    </row>
	    <row>
	      <entry>rgid</entry><entry>L'ID réel du groupe du processus</entry>
	    </row>
	    <row>
	      <entry>fd</entry><entry>Pointeur sur une liste de descripteurs de
		fichiers ouverts</entry>
	    </row>
	    <row>
	      <entry>vmspace</entry><entry>Pointeur vers l'espace d'adressage
		du processus.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	<xref linkend="chap-procmgmt-theory-proc-struct" /> liste les champs
	les plus importants que le kernel stocke sur un processus. Chaque
	processus peut être identifié de manière unique par son
	<emphasis>PID</emphasis> (NdT: Process IDentifier), qui est un nombre
	non signé. Comme nous le verrons plus tard, un utilisateur peut aisément
	récupérer le PID d'un processus. A chaque processus sur le système est
	associé un <emphasis>UID</emphasis> (NdT: User ID) et un
	<emphasis>GID</emphasis> (NdT: Group ID). Chaque processus a un
	<emphasis>UID réel</emphasis>, qui est le UID avec lequel le processus a
	été démarré, et le <emphasis>UID effectif</emphasis>, qui est l'UID sous
	lequel le processus travaille. Normalement, le UID effectif est égal au
	UID réel, mais certains programmes demandent au système à changer cet UID
	effectif. L'UID effectif est utilisé pour les contrôles d'accès. Cela
	signifie que si un utilisateur nommé joe lance une commande, disons
	less, less ne peut ouvrir que des fichiers sur lesquels joe a les
	droits de lecture. De même, un processus a un <emphasis>GID réel
	</emphasis> et un <emphasis>GID effectif</emphasis>.
      </para>

      <para>
	Beaucoup de processus ouvrent des fichiers, le handle utilisé pour
	travailler sur un fichier est appelé un
	<emphasis>descripteur de fichier</emphasis>. Le noyau gère une liste
	des descripteurs de fichiers ouverts pour chaque processus. Le champ
	<emphasis>fd</emphasis> contient un pointeur sur la liste des fichiers
	ouverts. Le champ <emphasis>vmspace</emphasis> pointe sur l'espace
	d'adressage du processus.
      </para>

      <!-- XXX - make more sophisticated (swap)? -->
      <figure xml:id="chap-procmgmt-theory-proc-procstates">
	<title>Etats d'un processus</title>

	<mediaobject>
	  <imageobject>
	    <imagedata format="PNG" fileref="../../images/procstates.png"/>
	  </imageobject>
	  <imageobject>
	    <imagedata format="SVG" fileref="../../images/procstates.svg"/>
	  </imageobject>
	</mediaobject>
      </figure>

      <para>
	Tous les processus n'ont pas besoin de temps CPU à un instant donné.
	Par exemple, certains processus peuvent être en attente d'une opération
	<emphasis>E/S</emphasis> (Entrée/Sortie) pour continuer ou peuvent être
	terminés. Sans entrer dans les détails, les processus sont normalement
	<emphasis>démarré</emphasis>, <emphasis>actif</emphasis>,
	<emphasis>prêt</emphasis> (à être actif), <emphasis>bloqué</emphasis>
	(en attente d'E/S), ou <emphasis>terminé</emphasis>. <xref
	linkend="chap-procmgmt-theory-proc-procstates" /> montre le cycle de vie
	d'un processus. Un processus terminé, mais pour lequel l'entrée dans
	la table des processus n'est pas récupérée, est souvent appelé un
	<emphasis>processus zombie</emphasis>. Les processus zombie sont utiles
	pour permetre au processus père de lire le status de fin du processus,
	ou pour réserver temporairement l'entrée dans la table des processus.
      </para>
    </sect2>

    <sect2 xml:id="chap-procmgmt-theory-proc-new">
      <title>Créer de nouveaux processus</title>

      <para>
	De nouveaux processus sont créés avec l'appel système
	<emphasis>fork()</emphasis>. Cet appel système copie l'espace
	d'adressage et les informations du processus appelant, et donne au
	nouveau processus, nommé le processus fils, un PID différent. Le
	processus fils continuera son exécution au même point que dans le
	parent,	mais obtiendra une valeur de retour différente de l'appel
	système	<emphasis>fork()</emphasis>. En se basant sur cette valeur de
	retour les processus père et fils peuvent décider comment continuer
	l'exécution. Le morceau de code C suivant montre une mise en oeuvre de
	<emphasis>fork()</emphasis> :
      </para>

      <programlisting>
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  pid_t pid = fork();
  if (pid == 0)
    printf("Salut, je suis le fils !\n");
  else
    printf("Salut, je suis le parent, le PID fils est %d !\n", pid);

  return 0;
}
      </programlisting>

      <para>
	Le petit programme appelle <emphasis>fork()</emphasis>, en enregistrant
	le code retour de <emphasis>fork()</emphasis> dans la variable
	<emphasis>pid</emphasis>. <emphasis>fork()</emphasis> retourne
	la valeur <emphasis>0</emphasis> au processus fils, et le PID du fils
	au processus père. Connaissant cela, nous pouvons utiliser une structure
	conditionnelle simple pour vérifier la valeur de la variable
	<emphasis>pid</emphasis>, et afficher un message approprié.
      </para>

      <para>
	Peut-être vous vous demandez comment il est possible de démarrer de
	nouveaux programmes, puisque l'appel <emphasis>fork()</emphasis>
	duplique un processus existant. C'est une bonne question, puisqu'avec
	<emphasis>fork()</emphasis> uniquement, il n'est pas possible d'exécuter
	de nouveaux programmes. Les noyaux UNIX fournissent aussi un lot
	d'appels système, en commençant par <emphasis>exec</emphasis>, qui
	charge une nouvelle image d'un programme dans le processus courant. Nous
	avons vu au début de ce chapitre qu'un processus est un programme en
	cours d'exécution -- un processus a été construit en mémoire à partir de
	l'image du programme enregistré sur un média de stockage. Donc, la
	famille d'appels système <emphasis>exec</emphasis> permet à un processus
	en cours d'exécution de remplacer son contenu par un programme stocké
	sur un média. En tant que tel, ce n'est pas très utile, car chaque fois
	qu'un appel exec est effectué, le code (ou programme) appelant d'origine
	est supprimé du processus. Le programme C suivant démontre ceci :
      </para>

      <programlisting>
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  execve("/bin/ls", NULL, NULL);

  /* Ne sera jamais affiche, a moins que execve() echoue. */
  printf("Hello world!\n");

  return 0;
}
      </programlisting>

      <para>
	Ce programme exécute <command>ls</command> avec l'appel
	<emphasis>execve()</emphasis>. Le message affiché par
	<emphasis>printf()</emphasis> ne sera jamais affiché, car l'image du
	programme en cours d'exécution est remplacée par celle de
	<command>ls</command>. Cependant, une combinaison des fonctions
	<emphasis>fork()</emphasis> et <emphasis>exec</emphasis> devient très
	puissante. Un processus peut se dupliquer, et laisser le fils se
	<quote>sacrifier</quote> pour exécuter un autre programme. Le programme
	suivant met en oeuvre cette combinaison :
      </para>

      <programlisting>
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  pid_t pid = fork();
  if (pid == 0)
    execve("/bin/ls", NULL, NULL);

  printf("Hello world!");

  return 0;
}
      </programlisting>

      <para>
	Ce programme se duplique d'abord. L'image du programme du processus fils
	sera remplacée par celle de <command>ls</command>, alors que le processus
	père affiche le message <quote>Hello world!</quote> sur l'écran et
	retourne.
      </para>

      <para>
	Cette procédure est suivie par beaucoup de programmes, y compris le
	shell, quand une commande est exécutée depuis le prompt shell. En fait
	tous les processus sur un système UNIX sont directement ou indirectement
	dérivés du processus <emphasis>init</emphasis>, qui est le premier
	programme à être démaré sur un système UNIX.
      </para>

      <!-- XXX - Describe what is inherited when exec is called. -->
    </sect2>

    <sect2 xml:id="chap-procmgmt-theory-proc-threads">
      <title>Threads</title>

      <para>
	Bien que les forks soient très utiles pour effectuer du parallélisme
	<footnote><para>Par exemple, un seveur web pourrait dupliquer plusieurs
	processus fils pour traiter les requêtes</para></footnote>, ils peuvent
	être coûteux sur plusieurs plans. Copier un processus entier prend du
	temps, et il y a aussi un coût supplémentaire si les processus doivent
	partager des données. Ceci est résolu par une alternative plus légère,
	autorisant plus d'un fil ou thread d'exécution. Chaque thread
	d'exécution est exécuté séparément, mais les données du processus sont
	partagées entre threads.
      </para>

      <para>
	Ecrire de bons programmes <emphasis>multithreadés</emphasis> demande une
	bonne connaissance du partage et de la protection des données. Puisque
	toutes les données sont partagées, programmer sans précaution peut
	amener à créer des bugs comme les concurrences d'accès.
      </para>
    </sect2>

    <!-- XXX - Add a section about capabilities. -->
  </sect1>

  <sect1 xml:id="chap-procmanagement-analyzing">
    <title>Analyser les processus en cours d'exécution</title>

    <sect2 xml:id="chap-procmanagement-analyzing-listing">
      <title>Lister les processus en cours d'exécution</title>

      <para>
	Les systèmes UNIX fournissent la commande <command>ps</command> pour
	afficher une liste des processus en cours d'exécution. Malheureusement,
	cette commande est un exemple type des misères causées par le manque de
	standardisation. Les versions BSD et System V de <command>ps</command>
	ont leurs propres lots d'options. Malheureusement, GNU/Linux implémente
	à la fois des paramètres dans le style de System V et de BSD, ainsi que
	quelques options longues (dans le style GNU). Les options précédées par
	un tiret sont interprétées comme des options System V et les options
	sans tiret sont interprétées comme des options BSD.
	Nous allons décrire dans cette section les options à la System V.
      </para>

      <para>
	Si <command>ps</command> est utilisée sans paramètre, elle affiche tous
	les processus appartenant à l'utilisateur invoquant
	<command>ps</command>, et qui sont attachés au même terminal de
	contrôle. Par exemple :
      </para>

      <screen>
$ <userinput>ps</userinput>
  PID TTY          TIME CMD
 8844 pts/5    00:00:00 bash
 8862 pts/5    00:00:00 ps
      </screen>

      <para>
	Beaucoup d'informations utiles peuvent être extraites de cette sortie.
	Comme vous pouvez le voir, 2 processus sont affichés : le shell que nous
	avons utilisé pour appeler <command>ps</command>
	(<emphasis>bash</emphasis>), et la commande <command>ps</command>
	elle-même. Ici il y a 4 champs d'information. <emphasis>PID</emphasis>
	est l'ID du processus, <emphasis>TTY</emphasis> est le terminal de
	contrôle, <emphasis>TIME</emphasis> est la quantité de temps CPU que le
	processus a utilisé, et <command>CMD</command> la commande ou le
	programme dont la copie est en cours d'exécution. Ces champs affichés
	par défaut peuvent varier sensiblement en fonction du système, mais en
	principe au moins ces champs sont affichés, avec parfois des noms de
	champs différents.
      </para>

      <para>
	Parfois vous voulez avoir une vue plus large des processus en cours
	d'exécution. Ajouter l'option <parameter class="command">-a</parameter>
	affiche tous les processus associés aux terminaux. Par exemple :
      </para>

      <screen>
$ <userinput>ps -a</userinput>
  PID TTY          TIME CMD
 7487 pts/1    00:00:00 less
 8556 pts/4    00:00:10 emacs-x
11324 pts/3    00:00:00 ps
      </screen>

      <para>
	Comme vous pouvez le voir, les processus avec différents terminaux de
	contrôle sont affichés. Cependant, contrairement à la sortie par défaut
	de <command>ps</command>, seuls les processus que controlent le terminal
	à cet instant sont affichés. Par exemple, le shell utilisé pour appeler
	<command>ps</command> n'est pas affiché.
      </para>

      <para>
	Vous pouvez aussi afficher tous les processus en cours d'exécution, y
	compris les processus non associés à un terminal, en utilisant l'option
	<parameter class="command">-A</parameter> :
      </para>

      <screen>
$ <userinput>ps -A | head -n 10</userinput>
  PID TTY          TIME CMD
    1 ?        00:00:01 init
    2 ?        00:00:00 migration/0
    3 ?        00:00:00 ksoftirqd/0
    4 ?        00:00:00 watchdog/0
    5 ?        00:00:00 migration/1
    6 ?        00:00:00 ksoftirqd/1
    7 ?        00:00:00 watchdog/1
    8 ?        00:00:00 events/0
    9 ?        00:00:00 events/1
      </screen>

      <para>
	Vous pouvez afficher tous les processus avec un certain User ID, avec
	l'option <emphasis>-U</emphasis>. Cette option accepte un nom
	d'utilisateur en tant que paramètre, ou plusieurs noms d'utilisateur
	séparés par une virgule. La commande suivante affiche tous les processus
	qui ont pour User ID <emphasis>xfs</emphasis> ou
	<emphasis>rpc</emphasis> :
      </para>

      <screen>
$ <userinput>ps -U xfs,rpc</userinput>
  PID TTY          TIME CMD
 2409 ?        00:00:00 portmap
 2784 ?        00:00:00 xfs
      </screen>

      <para>
	De la même manière, vous pouvez aussi afficher les processus d'un Group
	ID avec l'option <emphasis>-G</emphasis> :
      </para>

      <screen>
$ <userinput>ps -G messagebus,haldaemon</userinput>
  PID TTY          TIME CMD
 8233 ?        00:00:00 dbus-daemon
11312 ?        00:00:00 hald
11320 ?        00:00:00 hald-addon-keyb
11323 ?        00:00:00 hald-addon-acpi
      </screen>

      <para>
	Si vous désirez avoir la liste des terminaux physiques ou
	pseudo-terminaux, vous pouvez utiliser l'option <parameter
	class="command">-t</parameter> :
      </para>

      <screen>
$ <userinput>ps -t tty2</userinput>
  PID TTY          TIME CMD
 2655 tty2     00:00:00 getty
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-procmanagement-managing">
    <title>Gérer les processus</title>

    <sect2 xml:id="chap-procmanagement-managing-signals">
      <title>Envoyer des signaux à un processus</title>

      <para>
	Les signaux sont un moyen brut, mais efficace de communication
	inter-processus (IPC - NdT: Inter-Process Communication). Un signal est
	à la base un nombre envoyé à un processus qui a une signification
	spéciale. Pour tous les signaux il y a des routines de gestion de
	signaux par défaut. Les processus peuvent installer leurs propres
	routines de gestion de signaux, ou peuvent choisir d'ignorer les signaux
	reçus. Quelques signaux (en principe SIGKILL et SIGSTOP) ne peuvent pas
	être ignorés. Tous les signaux ont des noms symboliques commodes.
      </para>

      <para>
	En principe seuls quelques signaux sont intéressants pour leur utilisation interactive sur les systèmes UNIX (et ressemblants). Ce sont (suivis de leur numéro) :
      </para>

      <itemizedlist>
	<listitem>
	  <para><emphasis>SIGKILL (9):</emphasis> tue un processus par la force.
	  </para>
	</listitem>
	<listitem>
	  <para><emphasis>SIGTERM (15):</emphasis> demande à un processus de se
	    terminer. Puisque c'est une requête, le programme peut l'ignorer,
	    contrairement à <emphasis>SIGKILL</emphasis>.</para>
	</listitem>
	<listitem>
	  <para><emphasis>SIGHUP (1):</emphasis> Traditionellement, cela signale
	    une déconnexion avec le terminal. Mais de nos jours, des démons
	    (e.g. <emphasis>inetd</emphasis>) relisent leur configuration
	    lorsque ce signal leur est envoyé.</para>
	</listitem>
      </itemizedlist>

      <para>
	La commande <command>kill</command> est utilisée pour envoyer un signal
	à un processus. Par défaut, <command>kill</command> envoie le signal
	<emphasis>SIGTERM</emphasis>. Pour envoyer ce signal, l'ID processus
	auquel vous voulez envoyer ce signal doit être précisé en tant que
	paramètre. Par exemple :
      </para>

      <screen>
$ <userinput>kill 15631</userinput>
      </screen>

      <para>
	Pour envoyer un autre signal, vous pouvez utiliser une de ces deux options :
	<emphasis>-numérosignal</emphasis> ou
	<emphasis>-nomsignal</emphasis>. Donc, les commandes suivantes envoient
	toutes les 2 le signal <emphasis>SIGKILL</emphasis> au processus dont
	l'ID processus est <emphasis>15631</emphasis>:
      </para>

      <screen>
$ <userinput>kill -9 15631</userinput>
      </screen>

      <screen>
$ <userinput>kill -SIGKILL 15631</userinput>
      </screen>

      <!-- XXX - Add note about what users can send signals. -->
    </sect2>

    <sect2 xml:id="chap-procmanagement-managing-nice">
      <title>Etre sympa avec les autres</title>

      <para>
	Dans un acte d'altruisme, vous pouvez être gentil (NdT: nice) vis-à-vis
	des autres utilisateurs des ressources de l'ordinateur. Si vous projetez
	d'exécuter un processus demandant beaucoup de temps CPU, cependant sans
	vouloir interférer avec le travail des autres utilisateurs sur le
	système (ou avec les autres processus), vous pouvez affecter un degré
	de 'gentillesse' à un processus. En Pratique, cela signifie que vous
	allez pouvoir influer sur la priorité d'ordonnancement d'un processus.
	Les processus les plus gentils auront une priorité d'ordonnancement plus
	faible. La gentillesse normale d'un processus est fixée à
	<emphasis>0</emphasis>, et peut être changée en exécutant la commande
	<command>nice</command>. L'option <emphasis>-n [niceness]</emphasis>
	peut être utilisée pour spécifier le degré de gentillesse :
      </para>

      <screen>
$ <userinput>nice -n 20 mangeurdetempscpu</userinput>
      </screen>

      <para>
	Le nombre maximum de gentillesse est dépendant de l'implémentation. Si
	un programme a été démarré avec <command>nice</command>, mais qu'aucun
	niveau de gentillesse n'a été spécifié, la gentillesse sera fixée à
	<emphasis>10</emphasis>. Au cas où vous vous le demanderiez : oui, vous
	pouvez faire le méchant, cependant ce droit est restreint à
	l'utilisateur <emphasis>root</emphasis>. Vous pouvez booster la priorité
	d'un processus en spécifiant une valeur négative de gentillesse.
      </para>

      <para>
	Vous pouvez aussi modifier la gentillesse d'un programme en cours
	d'exécution avec la commande <command>renice</command>. Cela peut se
	faire pour des ID processus (<parameter class="command">-p
	PIDs</parameter>), des utilisateurs (<parameter class="command">-u
	user/uid</parameter>), et des  groupes effectifs (<parameter
	class="command">-g group/gid</parameter>). La nouvelle gentillesse est
	spécifiée en premier paramètre.
      </para>

      <para>
	La gentillesse d'un processus ne peut être qu'augmentée. Et bien sûr,
	aucun utilisateur autre que <emphasis>root</emphasis> peut modifier la
	gentillesse des processus des autres utilisateurs.
      </para>

      <para>
	Regardons un exemple, pour fixer la gentillesse d'un processus de
	PID <emphasis>3108</emphasis> à <emphasis>14</emphasis>, vous pouvez
	utiliser la commande suivante :
      </para>

      <screen>
$ <command>renice 14 -p 3108</command>
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-procmanagement-jobcontrol">
    <title>Contrôler un travail</title>

    <para>
      Il est souvent utile de grouper des processus pour permettre des
      opérations sur un lot de processus, par exemple pour distribuer un signal
      à tous les processus dans un groupe plutôt qu'à chaque processus. Ce n'est
      pas une surprise, ces lots de processus sont appelés en UNIX des 
      <emphasis>groupes de programmes</emphasis>. Après un fork, un processus
      fils est automatiquement un membre du groupe de processus de son père.
      Néanmoins, de nouveaux groupes de processus peuvent être créés en désignant
      un processus en tant que chef d'un groupe de processus, et en ajoutant les
      autres processus à ce groupe. L'ID du groupe de processus est le PID du
      processus chef de groupe.
    </para>

    <para>
      Pratiquement tous les shells UNIX modernes attribuent leur propre groupe
      de processus aux processus créés à travers un appel de commande. Tous les
      processus dans un pipeline sont ajoutés à un groupe de processus en
      principe. Si les commandes suivantes créant un pipeline sont exécutées
    </para>

    <screen>
cat | tr -s ' ' | egrep 'foob.r'
    </screen>

    <para>
      le shell effectue grossièrement les étapes suivantes :
    </para>

    <orderedlist>
      <listitem>
	<para>
	  3 processus fils sont forkés.
	</para>
      </listitem>
      <listitem>
	<para>
	  Le premier processus du pipeline est ajouté dans le groupe de
	  processus avec son propre PID en tant qu'ID de groupe de processus,
	  faisant de lui le chef des processus. Les autres processus du pipeline
	  sont ajoutés au groupe de processus.
	</para>
      </listitem>
      <listitem>
	<para>
	  Les descripteurs de fichier des processus dans le pipeline sont
	  reconfigurés, pour former un pipeline.
	</para>
      </listitem>
      <listitem>
	<para>
	  Les programmes dans le pipeline sont exécutés.
	</para>
      </listitem>
    </orderedlist>

    <para>
      Le shell utilise les groupes de processus pour implémenter le
      <emphasis>contrôle de travaux</emphasis>. Un shell peut lancer plusieurs
      travaux en tâche de fond, il peut y avoir plusieurs travaux stoppés, et un
      travail peut être premier plan d'exécution. Un travail en premier plan est
      câblé au terminal pour sa sortie standard (cela signifie que c'est ce
      travail qui récupère les entrées utilisateur).
    </para>

    <sect2 xml:id="chap-procmgmt-jobcontrol-stopping">
      <title>Stopper et reprendre un travail</title>
      
      <para>
	Un travail en premier plan d'exécution (donc un travail qui accepte
	potentiellement des entrées utilisateur depuis le terminal) peut être
	stoppé en pressant <emphasis>Ctrl-z</emphasis> (presser à la fois les
	touches 'Ctrl' et 'z' simultanément). Cela stoppe le travail, et va
	redonner le contrôle sur le terminal au shell. Tentons avec la commande
	<command>sleep</command>, qui attend le nombre de secondes fourni en
	argument :
      </para>

      <screen>
$ <userinput>sleep 3600</userinput>
<userinput>Ctrl-z</userinput>
[1]+  Stopped                 sleep 3600
      </screen>

      <para>
	C'est le groupe de processus, que nous référencerons en tant que
	travail	stoppé à présent, signifiant que <command>sleep</command> a
	arrêté de décompter - son exécution est complètement stoppée. Vous
	pouvez récupérer une liste des travaux avec la commande
	<command>jobs</command> :
      </para>

      <screen>
$ <userinput>jobs</userinput>
[1]+  Stopped                 sleep 3600
      </screen>

      <para>
	Cela affiche le numéro de travail (<emphasis>1</emphasis>), son état, et
	la commande utilisée pour démarrer ce travail. Lançons un autre
	programme, stoppons-le aussi, et voyons à nouveau la liste des travaux.
      </para>

      <screen>
$ <userinput>cat</userinput>
<userinput>Ctrl-z</userinput>
[2]+  Stopped                 cat
$ <userinput>jobs</userinput>
[1]-  Stopped                 sleep 3600
[2]+  Stopped                 cat
      </screen>

      <para>
	Comme prévu, le second travail est aussi stoppé, et a reçu
	<emphasis>2</emphasis> comme numéro de travail. Le signe plus
	(<emphasis>+</emphasis>) suivant le premier travail a été changé en
	signe moins (<emphasis>-</emphasis>), alors que le second travail est
	maintenant marqué par un signe plus. Le signe plus est utilisé pour
	indiquer le <emphasis>travail courant</emphasis>. Les commandes
	<command>bg</command> et <command>fg</command> que nous allons voir
	d'ici peu, vont opérer sur le travail courant si aucun travail n'est
	spécifié en tant que paramètre.
      </para>
     
      <!-- XXX - Document under what circumstances a job becomes the
                 current job. -->

      <para>
	Habituellement, quand vous gérez des travaux, vous voulez passer les
	travaux en premier plan d'exécution à nouveau. Cela se fait avec la
	commande <command>fg</command>. Exécuter <command>fg</command> sans
	paramètre va placer le travail courant au premier plan d'exécution. La
	plupart des shells affichera la commande placée au premier plan pour
	indiquer quel processus a été placé au premier plan :
      </para>

      <screen>
$ <userinput>fg</userinput>
cat
      </screen>

      <para>
	Bien sûr, il n'est pas toujours utile de placer le travail courant au
	premier plan. Vous pouvez placer un autre travail au premier plan en
	ajoutant le numéro de travail précédé d'un signe pourcentage
	(<emphasis>%</emphasis>) en tant qu'argument à <command>fg</command> :
      </para>

      <screen>
$ <userinput>fg %1</userinput>
sleep 3600
      </screen>

      <para>
	Basculer entre travaux en les stoppant et en les plaçant au premier plan
	d'exécution est souvent très utile lorsque le shell est utilisé de façon
	interactive. Par exemple, supposez que vous éditez un fichier avec un
	éditeur de texte, et que vous voulez exécuter une autre commande et
	ensuite continuer l'édition. Vous pouvez stopper l'éditeur avec 
	<emphasis>Ctrl-z</emphasis>, exécuter une commande, et placer l'éditeur
	au premier plan à nouveau avec <command>fg</command>.
      </para>
    </sect2>

    <sect2 xml:id="chap-procmgmt-jobcontrol-background">
      <title>Travaux en tâche de fond</title>

      <para>
	En plus de s'exécuter en premier plan, les travaux peuvent aussi
	s'exécuter en tâche de fond. Cela signifie qu'ils s'exécutent, mais que
	l'entrée du terminal n'est pas redirigée vers ces processus en tâche de
	fond. La plupart des shells configurent les travaux en tâche de fond de
	façon à rediriger la sortie vers le terminal du shell dans lequel ils
	ont été démarrés.
      </para>

      <para>
	Un processus stoppé peut être poursuivi en tâche de fond avec la
	commande <command>bg</command> :
      </para>

      <screen>
$ <userinput>sleep 3600</userinput>
  
[1]+  Stopped                 sleep 3600
$ <userinput>bg</userinput>
[1]+ sleep 3600 &amp;
$
      </screen>

      <para>
	Vous pouvez voir que le travail est effectivement en cours d'exécution
	avec <command>jobs</command> :
      </para>

      <screen>
$ <userinput>jobs</userinput>
[1]+  Running                 sleep 3600 &amp;
      </screen>

      <para>
	Comme <command>fg</command>, vous pouvez aussi placer en tâche de fond
	un autre travail que le travail courant en spécifiant son numéro de
	travail :
      </para>

      <screen>
$ <command>bg %1</command>
[1]+ sleep 3600 &amp;
      </screen>

      <para>
	Vous pouvez aussi placer un travail directement en tâche de fond
	lorsqu'il est démarré, en ajoutant à la fin une esperluette (&amp;)
	de la commande ou du pipeline. Par exemple :
      </para>

      <screen>
$ <userinput>sleep 3600 &amp;</userinput>
[1] 5078
      </screen>

      <!-- XXX - behavior of background processes when a shell is
                 terminated. -->
    </sect2>
  </sect1>
</chapter>
