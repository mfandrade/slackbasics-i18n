<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xml:id="chap-shell">
  <title>La consola</title>

  <sect1 xml:id="chap-shell-intro">
    <title>Introducción</title>

    <para>
      En este capítulo veremos el ambiente de trabajo tradicional para
      entornos UNIX: la consola. La consola es un intérprete que puede
      ser usada interactiva y no interactivamente. Cuando la consola
      es usada de forma no interactiva, trabaja como un simple pero
      potente lenguaje script.
    </para>

    <para>
      El procedimiento para iniciar la consola depende del modo de
      inicio de sesión, sea en modo texto o gráfico. Si esta iniciando
      sesión en modo texto la consola es inmediatamente iniciada
      despues de ingresar su contraseña (la correcta). Si utiliza un
      administrador gráfico de sesiones como KDM, inicie sesión de
      forma normal, y busque en su gestor de ventanas o el menú del
      entorno de escritorio por una entrada llamada
      <quote>XTerm</quote>, <quote>Terminal</quote> o
      <quote>Konsole</quote>. XTerm es un emulador de terminal,
      despues de que el emulador de terminal es iniciado la consola se
      inicia.
    </para>
		
    <para>
      Antes de ir mas lejos, tenemos que advertir que Slackware Linux
      provee mas de una consola. Existen dos consolas que ganaron
      popularidad a través del tiempo, la consola Bourne y la consola
      C. En este capítulo describiremos consolas Bourne que cumplan
      los estandares IEEE 1003.1. Bash (Bourne Again Shell) y Ksh
      (Korn Shell) cumplen con estos estandares. Entonces, es una
      buena idea utilizar una de estas consolas. Usted puede ver
      fácilmente cuál consola esta siendo ejecutada en el sistema, a
      través de la ejecución del comando <command>echo
      $SHELL</command>. Esto es lo que una consola Bash reportaría:
    </para>

    <screen>
$ <userinput>echo $SHELL</userinput>
/bin/bash
    </screen>
		
    <para>
      Si esta utilizando una consola diferente, puede cambiar su
      consola por defecto. Antes asignar una consola diferente, debe
      establecer la ruta completa de la misma. Puede hacer esto con el
      comando <command>which</command>. Por ejemplo:
    </para>

    <screen>
$ <userinput>which bash</userinput>
/bin/bash
$ <userinput>which ksh</userinput>
/bin/ksh
    </screen>

    <para>
      En este sistema Slackware, la ruta completa para la consola bash
      es <filename>/bin/bash</filename>, y para la consola ksh
      <filename>/bin/ksh</filename>. Con esta información y con el
      comando <command>chsh</command> puede cambiar la consola por
      defecto. El siguiente ejemplo asignará a bash como la consola
      por defecto:
    </para>

    <screen>
$ <userinput>chsh -s /bin/bash</userinput>
Changing shell for daniel.
Password:
Shell changed.
    </screen>

    <para>
      La nueva consola será activada despues de cerrar la sesión de la
      consola actual (con el comando <command>logout</command> o
      <command>exit</command>), o abriendo una nueva ventana X
      terminal si esta ejecutando X11.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-executing">
    <title>Ejecutando comandos</title>

    <para>
      Una consola interactiva es utilizada para iniciar programas
      ejecutando comandos. Existen dos tipos de comandos que una
      consola puede iniciar:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  <emphasis>Comandos built-in:</emphasis> los comnandos
	  built-in estan integrados en la consola. Comandos built-in
	  comúnmente usados son: <command>cd</command>,
	  <command>fg</command>, <command>bg</command>, y
	  <command>jobs</command>.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis>Comandos externos:</emphasis> los comandos
	  externos son programas que no son parte de la consola, y
	  estan almacenados de forma separada en el sistema de
	  archivos. Los comandos externos comúnmente usados
	  son: <command>ls</command>, <command>cat</command>,
	  <command>rm</command>, y <command>mkdir</command>.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      Todos los comandos del consola se ejecutan con la misma
      sintaxis:
    </para>
		
    <screen>
<command>commandname [argument1 argument2 ... argumentn]</command>
    </screen>

    <para>
      El número de argumentos es arbitrario, y siempre son pasados al
      comando. El comando puede decidir que hacer con estos
      argumentos.
    </para>

    <para>
      Todos los comandos built-in pueden ser ejecutados siempre, ya
      que son parte de la consola. Los comandos externos pueden ser
      ejecutados por su nombre cuando el programa esta en la ruta de
      busqueda de la consola. De lo contrario, se debe especificar la
      ruta al programa. La ruta de busqueda de la consola se almacena
      en una variable llamada <emphasis>PATH</emphasis>. Una variable
      es una pieza nombrada de memoria, de la cual el contenido puede
      ser cambiado. Podemos ver el contenido de la variable PATH de la
      siguiente forma:
    </para>

    <screen>
$ <userinput>echo $PATH</userinput>
/usr/kerberos/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/daniel/bin
    </screen>

    <para>
      Las rutas de directorio en la variable <emphasis>PATH</emphasis> estan 
      separadas con el caracter (<emphasis>:</emphasis>). Usted puede usar 
      el comando <command>which</command> para verificar si un comando dado 
      se encuentra en la ruta actual de la consola. Puede realizar esto proveyendo 
      el comando como argumento a <command>which</command>. Por ejemplo:
    </para>

    <screen>
$ <userinput>which pwd</userinput>
/bin/pwd
$ <userinput>which sysstat</userinput>
/usr/bin/which: no sysstat in (/usr/kerberos/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/daniel/bin)
    </screen>

    <para>
      Si un programa no esta en la ruta, todavía puede ejecutarlo
      ingresando su ruta absoluta o relativa.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-moving">
    <title>Navegando</title>

    <para>
      A veces es necesario saltar a través de varias partes de una
      línea, y alterarla, cuando esta editando comandos
      extensos. Ambas consolas <command>bash</command> y
      <command>ksh</command> tienen atajos de teclado para realizar
      tareas comunes. Existen dos modos de consola en donde los atajos
      difieren. Estos modos corresponden en su comportamiento con dos
      editores populares para UNIX. Estos editores son
      <command>vi</command> y <command>emacs</command>. En este libro
      solamente cubriremos los atajos EMACS-like. Puede revisar en que
      modo se ejecuta una consola imprimiendo la variable
      <emphasis>SHELLOPTS</emphasis>. En el primer ejemplo la consola
      es usada en modo <emphasis>emacs</emphasis>, en el segundo
      ejemplo el modo <emphasis>vi</emphasis> es usado. Identifique el
      modo buscando las cadenas <emphasis>emacs</emphasis> o
      <emphasis>vi</emphasis> en el contenido de la variable.
    </para>

    <screen>
$ <userinput>echo $SHELLOPTS</userinput>
braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor
    </screen>

    <screen>
$ <userinput>echo $SHELLOPTS</userinput>
braceexpand:hashall:histexpand:history:interactive-comments:monitor:vi
    </screen>

    <para>
      Si su consola esta actualmente usando el modo
      <emphasis>vi</emphasis>, puede cambiarla a modo
      <emphasis>emacs</emphasis> asignado la opción
      <emphasis>emacs</emphasis>:
    </para>

    <screen>
$ <userinput>set -o emacs</userinput>
    </screen>

    <para>
      Con el modo <emphasis>emacs</emphasis> activado, puede empezar a
      utilizar los atajos de teclado. Tomaremos en cuenta tres tipos
      de atajos: atajos de edición de caracteres, atajos de edición de
      palabras y atajos de edición de línea. Luego en este capítulo,
      daremos un vistazo a algunos atajos que son usados para obtener
      entradas del historial de comandos.
    </para>

    <sect2 xml:id="chap-shell-moving-char">
      <title>Editando caracteres</title>

      <para>
	El primer grupo de atajos tiene caracteres como su unidad
	lógica, esto quiere decir que permiten operaciones de edición
	sobre caracteres de línea de comando. <xref
	linkend="chap-shell-moving-char-shortcuts-move" /> provee una
	introducción de los atajos que son usados para desplazarse a
	través de una línea por caracter.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-move">
	<title>Desplazándose por caracter</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry><entry>Descripción</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-b</entry>
	      <entry>Desplaza un caracter hacia atrás.</entry>
	    </row>
	    <row>
	      <entry>Ctrl-f</entry>
	      <entry>Desplaza un caracter hacia adelante.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Estos atajos son sencillos, y no hacen nada
	inesperado. Suponga que ha tipeado la siguiente línea:
      </para>

      <screen>
find ~/music -name '*.ogg' - -print<emphasis role="cursor">&#32;</emphasis>
      </screen>

      <para>
	El cursor estará al final. Ahora usted puede moverse al inicio
	de la línea mantieniendo <emphasis>Ctrl-b</emphasis>
	presionado:
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music - -name '*.ogg' -print
      </screen>

      <para>
	De la misma forma, puede puede volver al final de la línea
	manteniendo <emphasis>Ctrl-f</emphasis> presionado. Existe un
	error en esta línea, porque hay un guión erróneo. Para remover
	este guión, puede utilizar el atajo de borrado de caracter.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-delete">
	<title>Borrando caracteres</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry><entry>Descripción</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-h</entry>
	      <entry>Borra un caracter antes del cursor. Tiene 
	      el mismo efecto que utilizar la tecla Retroceso en 
	      la mayoría de los ordenadores personales.</entry>
	    </row>
	    <row>
	      <entry>Ctrl-d</entry>
	      <entry>Borra el caracter sobre el que esta el cursor.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Puede eliminar el guion de dos formas. La primera es mover el
	cursor hasta el guión:
      </para>

      <screen>
find ~/music <emphasis role="cursor">-</emphasis> -name '*.ogg' -print
      </screen>

      <para>
	y presionar <emphasis>Ctrl-d</emphasis> dos veces. Esto
	eliminará el guión y el espacio que le sigue:
      </para>

      <screen>
find ~/music <emphasis role="cursor">-</emphasis>name '*.ogg' -print
      </screen>

      <para>
	Observando el fragmento original, la otra opción es posicionar
	el cursor en el espacio siguiente al guión:
      </para>

      <screen>
find ~/music -<emphasis role="cursor">&#32;</emphasis> -name '*.ogg' -print
      </screen>

      <para>
	y presionar <emphasis>Ctrl-h</emphasis> dos veces para
	eliminar los dos caracteres previos, el guión y el espacio
	anterior al guión. El resultado será el mismo, excepto que el
	cursor se posicionará en:
      </para>

      <screen>
find ~/music<emphasis role="cursor">&#32;</emphasis>-name '*.ogg' -print
      </screen>

      <para>
	Una de las mejores características de la mayoría de las
	consolas modernas es que se pueden intercambiar
	caracteres. Esto es útil si se produce un error de tipeo en el
	cual dos caracteres son intercambiados. <xref
	linkend="chap-shell-moving-char-shortcuts-swap" /> lista los
	atajos para intercambiar caracteres.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-swap">
	<title>Intercambiando caracteres</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry><entry>Descripción</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-t</entry>
	      <entry> Intercambia los caracteres sobre el cual esta el
	      cursor, y el caracter previo. Esto es útil para
	      correciones de tipeo rápidas.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Suponga que usted ha tipeado el siguiente comando:
      </para>

      <screen>
cat myreport.ttx
      </screen>

      <para>
	La extensión contiene un error de tipeo si intentaba ejecutar
	<command>cat</command>
	<filename>myreport.txt</filename>. Puede ser corregido con el
	atajo de intercambio de caracteres. Primero desplácese hacia
	el segundo caracter del par de caracteres que están tipeados
	en orden incorrecto:
      </para>

      <screen>
cat myreport.tt<emphasis role="cursor">x</emphasis>
      </screen>

      <para>
	Puede entonces presionar <emphasis>Ctrl-t</emphasis>. Los
	caracteres serán intercambiados, y el cursor se ubicará detrás
	de los caracteres intercambiados:
      </para>

      <screen>
cat myreport.txt<emphasis role="cursor">&#32;</emphasis>
      </screen>
    </sect2>

    <sect2 xml:id="chap-shell-moving-word">
      <title>Editando palabras</title>

      <para>
	Con frecuencia es tedioso moverse a nivel de
	caracteres. Afortunadamente las consolas Korn y Bash pueden
	moverse a traves de líneas a nivel de palabras. Las palabras
	son secuencias de caracteres separadas por un caracter
	especial, como un espacio. <xref
	linkend="chap-shell-moving-word-shortcuts-move" /> resume los
	atajos que pueden ser utilizados para navegar a través de una
	línea por palabra.
      </para>

      <table xml:id="chap-shell-moving-word-shortcuts-move">
	<title>Moviendose a través de palabras</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry>
	      <entry>Descripción</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Esc b</entry>
	      <entry>
	    Moverse hacia atrás al inicio de la palabra actual o previa.
	      </entry>
	    </row>
	    <row>
	      <entry>Esc f</entry>
	      <entry>
	    Moverse hacia adelante al último caracter de la palabra actual 
	    o de la siguiente.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Como puede ver las letras de estos atajos son iguales a
	aquellas utilizadas para caracteres. La lógica de movimiento
	es un poco curiosa. Moverse hacia adelante coloca el cursor al
	final de la palabra actual, no en el primer caracter de la
	siguiente palabra como usted debe haber predicho. Veámos un
	ejemplo. Al inicio, el cursor esta en el primer caracter de
	la línea.
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music -name '*.ogg' -print
      </screen>

      <para>
	Presionando <emphasis>Esc f</emphasis> moverá el cursor detrás
	de el último caracter de la primera palabra, que es en este
	caso <emphasis>find</emphasis>:
      </para>

      <screen>
find<emphasis role="cursor">&#32;</emphasis>~/music -name '*.ogg' -print
      </screen>

      <para>
    Yendo hacia adelante una vez mas colocará el cursor detrás de 	
	<emphasis>~/music</emphasis>:
      </para>

      <screen>
find ~/music<emphasis role="cursor">&#32;</emphasis>-name '*.ogg' -print
      </screen>

      <para>
	El movimiento hacia atrás coloca el cursor en el primer
	caracter de la palabra actual, o en el primer caracter de la
	palabra previa si el cursor esta actualmente en el primer
	caracter de una palabra. Entonces, moverse hacia atrás una
	palabra en el ejemplo previo colocará el cursor en la primera
	letra de <quote>music</quote>:
      </para>

      <screen>
find ~/<emphasis role="cursor">m</emphasis>usic -name '*.ogg' -print
      </screen>

      <para>
        El borrado de palabras funciona igual al movimiento entre
        palabras, pero los caracteres intermedios son
        eliminados. <xref
        linkend="chap-shell-moving-word-shortcuts-delete" /> enlista
        los atajos usados para borrar palabras.
      </para>

      <table  xml:id="chap-shell-moving-word-shortcuts-delete">
	<title>Borrando palabras</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry>
	      <entry>Descripción</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>
		Alt-d
	      </entry>
	      <entry>
		Elimina la palabra, iniciando en la posicion actual del cursor.
	      </entry>
	    </row>
	    <row>
	      <entry>
		Alt-Backspace
	      </entry>
	      <entry>
		Elimina cada caracter desde la posicion actual del cursor 
		hasta el primer caracter de la palabra identificada.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Finalmente, existen atajos útiles para manipular palabras.
	Estos atajos estan listados en <xref
	linkend="chap-shell-moving-word-shortcuts-modify" />.
      </para>

      <table  xml:id="chap-shell-moving-word-shortcuts-modify">
	<title>Modificando palabras</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry>
	      <entry>Descripción</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Alt-t</entry>
	      <entry>
		Intercambia la palabra actual con la palabra previa.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-u</entry>
	      <entry>
		Convierte los caracteres de la palabra a mayúscula, 
		iniciando en la posicion del cursor.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-l</entry>
	      <entry>
		Convierte los caracteres de la palabra a minúscula, 
		iniciando en la posicion del cursor.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-c</entry>
	      <entry>
		Capitaliza el primer caracter de la palabra actual o 
		de la siguiente palabra.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	En el intercambio de palabras, si las palabras usadas son
	normales, el comportamiento es predecible. Por ejemplo, si se
	tiene la siguiente línea con el cursor en <quote>two</quote>
      </para>

      <screen>
one <emphasis role="cursor">t</emphasis>wo three
      </screen>

      <para>
	El intercambio afectará a <quote>two</quote> y
	<quote>one</quote>:
      </para>

      <screen>
two one three
      </screen>

      <para>
	Pero si hay caracteres no comunes en palabras, la consola
	intercambiará la palabra con la palabra previa preservando el
	orden de los caracteres especiales. Esto es muy útil para la
	edición de argumentos de comandos. Suponga que comete un
	error, mezclando la extensión de archivos que desea buscar, y
	el parámetro <emphasis>print</emphasis>:
      </para>

      <screen>
find ~/music -name '*.print' -ogg
      </screen>

      <para>
	Puede arreglar esto colocando el cursor en la segunda palabra
	errónea, en este caso <quote>ogg</quote>, e intercambiando las
	dos palabras. Esto le dará el resultado esperado:
      </para>

      <screen>
find ~/music -name '*.ogg' -print
      </screen>

      <para>
	Finalmente, existen atajos que cambian la capitalización de
	las palabras. El atajo Alt-u convierte todos los caracteres a
	mayúscula, iniciando en la posicion actual del cursor hasta el
	final de la palabra. Entonces, si tenemos un nombre en
	minúscula <quote>alice</quote>, capitalizando el nombre con el
	cursor en <quote>i</quote> retorna <quote>alICE</quote>. Alt-l
	tiene el mismo comportamiento, pero cambia las letras a
	minúscula. Entonces, usando Alt-l en <quote>alICE</quote> con
	el cursor en <quote>I</quote> cambiará la cadena a
	<quote>alice</quote>. Alt-c cambia solamente el caracter sobre
	el cual el cursor se encuentra, o el caracter de la siguiente
	palabra que es encontrada, a mayúscula. Por ejemplo,
	presionando Alt-c con el cursor sobre <quote>a</quote> en
	<quote>alice</quote> producirá <quote>Alice</quote>.
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-moving-line">
      <title>Edición de líneas</title>

      <para>
	El nivel más alto que podemos editar es la línea misma.
	<xref linkend="chap-shell-moving-line-shortcuts-move" />
	enlista los dos atajos de movimiento.
      </para>

      <table xml:id="chap-shell-moving-line-shortcuts-move">
	<title>Moviéndose a través de líneas</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry>
	      <entry>Descripción</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-a</entry>
	      <entry>
		Moverse al inicio de la línea actual.
	      </entry>
	    </row>
	    <row>
	      <entry>Ctrl-e</entry>
	      <entry>
		Moverse al final de la línea actual.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Suponga que el cursor esta en algún lugar en medio de la
	línea:
      </para>

      <screen>
find ~/music -name<emphasis role="cursor">&#32;</emphasis>'*.ogg' -print
      </screen>

      <para>
	Presionando Ctrl-e una vez moverá el cursor al final de la
	línea:
      </para>

      <screen>
find ~/music -name '*.ogg' -print<emphasis role="cursor">&#32;</emphasis>
      </screen>

      <para>
	Presionando Ctrl-a moverá el cursor al inicio de la línea:
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music -name '*.ogg' -print
      </screen>

      <para>
	Tambien puede eliminar caracteres al nivel de línea. Los
	atajos estan listados en <xref
	linkend="chap-shell-moving-line-shortcuts-delete" />. Estos
	atajos trabajan como un movimiento, pero elimina todos los
	caracteres que se encuentran. Ctrl-k eliminará el caracter
	sobre el cual el cursor se encuentra, pero Ctrl-x Retroceso no
	lo hará. Moviéndose al inicio de la línea con Ctrl-a,
	combinado con Ctrl-k, es un tip rápido para eliminar una línea
	completa.
      </para>

      <table xml:id="chap-shell-moving-line-shortcuts-delete">
	<title>Eliminando líneas</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry>
	      <entry>Descripción</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-k</entry>
	      <entry>
		Borra todos los caracteres en la línea, iniciando en
		la posicion del cursor.
	      </entry>
	    </row>
	    <row>
	      <entry>Ctrl-x Backspace</entry>
	      <entry>
		Borra todos los caracteres en la línea hasta la
		posicion actual del cursor.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-shell-history">
    <title>Historial de Comandos</title>

    <para>
      A veces se deben ejecutar comandos que se ejecutaron antes.
      Afortunadamente, usted no tiene que escribirlos de nuevo.  Puede
      navegar a traves del historial de comandos ejecutados con las
      teclas direccionales arriba y abajo. Además también es posible
      buscar un comando. Presione Ctrl-r y comience a escribir el
      comando que quiere ejecutar. Se dará cuenta de que Bash mostrará
      el primer resultado similar que encuentre. Si el resultado no
      era el que estaba buscando puede continuer escribiendo el
      comando (hasta que es único y una similitud aparece), o presione
      Ctrl-r una vez mas para obtener la siguiente similitud. Cuando
      haya encontrado el comando que estaba buscando, puede ejecutarlo
      presionando &lt;Enter&gt;.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-completion">
    <title>Autocompletado</title>

    <para>
      El Autocompletado es una de las funcionalidades mas útiles de
      las consolas UNIX-like. Suponga que tiene un directorio con dos
      archivos nombrados <filename>websites</filename> y
      <filename>recipe</filename>. Y suponga que quiere ejecutar
      <command>cat</command> sobre el archivo
      <filename>websites</filename> (<command>cat</command> muestra el
      contenido de un archivo), especificando
      <filename>websites</filename> como parámetro para
      cat. Normalmente tendría que escribir <quote>cat
      websites</quote>, y ejecutar el comando. Intente escribiendo
      <quote>cat w</quote>, y presione la tecla &lt;Tab&gt;. Bash
      expandirá automáticamente lo que usted escribió a <quote>cat
      websites</quote>.
    </para>

    <para>
      Pero que sucede si tiene archivos que inician con la misma
      letra?. Suponga que tiene los archivos
      <filename>recipe1.txt</filename> y
      <filename>recipe2.txt</filename>. Teclee <quote>cat r</quote> y
      presione &lt;Tab&gt;, Bash completará el nombre del archivo
      tanto como pueda. Lo dejaría con <quote>cat recipe</quote>.
      Intente presionando &lt;Tab&gt; de nuevo, y Bash mostrará una
      lista de nombres de archivo que comienzan con
      <quote>recipe</quote>, en este caso ambos archivos 'recipe'. En
      este punto debe ayudar a Bash tecleando el siguiente caracter
      del archivo que necesita. Suponga que quiere ejecutar
      <command>cat</command> <filename>recipe2.txt</filename>, puede
      presionar la tecla &lt;2&gt;.  Despues de eso no hay problemas
      completando el nombre del archivo, y presionando &lt;Tab&gt;
      completa el comando <quote>cat recipe2.txt</quote>.
    </para>

    <para>
      Vale la pena señalar que el autocompletado también funciona con
      comandos. La mayoría de los comandos GNU/Linux son bastante
      cortos, entonces no será de mucho uso la mayor parte del tiempo.
    </para>

    <para>
      Es una buena idea practicar un poco con el autocompletado, puede
      ahorrar muchos golpes de teclado si se maneja bien. Usted puede
      crear algunos archivos vacios para practicar utilizando el
      comando <command>touch</command>. Por ejemplo, para crear un
      archivo con el nombre <filename>recipe3.txt</filename>, ejecute
      <command>touch recipe3.txt</command>.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-wildcards">
    <title>Comodines</title>

    <para>
      La mayoría de las consolas, incluyendo Bash y ksh, soportan
      caracteres comodin. Los comodines son caracteres especiales que
      pueden ser utilizados para igualar patrones. La tabla siguiente
      describe algunos comodines comunmente usados. Veremos varios
      ejemplos para dar una idea general de como trabajan los
      comodines.
    </para>

    <table xml:id="chap-shell-wildcards-thewildcards">
      <title>Comodines Bash</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
	<thead>
	  <row>
	    <entry>Comodin</entry> <entry>Iguala</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>*</entry>
	    <entry>Una cadena de caracteres</entry>
	  </row>
	  <row>
	    <entry>?</entry>
	    <entry>Un solo caracter</entry>
	  </row>
	  <row>
	    <entry>[]</entry>
	    <entry>Un caracter en un arreglo de caracteres</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 xml:id="chap-shell-wildcards-string">
      <title>Igualando una cadena de caracteres</title>

      <para>
	Como puede ver en la tabla anterior el caracter
	<quote>*</quote> iguala una cadena de caracteres. Por ejemplo,
	<emphasis>*.html</emphasis> iguala todo lo que termine con
	<emphasis>.html</emphasis>, <emphasis>d*.html</emphasis>
	iguala todo lo que comienza con <emphasis>d</emphasis> y
	termina con <emphasis>.html</emphasis>.
      </para>

      <para>
	Suponga que quiere listar todos los archivos en el directorio
	actual con la extensión <emphasis>.html</emphasis>, el
	siguiente comando hará el trabajo:
      </para>

      <screen>
$ <userinput>ls *.html</userinput>
book.html        installation.html     pkgmgmt.html  usermgmt.html
filesystem.html  internet.html         printer.html  xfree86.html
gfdl.html        introduction.html     proc.html
help.html        slackware-basics.html shell.html
      </screen>

      <para>
	De la misma forma podríamos eliminar todos los archivos que
	comiencen con <emphasis>in</emphasis>:
      </para>

      <screen>
$ <userinput>rm in*</userinput>
      </screen>
    </sect2>

    <sect2 xml:id="chap-shell-wildcards-single">
      <title>Igualando caracteres individuales</title>

      <para>
	El comodin <quote>?</quote> funciona como el comodin
	<quote>*</quote>, pero iguala caracteres individuales. Suponga
	que tenemos tres archivos <filename>file1.txt</filename>,
	<filename>file2.txt</filename> y
	<filename>file3.txt</filename>. La cadena
	<emphasis>file?.txt</emphasis> iguala con los tres archivos,
	pero no iguala con <filename>file10.txt</filename>
	(<quote>10</quote> son dos caracteres).
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-wildcards-set">
      <title>Igualando caracteres desde un conjunto</title>

      <para>
	El comodin <quote>[]</quote> iguala cada caracter entre los
	corchetes. Suponga que tenemos los archivos del ejemplo
	previo, <filename>file1.txt</filename>,
	<filename>file2.txt</filename> y
	<filename>file3.txt</filename>. La cadena
	<emphasis>file[23].txt</emphasis> iguala con
	<filename>file2.txt</filename> y
	<filename>file3.txt</filename>, pero no con
	<filename>file1.txt</filename>.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-shell-inout">
    <title>Redirecciones y conductos</title>

    <para>
      Una de las características principales de las consolas UNIX-like
      son redirecciones y conductos. Antes de que veamos ambas
      tecnicas debemos ver cómo funcionan la mayoría de los comandos
      UNIX-like. Cuando un comando no esta obteniendo datos desde un
      archivo, abrirá un pseudo-archivo llamado
      <emphasis>stdin</emphasis>, y esperará a datos que aparezcan en
      el. El mismo principio puede ser aplicado para la salida de
      comandos, cuando no hay una razon explícita para salvar la
      salida a un archivo, el pseudo-archivo
      <emphasis>stdout</emphasis> será abierto para los datos de
      salida. Este principio se muestra esquemáticamente en <xref
      linkend="fig-shell-inout" />
    </para>

    <figure xml:id="fig-shell-inout">
      <title>Entrada y salida estándar</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="../../images/shell-inout.png" format="PNG"/>
	</imageobject>
      </mediaobject>
    </figure>

    <para>
      Puede ver <emphasis>stdin</emphasis> y
      <emphasis>stdout</emphasis> en acción con el comando
      <command>cat</command>. Si cat es iniciado sin parámetros,
      esperará por datos de entrada en <emphasis>stdin</emphasis> y
      retornará la misma información en
      <emphasis>stdout</emphasis>. Si la redirección no es usada, la
      entrada de teclado será usada para <emphasis>stdin</emphasis>, y
      la salida de <emphasis>stdout</emphasis> será impresa en la
      terminal:
    </para>

    <screen>
$ <userinput>cat</userinput>
<command>Hello world!</command>
Hello world!
    </screen>

    <para>
      Como puede ver 'cat' imprimirá los datos a
      <emphasis>stdout</emphasis> despues de haber ingresado los datos
      a <emphasis>stdin</emphasis> usando el teclado.
    </para>

    <sect2 xml:id="chap-shell-inout-redir">
      <title>Redirección</title>

      <para>
	La consola le permite usar <emphasis>stdin</emphasis> y
	<emphasis>stdout</emphasis> utilizando <quote>&lt;</quote> y
	<quote>&gt;</quote>. Los datos se redireccionan en el sentido
	de los caracteres ('&lt;' izquierda, '&gt;' derecha). En el
	siguiente ejemplo redirigiremos el resumen md5 calculado para
	un conjunto de archivos hacia un archivo llamado
	<filename>md5sums</filename>:
      </para>

      <screen>
$ <userinput>md5sum * &gt; md5sums</userinput>
$ <userinput>cat md5sums</userinput> 
6be249ef5cacb10014740f61793734a8  test1
220d2cc4d5d5fed2aa52f0f48da38ebe  test2
631172a1cfca3c7cf9e8d0a16e6e8cfe  test3
      </screen>

      <para>
	Como podemos ver en la salida de <command>cat</command>, la
	salida de <command>md5sum *</command> fué redirigida a el
	archivo <filename>md5sums</filename>. Tambien podemos usar la
	redirección para proveer datos de entrada a un comando:
      </para>

      <screen>
$ <userinput>md5sum &lt; test1</userinput>
6be249ef5cacb10014740f61793734a8  -
      </screen>

      <para>
	Esto toma el contenido de <filename>test1</filename> como
	entrada para <command>md5sum</command>.
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-inout-pipes">
      <title>Conductos</title>

      <para>
	Tambien puede conectar la entrada y salida de comandos usando
	los denominados <emphasis>conductos</emphasis>. Un conducto
	entre comandos puede hacerse con el caracter <quote>|</quote>.
	Dos o mas comandos combinados se denominan una
	<emphasis>tubería</emphasis>. <xref
	linkend="fig-shell-pipeline" /> da un vistazo esquemático a
	una tubería compuesta por dos comandos.
      </para>

      <figure xml:id="fig-shell-pipeline">
	<title>Una tubería</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="../../images/shell-pipeline.png" format="PNG"/>
	  </imageobject>
	</mediaobject>
      </figure>

      <para>
	La <quote>sintaxis</quote> de una tubería es:
	<command>comando1 | comando2 ... | comandon</command>. Si
	usted conoce como trabajan la mayoría de los comandos
	UNIX-like puede ahora dejar que estos comandos trabajen en
	conjunto. Veamos un ejemplo rápido:
      </para>

      <screen>
$ <userinput>cat /usr/share/dict/american-english | grep "aba" | wc -l</userinput>
123
      </screen>

      <para>
	El primer comando, <command>cat</command>, lee el archivo
	diccionario
	<filename>/usr/share/dict/american-english</filename>. La
	salida de el comando <command>cat</command> es conducida a
	<command>grep</command>, que imprime todos los archivos
	conteniendo la frase <quote>aba</quote>. A su vez, la salida
	de <quote>grep</quote> es conducida a <command>wc
	-l</command>, que cuenta el número de líneas que recibe desde
	<emphasis>stdin</emphasis>. Finalmente, cuando el flujo se
	completa <command>wc</command> imprime el número de líneas que
	contó. Entonces, se combinarion tres comandos para contar el
	número de líneas conteniendo la frase <quote>aba</quote> en
	este diccionario en particular.
      </para>

      <para>
	Existen cientos de pequeñas utilidades que manejan tareas
	específicas. Como puede imaginar, estos comandos juntos
	proveen una poderosa caja de herramientas al combinarse
	utilizando conductos.
      </para>
    </sect2>
  </sect1>
</chapter>
