<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xml:id="chap-pkgmgmt">
  <title>Administración de paquetes</title>

  <sect1 xml:id="chap-pkgmgmt-pkgtools">
    <title>Pkgtools</title>

    <sect2 xml:id="chap-pkgmgmt-pkgtools-intro">
      <title>Introducción</title>

      <para>
	Slackware Linux, a diferencia de muchas otras distribuciones,
	no utiliza un sistema de administración de paquetes complejo. 
	Los paquetes tienen la extensión <filename>.tgz</filename>, 
	y son usualmente tarballs ordinarios con dos archivos extra:
	un script de instalación y un archivo de descripción del 
	paquete. Debido a la simplicidad de los paquetes, las 
	herramientas de paquetes de Slackware Linux no tienen la 
	necesidad de manipular las dependencias. Pero muchos usuarios
	prefieren esta característica, ya que usualmente las 
	dependencias generan más problemas de los que solucionan.
      </para>

      <para>
	Slackware Linux posee pocas herramientas para administrar 
	paquetes. Las herramientas más importantes serán cubiertas
	en este capítulo. Para aprender a usar las herramientas, 
	debemos hechar un vistazo al nombramiento de paquetes. Veámos
	un ejemplo, imagine que tenemos un paquete con el nombre
	<filename>bash-2.05b-i386-2.tgz</filename>. En este caso el
	nombre del paquete es bash-2.05b-i386-2. En el nombre del 
	paquete la información es separada por el caracter '-'. Un
	nombre de paquete tiene el siguiente significado:
	<emphasis>programname-version-architecture-packagerevision</emphasis>
      </para>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-pkgtools-pkgtool">
      <title>pkgtool</title>

      <para>
	El comando <command>pkgtool</command> provee una interfaz
	basada en menús para algunas operaciones de paquete. Los menús
	más importante son <emphasis>Remove</emphasis> y 
	<emphasis>Setup</emphasis>, La opción <emphasis>Remove</emphasis> 
	presenta una lista de paquetes instalados. Usted puede seleccionar
	qué paquetes quiere remover con la barra espaciadora y confirmar
	su selección con la tecla enter. También puede quitar un paquete
	de la selección para remoción con la barra espaciadora.
      </para>

      <para>
	La opción <emphasis>Setup</emphasis> provee acceso a unas cuantas
	herramientas que pueden ayudarle a configurar su sistema, por 
	ejemplo:  <command>netconfig</command>, 
	<command>pppconfig</command> and <command>xwmconfig</command>.
      </para>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-pkgtools-installpkg">
      <title>installpkg</title>

      <para>
	El comando <command>installpkg</command> es usado para instalar
	paquetes. <command>installpkg</command> requiere de un fichero
	de paquete como parámetro. Por ejemplo, si quiere instalar el 
	paquete <filename>bash-2.05b-i386-2.tgz</filename> ejecute:
      </para>

      <screen>
# <userinput>installpkg bash-2.05b-i386-2.tgz</userinput>
      </screen>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-pkgtools-upgradepkg">
      <title>upgradepkg</title>

      <para>
	<command>upgradepkg</command> puede ser usado para actualizar
	paquetes. En contraste con <command>installpkg</command>
	solamente instala el paquete cuando existe una versión previa 
	disponible en el sistema. La sintaxis del comando es comparable 
	a <command>installpkg</command>. Por ejemplo, si quisiera 
	actualizar paquetes dentro de un directorio, debería ejecutar:
      </para>

      <screen>
# <userinput>upgradepkg *.tgz</userinput>
      </screen>

      <para>
	Como se dijo, solamente se instalarán aquellos paquetes que 
	tengan otra versión del mismo paquete instalada en el sistema.
      </para>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-pkgtools-removepkg">
      <title>removepkg</title>

      <para>
	El comando <command>removepkg</command> puede ser usado para
	remover paquetes instalados. Por ejemplo, si quisiera eliminar
	el paquete <quote>bash</quote> (lo cual no es recomendado!), 
	puede ejecutar:
      </para>

      <screen>
# <userinput>removepkg bash</userinput>
      </screen>

      <para>
	Como puede ver, en el ejemplo solamente se especifica el nombre 
	del programa. También puede remover el paquete especificando el
	nombre completo:	
      </para>

      <screen>
# <userinput>removepkg bash-2.05b-i386-2</userinput>
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-pkgmgmt-slackpkg">
    <title>Slackpkg</title>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-intro">
      <title>Introducción</title>

      <para>
      	Slackpkg es una herramienta de paquetes escrita por Roberto F. 
	Batista y Evaldo Gardenali. Ayuda a los usuarios a instalar y 
	actualizar paquetes Slackware Linux utilizando los mirrors 
	oficiales. Slackpkg es incluído en el directorio <filename>extra/</filename>
	en el segundo CD de la distribución.
       </para>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-config">
      <title>Configuración</title>

      <para>
        Slackpkg se configura a través de algunos ficheros en 
	<filename>/etc/slackpkg</filename>. La primera cosa que 
	debería hacer es configurar qué mirror debería utilizar
	slackpkg. Esto se realiza editando el archivo
	<filename>/etc/slackpkg/mirrors</filename>. Este archivo
	ya contiene una lista de mirrors, puede solamente descomentar
	uno de ellos. Por ejemplo:
      </para>

      <screen>
ftp://ftp.nluug.nl/pub/os/Linux/distr/slackware/slackware-12.0/
      </screen>

      <para>
      	Esto quiere decir que se utilizará el árbol Slackware Linux 
	12.0 en el mirror ftp.nluug.nl. Asegúrese de usar un árbol
	que coincida con su versión de Slackware Linux. Si le gustaría
	seguir slackware-current podría descomentar la siguiente línea
	(cuando quisiera utilizar el mirror NLUUG):
      </para>

      <screen>
ftp://ftp.nluug.nl/pub/os/Linux/distr/slackware/slackware-current/
      </screen>

      <para>
      	Slackpkg solamente aceptará un mirror. Descomentar más mirrors
	no funcionará.
      </para>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-gpgkey">
      <title>Importando la llave GPG de Slackware Linux</title>

      <para>
        Por defecto, slackpkg verifica paquetes utilizando las 
	firmas del paquete y la llave GPG pública de Slackware Linux. 
	Ya que esta es una buena idea desde el punto de vista de la
	seguridad, probablemente no quiera cambiar este comportamiento. 
	Para poder verificar los paquetes, debe importar la llave GPG 
	<emphasis>security@slackware.com</emphasis>. Si no ha utilizado
	la llave GPG antes debe crear un directorio GPG en el directorio
	home del usuario <emphasis>root</emphasis>:
      </para>

      <screen>
# <userinput>mkdir ~/.gnupg</userinput>
      </screen>

      <para>
        El paso siguiente es buscar la llave pública de
<emphasis>security@slackware.com</emphasis>. Haremos esto consultando al 
	servidor <emphasis>pgp.mit.edu</emphasis>:
      </para>

      <screen>
# <userinput>gpg --keyserver pgp.mit.edu --search security@slackware.com</userinput>
gpg: keyring `/root/.gnupg/secring.gpg' created
gpg: keyring `/root/.gnupg/pubring.gpg' created
gpg: searching for "security@slackware.com" from HKP server pgp.mit.edu
Keys 1-2 of 2 for "security@slackware.com"
(1)     Slackware Linux Project &lt;security@slackware.com&gt;
          1024 bit DSA key 40102233, created 2003-02-25
(2)     Slackware Linux Project &lt;security@slackware.com&gt;
          1024 bit DSA key 40102233, created 2003-02-25
Enter number(s), N)ext, or Q)uit &gt; 
      </screen>

      <para>
        Como puede ver tenemos dos resultados (idénticos). Seleccione el
	primero ingresando <quote>1</quote>. GnuPG importará esta llave 
	en el llavero del usuario <emphasis>root</emphasis>:
      </para>

      <screen>
Enter number(s), N)ext, or Q)uit > <userinput>1</userinput>
gpg: key 40102233: duplicated user ID detected - merged
gpg: /root/.gnupg/trustdb.gpg: trustdb created
gpg: key 40102233: public key "Slackware Linux Project &lt;security@slackware.com&gt;" imported
gpg: Total number processed: 1
gpg:               imported: 1
      </screen>

      <para>
        Asegúrese de revisar dos veces la llave que recivióm. El ID de la
	llave y la huella digital pueden ser encontradas en Internet 
	en muchos sitios de confianza. El ID de la llacve es, como 
	se mencionó previamente <emphasis>40102233</emphasis>. Usted
	puede obtener la huella digital con el parámetro <parameter 
	class="command">--fingerprint</parameter>:
      </para>

      <screen>
# <userinput>gpg --fingerprint security@slackware.com</userinput>
pub  1024D/40102233 2003-02-26 Slackware Linux Project &lt;security@slackware.com&gt;
     Key fingerprint = EC56 49DA 401E 22AB FA67  36EF 6A44 63C0 4010 2233
sub  1024g/4E523569 2003-02-26 [expires: 2012-12-21]
      </screen>

      <para>
        Una vez que haya importado y verificado esta llave puede empezar
	a utilizar slackpkg, e instalar los paquetes de forma segura.
      </para>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-updatepkglist">
      <title>Actualizando la lista de paquetes</title>

      <para>
        Antes de actualizar e instalar paquetes debe dejar a slackpkg
	descargar la lista de paquetes del mirror que este usando. Es
	una buena idea hacer esto regularmente para mantener la lista 
	actualizada. La última lista de paquetes puede ser obtenida con:
      </para>

      <screen>
$ <userinput>slackpkg update</userinput>
      </screen>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-upgrade">
      <title>Actualizando paquetes</title>

      <para>
        El parámetro <parameter class="command">upgrade</parameter> es
	utilizado para actualizar paquetes instalados. Usted debe agregar
	un parámetro extra para decirle a <command>slackpkg</command> qué
	quiere actualizar, esto difiere para una versión estable de 
	Slackware Linux y slackware-current. Las actualizaciones para un
	lanzamiento oficial de Slackware Linux se encuentran el el directorio
	<filename>patches</filename> de los mirrors FTP. Usted puede actualizar
	una instalación slackware-stable (e.g. Slackware Linux 12.0) con:
      </para>

      <screen>
# <userinput>slackpkg upgrade patches</userinput>
      </screen>

      <para>
        In this case <command>slackpkg</command> will use the packages
        from the <filename>patches</filename> directory. In
        slackware-current updated packages are put in the normal
        <filename>slackware</filename> package sub-directories. So, we
        can pass that as an parameter to <command>slackpkg
        upgrade</command>:
      </para>

      <screen>
# <userinput>slackpkg upgrade slackware</userinput>
      </screen>

      <para>
	You can also upgrade individual packages by specifying the name
        of the package to be upgraded, for example:
      </para>

      <screen>
# <userinput>slackpkg upgrade pine</userinput>
      </screen>

    </sect2>

    <sect2 xml:id="chap-pkgmgmt-slackpkg-install">
      <title>Installing packages</title>

      <para>
        The <parameter class="command">install</parameter> is used to
        install packages:
      </para>

      <screen>
# <userinput>slackpkg install rexima</userinput>
      </screen>

      <para>
        Be aware that neither slackpkg, nor the Slackware Linux
        package tools do dependency checking. If some program does not
        work due to missing libraries, you have to add them yourself
        with slackpkg.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-pkgmgmt-rsync">
    <title>Getting updates through rsync</title>

    <para>
      Another popular method of keeping Slackware Linux up to date is
      by keeping a local mirror. The ideal way of doing this is via
      rsync.  rsync is a program that can synchronize two trees of
      files. The advantage is that rsync only transfers the
      differences in files, making it very fast. After syncing with a
      mirror you can upgrade Slackware Linux with
      <command>upgradepkg</command>, or make a new installation
      CD. The following example synchronizes a local current tree with
      an up-to-date tree from on a mirror:
    </para>

    <screen>
# <userinput>rsync -av --delete \
--exclude=slackware/kde \
--exclude=slackware/kdei \
--exclude=slackware/gnome \
--exclude=bootdisks \
--exclude=extra \
--exclude=testing \
--exclude=pasture \
--exclude=rootdisks \
--exclude=source \
--exclude=zipslack \
rsync://fill-in-mirror/pub/slackware/slackware-current/ \
/usr/share/mirrors/slackware-current</userinput>
    </screen>

    <para>
      The <parameter class="command">-a</parameter> parameter implies
      a few other options that try to make a copy that is as exact as
      possible (in terms of preserving symlinks, permissions and
      owners). The <parameter class="command">--delete</parameter>
      deletes files that are not available on the mirror anymore.  It
      is good idea to use this parameter, because otherwise your tree
      may get bloated very quickly with older package versions.  With
      the <parameter class="command">--exclude</parameter> parameter
      you can specify which files or directories should be ignored.
    </para>

    <para>
      After syncing the tree you can use <command>upgradepkg</command>
      to update your Slackware Linux installation. For example:
    </para>

    <screen>
# <userinput>upgradepkg /usr/share/mirrors/slackware-current/slackware/*/*.tgz</userinput>
    </screen>
  </sect1>

  <sect1 xml:id="chap-pkgmgmt-tagfiles">
    <title>Tagfiles</title>

    <sect2 xml:id="chap-pkgmgmt-tagfiles-intro">
      <title>Introduction</title>

      <para>
        Tagfiles are a relatively unknown feature of Slackware
        Linux. A tagfile is a file that can be used to instruct
        <command>installpkg</command> what packages should be
        installed from a collection of packages. For instance, the
        Slackware Linux installer generates a tagfile during the
        <emphasis>Expert</emphasis> and <emphasis>Menu</emphasis>
        installation methods to store which packages should be
        installed during the installation process.
      </para>

      <para>
        The nice aspect of tagfiles is that you can easily create
        tagfiles yourself. By writing your own tagfiles you can
        automate the package installation, which is ideal for larger
        client or server roll-outs (or smaller set-ups if it gives you
        more comfort than installing packages manually). The easiest
        way to create your own tagfiles is by starting out with the
        tagfiles that are part of the official Slackware Linux
        distribution. In the following sections we are going to look
        at how this is done.
      </para>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-tagfiles-creating">
      <title>Creating tagfiles</title>

      <para>
        Tagfiles are simple plain-text files. Each line consists of a
        package name and a flag, these two elements are separated by a
        colon and a space. The flag specifies what should be done with
        a package. The fields are described in <xref
        linkend="chap-pkgmgmt-tagfiles-creating-fields"/>.  Let's look
        at a few lines from the tagfile in the <quote>a</quote> disk
        set:
      </para>

      <screen>
aaa_base: ADD
aaa_elflibs: ADD
acpid: REC
apmd: REC
bash: ADD
bin: ADD
      </screen>

      <para>
        It should be noted that you can also add comments to tagfiles
        with the usual comment (#) character. As you can see in the
        snippet above there are different flags. The table listed
        below describes the four different flags.
      </para>

      <table xml:id="chap-pkgmgmt-tagfiles-creating-fields">
        <title>Tagfile fields</title>
        <tgroup cols="2" align="left" colsep="1" rowsep="1">
          <thead>
            <row>
              <entry>Flag</entry>
              <entry>Meaning</entry>
            </row>
          </thead>
          <tbody>
            <row>
              <entry>ADD</entry>
              <entry>A package marked by this flag will automatically
              be installed</entry>
            </row>
            <row>
              <entry>SKP</entry>
              <entry>A package marked by this flag will automatically
              be skipped</entry>
            </row>
            <row>
              <entry>REC</entry>
              <entry>Ask the user what to do, recommend installation
              of the package.</entry>
            </row>
            <row>
              <entry>OPT</entry>
              <entry>Ask the user what to do, the package will be
              described as optional.</entry>
            </row>
          </tbody>
        </tgroup>
      </table>

      <para>
        As you can read from the table <command>installpkg</command>
        will only act automatically when either
        <emphasis>ADD</emphasis> or <emphasis>SKP</emphasis> is used.
      </para>

      <para>
        It would be a bit tedious to write a tagfile for each
        Slackware Linux disk set. The official Slackware Linux
        distribution contains a tagfile in the directory for each disk
        set. You can use these tagfiles as a start. The short script
        listed below can be used to copy the tagfiles to the current
        directory, preserving the disk set structure.
      </para>

      <screen>
#!/bin/sh

if [ ! $# -eq 1 ] ; then
  echo "Syntax: $0 [directory]"
  exit
fi

for tagfile in $1/*/tagfile; do 
  setdir=`echo ${tagfile} | egrep -o '\w+/tagfile$' | xargs dirname`
  mkdir ${setdir}
  cp ${tagfile} ${setdir}/tagfile.org
  cp ${tagfile} ${setdir}
done
      </screen>

      <para>
        After writing the script to a file you can execute it, and
        specify a <filename>slackware/</filename> directory that
        provides the disk sets. For example:
      </para>

      <screen>
$ <command>sh copy-tagfiles.sh /mnt/flux/slackware-current/slackware</command>
      </screen>

      <para>
        After doing this the current directory will contain a
        directory structure like this, in which you can edit the
        individual tag files:
      </para>

      <screen>
a/tagfile
a/tagfile.org
ap/tagfile
ap/tagfile.org
d/tagfile
d/tagfile.org
e/tagfile
e/tagfile.org
[...]
      </screen>

      <para>
        The files that end with <emphasis>.org</emphasis> are backups,
        that you can use as a reference while editing
        tagfiles. Besides that they are also used in the script that
        is described in the next section.
      </para>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-tagfiles-autogen" >
      <title>Automatically generating tagfiles</title>

      <para>
        With a simple script, it is also possible to build tagfiles
        based on the packages that are installed on the current
        system. I owe thanks to Peter Kaagman for coming up with this
        nifty idea!
      </para>

      <para>
        First build a tagfile directory from the Slackware Linux
        installation media, as described in the previous section. When
        you have done that, you can create the following script:
      </para>

      <screen>
#!/bin/sh

if [ ! $# -eq 1 ] ; then
  echo "Syntax: $0 [directory]"
  exit
fi

for tforg in $1/*/tagfile.org ; do
  tf=${tforg%.org}
  rm -f ${tf}
  for package in $(grep -v '^#' ${tforg} | cut -d ':' -f 1) ; do
    if ls /var/log/packages/${package}-[0-9]* &amp;&gt; /dev/null ; then 
      echo "${package}: ADD" &gt;&gt; ${tf}
    else
      echo "${package}: SKP" &gt;&gt; ${tf}
    fi
  done
done
      </screen>

      <para>
        Suppose that you have saved it as
        <filename>build-tagfiles.sh</filename>, you can use it by
        specifying directory that holds the tagfiles as the first
        argument:
      </para>

      <screen>
$ <userinput>sh build-tagfiles.sh .</userinput>
      </screen>

      <para>
        The script will mark packages that are installed as
        <emphasis>ADD</emphasis>, and packages that are not installed
        as <emphasis>SKP</emphasis>.
      </para>
    </sect2>

    <sect2 xml:id="chap-pkgmgmt-tagfiles-using">
      <title>Using tagfiles</title>

      <para>
        On an installed system you can let
        <command>installpkg</command> use a tagfile with the
        <parameter class="command">-tagfile</parameter> parameter. For
        example:
      </para>

      <screen>
# <userinput>installpkg -infobox -root /mnt-small -tagfile a/tagfile /mnt/flux/slackware-current/slackware/a/*.tgz</userinput>
      </screen>

      <note>
	<para>
	  You have to use the <parameter
	  class="command">-infobox</parameter> option, otherwise the
	  tagfiles will not be used.
	</para>
      </note>

      <para>
        Of course, tagfiles would be useless if they cannot be used
        during the installation of Slackware Linux. This is certainly
        possible: after selecting which disk sets you want to install
        you can choose in what way you want to select packages (the
        dialog is named <emphasis>SELECT PROMPTING
        MODE</emphasis>. Select <emphasis>tagpath</emphasis> from this
        menu. You will then be asked to enter the path to the
        directory structure with the tagfiles.  The usual way to
        provide tagfiles to the Slackware Linux installation is to put
        them on a floppy or another medium, and mounting this before
        or during the installation. E.g. you can switch to the second
        console with by pressing the &lt;ALT&gt; and &lt;F2&gt; keys,
        and create a mount point and mount the disk with the tagfiles:
      </para>

      <screen>
# <userinput>mkdir /mnt-tagfiles</userinput>
# <userinput>mount /dev/fd0 /mnt/mnt-tagfiles</userinput>
      </screen>

      <para>
        After mounting the disk you can return to the virtual console
        on which you run <command>setup</command>, by pressing
        &lt;ALT&gt; and &lt;F1&gt;.
      </para>
    </sect2>
  </sect1>
</chapter>
