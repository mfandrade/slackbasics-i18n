<!-- $Id: ipsec.xml 315 2007-09-21 15:26:04Z danieldk $ -->

<chapter id="ipsec"> <?dbhtml filename="ipsec.html"?>
  <title>IPsec</title>

  <sect1>
    <title>Teoria</title>

    <para>
      <acronym>IPsec</acronym> es un estándar para asegurar la
      comunicación IP a través de autenticación y encripción. Además
      puede comprimir paquetes, reduciendo el tráfico. Los siguientes
      protocoles son parte del estándar IPsec:
    </para>

    <itemizedlist>
      <listitem>
        <para>
	  <acronym>AH</acronym> (Authentication Header) provee
	  garantía de autenticidad para los paquetes
	  transportados. Esto se hace realizando sumas de verificación
	  (checksum) a los paquetes usando un algoritmo
	  criptográfico. Si la suma de verificación es correcta, el
	  receptor puede asegurar que el paquete no fue modificado y
	  que el paquete recibido es el mismo originado desde el
	  emisor (ya que las llaves son solamente conocidas por el
	  emisor y el receptor).
        </para>
      </listitem>
      <listitem>
        <para>
	  <acronym>ESP</acronym> (Encapsulating Security Payload) es
	  usado para encriptar paquetes. Esto hace confidencial el
	  contenido del paquete, además de ser solamente leíble desde
	  el host con la llave de desencripción correcta.
        </para>
      </listitem>
      <listitem>
        <para>
          <acronym>IPcomp</acronym> (IP payload compression) provee
          compresión antes de que un paquete sea encriptado. Esto es
          útil, porque la información encriptada se comprime peor que
          la información sin encriptar.
        </para>
      </listitem>
      <listitem>
        <para>
	  <acronym>IKE</acronym> (Internet Key Exchange) provee los
	  medios para negociar llaves en secreto. Por favor note que
	  IKE es opcional, las llaves pueden ser configuradas
	  manualmente.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Actualmente existen dos modos de operación: <emphasis>transport
      mode</emphasis> es usado para encriptar conexiones normales
      entre dos hosts, <emphasis>tunnel mode</emphasis> encapsula el
      paquete original en una nueva cabecera. En este capítulo vamos a
      ver el transport mode, porque el objetivo primario de este
      capítulo es mostrar cómo configurar una conexión segura entre
      dos hosts.
    </para>

    <para>
      También existen dos métodos principales de autenticación. Puede
      usar llaves manuales o un daemon Internet Key Exchange (IKE),
      como racoon, que automáticamente intercambia llaves de forma
      segura entre dos hosts. En ambos casos se necesita configurar
      políticas de seguridad en la entradas de Security Association
      Database (SAD), que especifica qué algoritmo de encriptado y
      llave debería ser usado para asegurar la comunicación con otro
      host. Si usted usa un daemon IKE, las asociaciones de seguridad
      son automáticamente establecidas.
    </para>
  </sect1>

  <sect1>
    <title>Configuración en Linux</title>

    <para>
      El soporte nativo de IPsec solamente está disponible en kernels
      Linux 2.6.x. Kernels anteriores no tienen soporte
      IPsec. Entonces, asegúrese de tener un kernel 2.6.x. El kernel
      2.6 esta disponible en Slackware Linux 10.0, 10.1 y 10.2 en del
      directorio <filename>testing</filename> del conjunto de CDs, o
      en cualquier mirror oficial de Slackware Linux. El kernel 2.6
      es el kernel por defecto a partir de Slackware Linux 12.0. El
      kernel 2.6 de Slackware Linux tiene soporte de AH, ESP e IPcomp
      para los protocoles IPv4 e IPv6. Si usted está compilando un
      kernel personalizado, habilite al menos las siguientes opciones
      en su configuración del kernel:
    </para>

    <screen>
CONFIG_INET_AH=y
CONFIG_INET_ESP=y
CONFIG_INET_IPCOMP=y
    </screen>

    <para>
      También puede compilar el soporte para protocoles IPsec como
      módulo:
    </para>

    <screen>
CONFIG_INET_AH=m
CONFIG_INET_ESP=m
CONFIG_INET_IPCOMP=m
    </screen>


    <para>
      En este capítulo solamente vamos a usar transformaciones AH y
      ESP, pero no es una mala idea habilitar la transformación IPcomp
      para configuraciones posteriores de IPsec. Además del soporte
      para protocolos IPsec, tiene que compilar el soporte del kernel
      para algoritmos de encriptado y hashing que serán usados por AH
      y ESP. El soporte o módulo Linux para estos algoritmos puede
      habilitarse alterando las opciones
      <emphasis>CONFIG_CRYPTO</emphasis>. No cuesta nada compilar
      todos los algoritmos de cifrado y hashing como un módulo.
    </para>

    <para>
      Cuando usted elige compilar el soporte IPsec como un módulo, debe 
      asegurarse que los módulos requeridos sean cargados. Por ejemplo, 
      si usted va a usar ESP para conexiones IPv4, cargue el módulo 
      <emphasis>esp4</emphasis>.
    </para>

    <para>
      Compile el kernel de forma normal y reinicie.
    </para>
  </sect1>

  <sect1>
    <title>Instalando las IPsec-tools</title>    
    <para>
      El siguiente paso es instalar las herramientas <ulink
      url="http://ipsec-tools.sourceforge.net">IPsec-Tools</ulink>.
      Estas herramientas son adaptaciones de las utilidades IPsec
      <ulink url="http://www.kame.net">KAME</ulink>. Descargue las
      últimas fuentes y desempáquelas, luego configure e instálelas:
    </para>

    <screen>
# <command>tar jxf ipsec-tools-x.y.z.tar.bz2</command>
# <command>cd ipsec-tools-x.y.z</command>
# <command>CFLAGS="-O2 -march=i486 -mcpu=i686" \
  ./configure --prefix=/usr \
              --sysconfdir=/etc \
              --localstatedir=/var \
              --enable-hybrid \
              --enable-natt \
              --enable-dpd \
              --enable-frag \
              i486-slackware-linux</command>
# <command>make</command>
# <command>make install</command>
    </screen>

      <para>
	Reemplace <emphasis>x.y.z</emphasis> con la versión de las
	fuentes descargadas. Los parámetros mas notables que se
	especifican durante la configuración de las fuentes son:
      </para>

      <itemizedlist>
        <listitem>
	  <para>
	    <emphasis>--enable-dpd</emphasis>: habilita el dead peer
	    detection (DPD). DPD es un método para detectar si alguno
	    de los hosts incluídos en las asociaciones de seguridad es
	    inaccesible. Cuando este es el caso, las asociaciones de
	    seguridad para ese host pueden ser eliminadas.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <emphasis>--enable-natt</emphasis>: habilita NAT traversal
	    (NAT-T). Ya que NAT altera las cabeceras IP, esto causa
	    problemas para la garantía de autenticidad de un paquete.
	    NAT-T es un método que ayuda a superar este problema. La
	    configuración de NAT-T esta mas allá del alcance de este
	    artículo.
	  </para>
	</listitem>
      </itemizedlist>
  </sect1>

  <sect1>
    <title>Configurando IPsec con llaves manuales</title>

    <sect2>
      <title>Introducción</title>

      <para>
	Usaremos un ejemplo como guía para configurar una conexión
	encriptada entre dos hosts. Los hosts tienen las direcciones
	IP <emphasis>192.168.1.1</emphasis> y
	<emphasis>192.168.1.169</emphasis>. El modo de operación
	<quote>transport mode</quote> será usado con las
	transformaciones AH y ESP con llaves manuales.
      </para>
      
    </sect2>

    <sect2>
      <title>Escribiendo el archivo de configuración</title>

      <para>
	El primer paso es escribir un archivo de configuración que
	nombraremos <filename>/etc/setkey.conf</filename>. En el
	primer host (192.168.1.1) la siguiente configuración
	<filename>/etc/setkey.conf</filename> será usada:
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

add 192.168.1.1 192.168.1.169 ah 0x200 -A hmac-md5 
0xa731649644c5dee92cbd9c2e7e188ee6;
add 192.168.1.169 192.168.1.1 ah 0x300 -A hmac-md5 
0x27f6d123d7077b361662fc6e451f65d8;

add 192.168.1.1 192.168.1.169 esp 0x201 -E 3des-cbc 
0x656c8523255ccc23a66c1917aa0cf30991fce83532a4b224;
add 192.168.1.169 192.168.1.1 esp 0x301 -E 3des-cbc
0xc966199f24d095f3990a320d749056401e82b26570320292

spdadd 192.168.1.1 192.168.1.169 any -P out ipsec
           esp/transport//require
           ah/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P in ipsec
           esp/transport//require
           ah/transport//require;
      </screen>

      <para>
	La primera línea (la línea que termina en <quote>;</quote>)
	agrega una llave para la suma de verificación de la cabecera
	para paquetes emitidos desde 192.168.1.1 hacia
	192.168.1.169. La segunda línea hace lo mismo para paquetes
	emitidos desde 192.168.1.169 hacia 192.168.1.1. La líneas
	tercera y cuarta definen las llaves para la encriptación de
	datos de la misma forma en que las dos primeras líneas lo
	hacen. Finalmente las líneas <quote>spadd</quote> definen dos
	políticas, los paquetes emitidos desde 192.168.1.1 hacia
	192.168.1.169 deberían (requerir) ser codificados (esp) y
	<quote>firmados</quote> con la cabecera de autorización. La
	segunda política es para paquetes entrantes y es la misma que
	para paquetes salientes.
      </para>

      <para>
	Por favor sea consciente de que no debería usar estas llaves,
	sino sus propias llaves únicas secretamente alojadas. Puede
	generar estas llaves usando el dispositivo
	<filename>/dev/random</filename>:
      </para>

      <screen>
# <command>dd if=/dev/random count=16 bs=1 | xxd -ps</command>
      </screen>

      <para>
	Este comando usa dd para generar 16 bytes desde
	<filename>/dev/random</filename>. No olvide agregar
	<quote>0x</quote> al inicio de la línea en los archivos de
	configuración. Puede usar los 16 bytes (128 bits) para el
	algoritmo hmac-md5 que es usado para AH. El algoritmo 3des-cbc
	que es usado para ESP en el ejemplo debería usar una llave de
	24 bytes (192 bits). Estas llaves pueden ser generadas con:
      </para>

      <screen>
# <command>dd if=/dev/random count=24 bs=1 | xxd -ps</command>
      </screen>  

      <para>
	Asegúrese de que el archivo
	<filename>/etc/setkey.conf</filename> solamente puede ser
	leído por el usuario root. Si usuarios normales pueden leer
	las llaves provistas por IPsec, no habría seguridad en
	absoluto. Puede restringir el acceso a este archivo con:
      </para>

      <screen>
# <command>chmod 600 /etc/setkey.conf</command>
      </screen>

      <para>
	El mismo <filename>/etc/setkey.conf</filename> puede ser
	creado en el host 192.168.1.9, con las opciones <parameter
	class="command">-P in</parameter> y <parameter
	class="command">-P out</parameter> invertidas. Entonces,
	<filename>/etc/setkey.conf</filename> se vería así:
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

add 192.168.1.1 192.168.1.169 ah 0x200 -A hmac-md5
0xa731649644c5dee92cbd9c2e7e188ee6;
add 192.168.1.169 192.168.1.1 ah 0x300 -A hmac-md5
0x27f6d123d7077b361662fc6e451f65d8;

add 192.168.1.1 192.168.1.169 esp 0x201 -E 3des-cbc
0x656c8523255ccc23a66c1917aa0cf30991fce83532a4b224;
add 192.168.1.169 192.168.1.1 esp 0x301 -E 3des-cbc
0xc966199f24d095f3990a320d749056401e82b26570320292

spdadd 192.168.1.1 192.168.1.169 any -P in ipsec
           esp/transport//require
           ah/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P out ipsec
           esp/transport//require
           ah/transport//require;
      </screen>
    </sect2>

    <sect2>
      <title>Activando la configuración IPsec</title>

      <para>
	La configuración IPsec puede ser activada con el comando
	<command>setkey</command>:
      </para>

      <screen>
# <command>setkey -f /etc/setkey.conf</command>
      </screen>

      <para>
	Si quisiera habilitar IPsec permanentemente, puede agregar la
	siguiente línea a <filename>/etc/rc.d/rc.local</filename> en
	ambos hosts:
      </para>

      <screen>
/usr/sbin/setkey -f /etc/setkey.conf
      </screen>

      <para>
	Después de configurar IPsec, puede probar la conexión
	ejecutando <command>tcpdump</command> y simultáneamente
	<command>ping</command> hacia el otro host. Puede ver si AH y
	ESP estan actualmente siendo usados a través de la salida de
	<command>tcpdump</command>:
      </para>

      <screen>
# <command>tcpdump -i eth0</command>
tcpdump: listening on eth0
11:29:58.869988 terrapin.taickim.net > 192.168.1.169: AH(spi=0x00000200,seq=0x40f): ESP(spi=0x00000201,seq=0x40f) (DF)
11:29:58.870786 192.168.1.169 > terrapin.taickim.net: AH(spi=0x00000300,seq=0x33d7): ESP(spi=0x00000301,seq=0x33d7)
      </screen>
      
    </sect2>

  </sect1>
  
  <sect1>
    <title>Configuración IPsec con intercambio automático de llaves</title>

    <sect2>
      <title>Introducción</title>
    
      <para>
	El tema de intercambio automático de llaves (IKE) ya fue
	mencionado en la introducción de este capítulo. Simplificando,
	IPsec con IKE funciona con los siguientes pasos.
      </para>
      
      <orderedlist>
        <listitem>
	  <para>
	    Algún proceso en el host quiere conectarse a otro host. El
	    kernel verifica si existe alguna política de seguridad
	    habilitada para el host remoto. Si ya existe una
	    asociación de seguridad correspondiente a la política, la
	    conexión puede realizarse y será autenticada, encriptada
	    y/o comprimida de acuerdo a la asociación de seguridad. Si
	    no existe asociación de seguridad alguna, el kernel
	    pedirá a un daemon IKE instalar las asociaciones de
	    seguridad necesarias.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Durante la primera fase del intercambio de llaves, el
	    daemon IKE tratará de verificar la autenticidad del host
	    remoto. Esto se hace usualmente con una llave o
	    certificado previamente compartido. Si la autenticación es
	    exitosa, se instala un canal seguro entre ambos hosts,
	    usualmente llamada una asociación se seguridad IKE, para
	    continuar el intercambio de llaves.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Durante la segunda fase del intercambio de llaves, las
	    asociaciones de seguridad para la comunicación con el host
	    remoto se instalan. Esto incluye la selección del
	    algoritmo de encriptado y la generación de las llaves
	    usadas para la encripción de la comunicación.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    En este punto el primer paso se repite de nuevo, pero ya
	    que ahora existen asociaciones de seguridad la
	    comunicación puede proceder.
	  </para>
	</listitem>
      </orderedlist>
      
      <para>
	El daemon IKE <command>racoon</command> está incluído con las
	herramientas KAME IPsec, las secciones a seguir explican el
	uso de racoon.
      </para>
    </sect2>
    
    <sect2>
      <title>Usando racoon con una llave pre-compartida</title>
      
      <para>
	Como es usual, el primer paso para configurar IPsec es definir
	políticas de seguridad. En contraste al ejemplo de llaves
	manuales no debería configurar asociaciones de seguridad,
	porque racoon lo hará por usted. Usaremos los mismos hosts
	(con las mismas IPs) del ejemplo anterior. Las reglas de la
	política de seguridad se ven así:
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

spdadd 192.168.1.1 192.168.1.169 any -P out ipsec
	esp/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P in ipsec
	esp/transport//require;
      </screen>

      <para>
        Probablemente habrá notado que las políticas AH no estan
        presentes en este archivo. En la mayoría de las situaciones
        esto no es un problema, ESP puede proveer autenticación. Pero
        debería estar consciente de que la autenticación es mas
        limitada; no protege la información fuera de las cabeceras
        ESP. Pero es mas eficiente que el encapsulado de paquetes ESP
        en AH.
      </para>

      <para>
	Con las políticas de seguridad configuradas, ahora puede
	configurar <command>racoon</command>. La información
	específica de la conexión, como el método de autenticación, es
	especificada durante la primera fase de configuración. Podemos
	usar una segunda fase general de configuración. También es
	posible realizar configuraciones específicas para ciertos
	hosts en la segunda fase. Pero generalmente hablando una
	configuración general es suficiente en configuraciones
	simples. También agregaremos ubicaciones para la llave
	pre-compartida y un directorio de certificación. Este es un
	ejemplo de <filename>/etc/racoon.conf</filename> con las
	ubicaciones y una fase dos general para la configuración de
	políticas:
      </para>

      <screen>
path pre_shared_key "/etc/racoon/psk.txt";
path certificate "/etc/racoon/certs";

sainfo anonymous {
{
	pfs_group 2;
	lifetime time 1 hour;
	encryption_algorithm 3des, blowfish 448, rijndael;
	authentication_algorithm hmac_sha1, hmac_md5;
	compression_algorithm deflate;
}
      </screen>

      <para>
	El identificador <parameter>sainfo</parameter> es usado para
	crear un bloque que especifica las configuraciones para las
	asociaciones de seguridad. En vez de asignarlo para un host
	específico, el parámetro <parameter>anonymous</parameter> es
	usado para especificar que estas configuraciones deberían ser
	usadas para todos los hosts que no tienen una configuración
	específica. El parámetro <parameter>pfs_group</parameter>
	especifica qué grupo de exponenciales Diffie-Hellman deberían
	ser usado. Los diferentes grupos proveen diferentes longitudes
	de números primos base que son usados para el proceso de
	autenticación. El grupo 2 provee una longitud de 1024 bits, si
	quisiera usar una longitud mayor para incrementar la
	seguridad, puede usar otro grupo (como el 14 para una longitud
	de 2048 bits). El parámetro
	<parameter>encryption_algorithm</parameter> especifica qué
	algoritmo de encriptado será usado por este host para la
	encripción ESP. El parámetro
	<parameter>authentication_algorithm</parameter> especifica el
	algoritmo a ser usado para la autenticación ESP o
	AH. Finalmente, el parámetro
	<parameter>compression_algorithm</parameter> es usado para
	especificar qué algoritmo de compresión debería ser usado
	cuando IPcomp es especificado en una asociación.
      </para>

      <para>
	El siguiente paso es agregar una configuración fase uno para
	el intercambio de llaves con el host remoto al archivo de
	configuración <filename>racoon.conf</filename>. Por ejemplo:
      </para>

      <screen>
remote 192.168.1.169 
{
	exchange_mode aggressive, main;
	my_identifier address;
	proposal {
		encryption_algorithm 3des;
		hash_algorithm sha1;
		authentication_method pre_shared_key;
		dh_group 2;
	}
}
      </screen>

      <para>
	El bloque <parameter>remote</parameter> especifica una
	configuración de fase
	uno. <parameter>exchange_mode</parameter> es usado para
	configurar qué modo de intercambio debería ser usado por fase.
	Puede especificar mas de un modo de intercambio, pero el
	primer método es usado si este host es el iniciador del
	intercambio de llaves. La opción
	<parameter>my_identifier</parameter> especifica qué
	identificador debería ser enviado al host remoto. Si esta
	opción es omitida, <parameter>address</parameter> es usado, el
	cual envía la dirección IP como identificador. El bloque
	<parameter>proposal</parameter> especifica parámetros que
	serán propuestos al host remoto durante la fase de
	autenticación. <parameter>encryption_algorithm</parameter> y
	<parameter>dh_group</parameter> están explicados arriba. La
	opción <parameter>hash_algorithm</parameter> es obligatoria y
	configura el algoritmo hash que será usado. Puede ser
	<parameter>md5</parameter>o <parameter>sha1</parameter>.
	<parameter>authentication_method</parameter> es crucial para
	esta configuración, ya que es usado para especificar que una
	llave pre-compartida debería ser usada con
	<parameter>pre_shared_key</parameter>.
      </para>

      <para>
	Con racoon configurado, queda una cosa por hacer, la llave
	pre-compartida deber ser agregada a
	<filename>/etc/racoon/psk.txt</filename>. La sintaxis es muy
	simple, cada línea contiene una dirección IP y una
	llave. Estos parámetros están separados con una
	tabulación. Por ejemplo:
      </para>

      <screen>
192.168.1.169	somekey
      </screen>
    </sect2>

    <sect2>
      <title>Activando la configuración IPsec</title>

      <para>
	En este punto, la configuración de las políticas de seguridad y 
	racoon está completa y puede empezar a probar la configuración. Es 
	recomendable iniciar <command>racoon</command> con el parámetro
        <parameter class="command">-F</parameter>. Esto ejecutará 
	<command>racoon</command> en segundo plano, facilitando la 
	captura de mensajes de error:
      </para>

      <screen>
# <command>setkey -f /etc/setkey.conf</command>
# <command>racoon -F</command>
      </screen>

      <para>
	Ahora que ha agregado las políticas de seguridad a la base de datos 
	de políticas y ha iniciado <command>racoon</command>, puede probar 
	su configuración IPsec. 

	Por ejemplo, podría realizar un ping al host remoto para empezar. 
	La primera vez que contacte al otro host, esto fallará:
      </para>

      <screen>
$ <command>ping 192.168.1.169</command>
connect: Resource temporarily unavailable
      </screen>

      <para>
	La razón para esto es que las asociaciones de seguridad tienen
	que ser instaladas. Pero el paquete ICMP activará el
	intercambio de llaves. Puede verificar si el intercambio fué
	exitoso o no revisando los mensajes de log de
	<command>racoon</command> en
	<filename>/var/log/messages</filename>, o la salida en la
	terminal si es que inició <command>racoon</command> en
	segundo plano. Un intercambio exitoso de llaves se ve así:
      </para>

      <screen>
 Apr  4 17:14:58 terrapin racoon: INFO: IPsec-SA request for 192.168.1.169 queued due to no phase1 found.
 Apr  4 17:14:58 terrapin racoon: INFO: initiate new phase 1 negotiation: 192.168.1.1[500]&lt;=&gt;192.168.1.169[500] 
 Apr  4 17:14:58 terrapin racoon: INFO: begin Aggressive mode. 
 Apr  4 17:14:58 terrapin racoon: INFO: received Vendor ID: DPD 
 Apr  4 17:14:58 terrapin racoon: NOTIFY: couldn't find the proper pskey, try to get one by the peer's address.
 Apr  4 17:14:58 terrapin racoon: INFO: ISAKMP-SA established 192.168.1.1[500]-192.168.1.169[500] spi:58c4669f762abf10:60593eb9e3dd7406
 Apr  4 17:14:59 terrapin racoon: INFO: initiate new phase 2 negotiation: 192.168.1.1[0]&lt;=&gt;192.168.1.169[0] 
 Apr  4 17:14:59 terrapin racoon: INFO: IPsec-SA established: ESP/Transport 192.168.1.169-&gt;host1ip; spi=232781799(0xddff7e7) 
 Apr  4 17:14:59 terrapin racoon: INFO: IPsec-SA established: ESP/Transport 192.168.1.1-&gt;192.168.1.169 spi=93933800(0x59950e8) 
      </screen>

      <para>
	Después del intercambio de llaves, puede verificar que IPsec
	está correctamente configurado analizando los paquetes que
	salen e ingresan con
	<command>tcpdump</command>. <command>tcpdump</command> esta
	disponible en el conjunto de paquetes <emphasis>n</emphasis>.
	Suponga que la conexión saliente al host remoto pasa a través
	de la interfaz <emphasis>eth0</emphasis>, puede analizar los
	paquetes que pasan a través de la
	interfaz<emphasis>eth0</emphasis> con <command>tcpdump -i
	eth0</command>. Si los paquetes salientes estan encriptados
	con ESP, puede verlo en la salida de
	<command>tcpdump</command>. Por ejemplo:
      </para>

      <screen>
# <command>tcpdump -i eth0</command>
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
17:27:50.241067 IP terrapin.taickim.net &gt; 192.168.1.169: ESP(spi=0x059950e8,seq=0x9)
17:27:50.241221 IP 192.168.1.169 &gt; terrapin.taickim.net: ESP(spi=0x0ddff7e7,seq=0x9)
      </screen>

    </sect2>
    
  </sect1>

</chapter>
