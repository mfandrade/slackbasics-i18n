<!-- $Id: concepts.xml 333 2007-10-21 17:20:54Z danieldk $ -->

<chapter id="concepts"> <?dbhtml filename="concepts.html"?>
  <title>Conceptos generales</title>

  <para>
    Este capítulo brinda una introducción a algunos conceptos
    generales sobre UNIX y GNU/Linux. Es importante leer este capítulo
    extensivamente si no tiene ninguna experiencia en UNIX ó
    GNU/Linux. Muchos conceptos cubiertos en este capítulo son usados
    en este libro y en GNU/Linux.
  </para>

  <sect1 id="concepts-multitasking">
    <title>Multitarea</title>

    <sect2 id="concepts-multitasking-intro">
      <title>Introducción</title>

      <para>
	Una de las fortalezas tradicionales de UNIX es ser multitarea.
	Multitarea quiere decir que múltiples programas pueden ser
	ejecutados al mismo tiempo. Usted podría preguntarse por qué
	esto es importante, ya que la mayoría de las personas utilizan
	solamente una aplicación a la vez. El ser multitarea es una
	necesidad vital para sistemas del tipo UNIX. Aún si no ha
	iniciado aplicación alguna, existen programas ejecutándose en
	segundo plano. Por ejemplo, algunos programas servicios de
	red, mientras otros muestran un mensaje de inicio de sesión y
	esperan hasta que el usuario inicie sesión en una terminal
	virtual. Los programas que se ejecutan en segundo plano son
	comúnmente denominados <emphasis>daemon processes</emphasis>.
        <footnote>
          <para>
            La palabra <emphasis>daemon</emphasis> no debería ser 
	    confundida con la palabra <emphasis>demon (demonio)</emphasis>, 
	    la palabra <emphasis>daemon</emphasis> se refiere a 
	    seres sobrenaturales de la mitología griega.
          </para>
        </footnote>.
      </para>
    </sect2>

    <sect2 id="concepts-multitasking-procsthreads">
      <title>Procesos e hilos</title>

      <para>
	Después de que un programa es cargado desde un medio de
	almacenamiento, una instancia del mismo es iniciada. Esta
	instancia es llamada <emphasis>proceso</emphasis>. Un proceso
	tiene su propia memoria protegida, denominada el
	<emphasis>espacio de direccionamiento de
	memoria</emphasis>. El espacio de direccionamiento de memoria
	tiene dos áreas importantes: el área de
	<emphasis>texto</emphasis> y el área de
	<emphasis>datos</emphasis>. El área de
	<emphasis>texto</emphasis> es el código actual del programa;
	es usado para decirle al sistema qué hacer. El área de
	<emphasis>datos</emphasis> es usada para almacenar constantes
	y datos de ejecución. El sistema operativo entrega a cada
	proceso un tiempo de ejecución. En sistemas de un solo
	procesador los procesos en realidad no se ejecutan
	simultáneamente. En realidad un administrador de tiempo en el
	kernel divide el tiempo de CPU entre los procesos, dando la
	sensación de que los procesos se ejecutan simultáneamente.
	Este proceso es llamado <emphasis>time-sharing</emphasis>
	(distribución de tiempo). En sistemas con más de un CPU, más
	de un proceso puede ejecutarse simultáneamente, pero el
	time-sharing todavía se utiliza para dividir el CPU disponible
	entre los procesos.
      </para>

      <para>
	Nuevos procesos son creados duplicando un proceso en ejecución
	con la llamada del sistema <command>fork</command>. <xref
	linkend="fork" /> muestra una llamada fork(bifurcar)
	esquemáticamente. El proceso padre ejecuta una llamada
	fork(). El kernel responderá a esta llamada duplicando el
	proceso, nombrando a uno de los procesos como
	<emphasis>padre</emphasis> y al otro
	<emphasis>hijo</emphasis>.
      </para>

      <figure id="fork">
        <title>Duplicando(bifurcando) un proceso</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/fork.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>
	La duplicación puede ser usada por un programa para crear dos
	procesos que pueden ejecutarse simultáneamente en máquinas
	multi-proceso. Sin embargo, esto no es siempre ideal, porque
	ambos procesos tendrán su propio espacio de direccionamiento
	de memoria. La duplicación inicial de la memoria del proceso
	toma relativamente mucho tiempo, y es difícil compartir datos
	entre dos procesos. Este problema es resuelto por un concepto
	denominado <emphasis>multithreading</emphasis>. Multithreading
	significa que múltiples instancias del área de texto pueden
	ejecutarse al mismo tiempo, compartiendo el área de
	datos. Estas instancias, denominadas threads (hilos) pueden ser
	ejecutadas en paralelo en múltiples CPUs.
      </para>
    </sect2>
  </sect1>

  <sect1 id="concepts-fshierarchy">
    <title>Jerarquía del sistema de archivos</title>

    <sect2 id="concepts-fshierarchy-structure">
      <title>Estructura</title>

      <para>
	Los sistemas operativos almacenan datos en sistemas de
	archivos. Un sistema de archivos es básicamente una
	estructura tipo-árbol de directorios que contienen archivos,
	como el sistema operativo, los programas de usuario y los
	datos de usuario. La mayoría de los sistemas de archivos
	pueden tambien almacenar metadatos sobre los archivos y
	directorios, por ejemplo fechas de acceso y modificación. En
	GNU/Linux hay una sola jerarquía del sistema de archivos, esto
	quiere decir que GNU/Linux no tiene letras de dispositivos
	(e.g. A:, C:, D:) para diferentes sistemas de archivos como
	DOS y Windows. El sistema de archivos se parece a un árbol,
	con un directorio raíz (que no tiene directorio padre),
	ramificaciones y hojas (directorios sin sub-directorios). El
	directorio raíz es siempre denotado con una barra
	(<quote>/</quote>). Los directorios se separan por el mismo
	caracter.
      </para>

      <figure id="filesystem-structure">
        <title>La estructura del sistema de archivos</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/fs-structure.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>
	<xref linkend="filesystem-structure"/> muestra la estructura
	de un sistema de archivos. Puede ver que el directorio raíz
	<filename>/</filename> tiene dos sub-directorios:
	<filename>bin</filename> y <filename>home</filename>. El
	directorio <filename>home</filename> tiene otros dos
	sub-directorios, <filename>joe</filename> y
	<filename>jack</filename>. El diagrama muestra la ruta
	completa de cada directorio. La misma notación es usada para
	archivos. Suponga que hay un archivo llamado
	<filename>memo.txt</filename> en el directorio
	<filename>/home/jack</filename>, la ruta completa de el
	archivo es <filename>/home/jack/memo.txt</filename>.
      </para>

      <para>
	Cada directorio tiene dos entradas especiales,
	<quote><filename>.</filename></quote> y
	<quote><filename>..</filename></quote>. La primera referencia
	al mismo directorio, la segunda al directorio padre. Estas
	entradas pueden ser usada para crear rutas relativas. Si esta
	trabajando en el directorio <filename>jack</filename>, puede
	referenciar al directorio <filename>/home/joe</filename> con
	<filename>../joe</filename>.
      </para>
    </sect2>

    <sect2 id="concepts-fshierarchy-mounting">
      <title>Montaje</title>

      <para>
	Se estará preguntando cómo es posible acceder a otros
	dispositivos o particiones además de la partición que contiene
	el sistema raíz. Linux utiliza la misma estrategia que UNIX
	para acceder a otros sistemas de archivo. Linux permite que el
	administrador del sistema conecte un dispositivo a cualquier
	directorio en la estructura del sistema de archivos. Este
	proceso es denominado <emphasis>montaje
	(mounting)</emphasis>. Por ejemplo, podría montar el
	dispositivo CD-ROM al directorio
	<filename>/cdrom</filename>. Si el montaje es correcto, los
	archivos en el CD-ROM pueden ser accesados a través de este
	directorio. El proceso de montaje es descrito en detalle en
	<xref linkend="basics-filesystem-mounting"/>.
      </para>
    </sect2>

    <sect2 id="concepts-fshierarchy-commondirs">
      <title>Directorios comunes</title>

      <para>
        La organización Filesystem Hierarchy Standard Group ha
        intentado crear un estándar que describe qué directorios
        deberían estar disponibles en un sistema
        GNU/Linux. Actualmente la mayoría de las distribuciones
        utilizan el estándar Filesystem Hierarchy Standard (FHS) como
        base. Esta sección describe algunos directorios obligados en
        sistemas GNU/Linux.
      </para>

      <para>
	Tome en cuenta que GNU/Linux no tiene un directorio separado
	para cada aplicación (como Windows). En vez de eso, los
	archivos se ordenan por función y tipo. Por ejemplo, los
	binarios para la mayoría de programas de usuario se almacenan
	en <filename>/usr/bin</filename>, y sus librerías en
	<filename>/usr/lib</filename>. Esta es una introducción corta
	de los directorios importantes en un sistema Slackware Linux:
      </para>


      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">/bin</emphasis>: binarios esenciales
            de usuario que deberían estar disponibles aún en el caso
            que <filename>/usr</filename> no esté montado.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/dev</emphasis>: archivos de dispositivo.
	    Estos son archivos especiales usados para acceder a ciertos 
	    dispositivos.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/etc</emphasis>: el directorio
            <filename>/etc</filename> contiene todos los archivos de
            configuración importantes.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/home</emphasis>: contiene los
            directorios home para usuarios individuales.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/lib</emphasis>: librerías
            esenciales del sistema (como glibc) y módulos del kernel.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/root</emphasis>: directorio home
            para el usuario <emphasis>root</emphasis>.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/sbin</emphasis>: binarios
            esenciales usados para la administración del sistema.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/tmp</emphasis>: un directorio
            público para archivos temporales.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/bin</emphasis>: almacena la
            mayoría de los binarios de usuario.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/lib</emphasis>: librerías no
            esenciales para el inicio del sistema.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/sbin</emphasis>: binarios no
            esenciales de administración del sistema.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/var</emphasis>: archivos de datos
            variables, como registros o bitácoras.
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="concepts-devices">
    <title>Dispositivos</title>

    <sect2 id="concepts-devices-intro">
      <title>Introducción</title>

      <para>
	En GNU/Linux virtualmente todo es representado como un
	archivo, incluyendo dispositivos. Cada sistema GNU/Linux tiene
	un directorio con archivos especiales, llamado
	<filename>/dev</filename>. Cada archivo en el directorio
	<filename>/dev</filename> representa un dispositivo on un
	pseudo-dispositivo. Un archivo de dispositivo tiene dos
	números especiales asociados, los números de dispositivo
	<emphasis>mayor</emphasis> y <emphasis>menor</emphasis>. El
	kernel sabe archivo de dispositivo es representado por estos
	números de dispositivos. El siguiente ejemplo muestra los
	números de dispositivo para el archivo de dispositivo
	<filename>/dev/zero</filename>:
      </para>

      <screen>
$ <command>file /dev/zero</command>
/dev/zero: character special (1/5)
      </screen>

      <para>
	El comando <command>file</command> puede ser usado para
	determinar el tipo de un archivo. Este archivo en particular
	es reconocido como un archivo de dispositivo que tiene
	<emphasis>1</emphasis> como número mayor de dispositivo y
	<emphasis>5</emphasis> como número menor de dispositivo.
      </para>

      <para>
	Si ha instalado el paquete de archivos fuente del kernel,
	puede encontrar una lista de todos los dispositivos
	importantes con sus números mayor y menor en
	<filename>/usr/src/linux/Documentation/devices.txt</filename>.
	Una lista actualizada está disponible en línea a través de los
	Linux Kernel Archives<footnote>
          <para>
            <ulink url="ftp://ftp.kernel.org/pub/linux/docs/device-list/" />
          </para>
        </footnote>.
      </para>

      <para>
	El kernel Linux maneja dos tipos de dispositivos: dispositivos
	<emphasis>character (caracter)</emphasis> y <emphasis>block
	(bloque)</emphasis>. Los dispositivos caracter pueden ser
	leídos byte por byte, los dispositivos de bloque no. Los
	dispositivos de bloque se leen bloque por bloque (por ejemplo
	4096 bytes por bloque). Si un dispositivo es de caracter o de
	bloque se determina por la naturaleza del dispositivo. Por
	ejemplo, la mayoría de los dispositivos de almacenamiento son
	dispositivos de bloque, y la mayoría de los dispositivos de
	entrada son dispositivos caracter. Los dispositivos de bloque
	tienen una ventaja distintiva, pueden ser cacheados. Esto
	significa que los bloquen comúnmente leídos o escritos se
	almacenan en un área especial de la memoria del sistema,
	denominada cache. La memoria es mucho mas rápida que la
	mayoría de los medios de almacenamiento, entonces se puede
	incrementar el rendimiento realizando operaciones de lectura y
	escritura de bloques comúnes en memoria. Por supuesto cambios
	eventuales tienen que ser escritos al medio de almacenamiento
	para reflejar los cambios que fueron hechos en cache.
      </para>
    </sect2>

    <sect2 id="concepts-devices-atascsi">
      <title>Dispositivos ATA y SCSI</title>

      <para>
        Hay dos tipos de dispositivos de bloque que veremos en
        detalle, por que es crucial entender el nombrado de estos
        dispositivos para el particionado y montaje de un disco
        duro. Casi todas las computadoras modernas con una
        arquitectura x86 utilizan discos ATA y CD-ROMs. Bajo Linux
        estos dispositivos son nombrados de la siguiente forma:
      </para>

      <screen>
/dev/hda - master device on the first ATA channel
/dev/hdb - slave device on the first ATA channel
/dev/hdc - master device on the second ATA channel
/dev/hdd - slave device on the second ATA channel
      </screen>

      <para>
	En la mayoría de las computadoras con un solo disco duro, el
	disco duro es el dispositivo maestro en el primer canal ATA
	(<filename>/dev/hda</filename>) y el CD-ROM es el dispositivo
	maestro en el segundo canal ATA. Las particiones del disco
	duro se nombran basados en el disco que las contiene con un
	número adicional. Por ejemplo, <filename>/dev/hda1</filename>
	es la primera partición del disco representado por el
	dispositivo de archivo <filename>/dev/hda</filename>.
      </para>

      <para>
        Discos duros y dispositivos de CD-ROM SCSE siguen otra
        convención de nombramiento. SCSI no es comúnmente usado en la
        mayoría de las máquinas de bajos recursos, pero medios USB y
        Serial ATA (SATA) son también representados como discos
        SCSI. La siguiente notación de dispositivo es utilizada para
        medios SCSI:
      </para>

      <screen>
/dev/sda - First SCSI disk
/dev/sdb - Second SCSI disk
/dev/sdc - Third SCSI disk
/dev/scd0 - First CD-ROM
/dev/scd1 - Second CD-ROM
/dev/scd2 - Third CD-ROM
      </screen>

      <para>
	Los nombres de particiones son construídos de la misma forma
	que con los discos ATA; <filename>/dev/sda1</filename> es la
	primera partición del primer disco SCSI.
      </para>

      <para>
	Si usted usa la implementación RAID del kernel de Linux, los
	volúmenes RAID se encuentran disponibles como
	<filename>/dev/mdn</filename>, donde <emphasis>n</emphasis> es
	el número de volumen, iniciando en 0.
      </para>
    </sect2>
  </sect1>
</chapter>
