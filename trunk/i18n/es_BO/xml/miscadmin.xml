<!-- $Id: miscadmin.xml 283 2007-09-18 20:14:31Z danieldk $ -->

<chapter id="sysadmin-misc"> <?dbhtml filename="miscadmin.html"?>
  <title>Miscellaneous</title>

  <sect1 id="sysadmin-misc-cron">
    <sect1info>
    <authorgroup>
      <author>
        <firstname>Murray</firstname>
	<surname>Stokely</surname>
	<contrib>Written by </contrib>
      </author>
    </authorgroup>

    <!-- You can modify the stylesheet to not display the above in
         print or HTML output.  It's just a way to keep things clear
	 in the source document. -->

    </sect1info>

    <title>Programando tareas con cron</title>

    <indexterm><primary>cron</primary></indexterm>
    <indexterm><primary>crontab file</primary></indexterm>
    <indexterm><primary>scheduling</primary><secondary>tasks</secondary></indexterm>

    <para>Slackware Linux incluye una implementación del clásico 
	demonio UNIX cron, que permite a los usuarios programar tareas 
	para su ejecución en intervalos regulares. Cada usuario puede 
	crear, remover, o modificar un archivo crontab individual. Este 
	archivo crontab especifica comandos o scripts a ser ejecutados 
	en intervalos de tiempo especificados. Líneas vacías o que 
	empiezan con numeral (<quote><literal>#</literal></quote>) 
	son ignoradas.</para>

    <para>Cada entrada en el archivo crontab debe contener 
	  6 campos separados por espacios. Estos campos son: 
	  minuto, hora, día, mes, día de la semana y comando. 
	  Los cinco campos iniciales pueden contener un valor 
	  de tiempo o el caracter especial <quote><literal>*</literal></quote>
	  para representar cualquier valor de tiempo para ese campo. 
	  Por ejemplo, para tener corriendo el comando <command>date</command> 
	  cada día a las 6:10 AM, la siguiente entrada puede ser usada.</para>

    <programlisting>10 6 * * * date</programlisting>

    <para>El crontab de un usuario puede ser visto con el 
	comando <command>crontab -l</command>. Para una introducción 
	mas detallada a la sintaxis de un archivo crontab, examinemos 
	el <emphasis>root</emphasis> crontab.</para>

    <screen># <userinput>crontab -l</userinput>
# If you don't want the output of a cron job mailed to you, you have to direct
# any output to /dev/null.  We'll do this here since these jobs should run
# properly on a newly installed system, but if they don't the average newbie
# might get quite perplexed about getting strange mail every 5 minutes. :^)
#
# Run the hourly, daily, weekly, and monthly cron jobs.
# Jobs that need different timing may be entered into the crontab as before,
# but most really don't need greater granularity than this.  If the exact
# times of the hourly, daily, weekly, and monthly cron jobs do not suit your
# needs, feel free to adjust them.
#
# Run hourly cron jobs at 47 minutes after the hour:
47<co id="co-crontab-1" /> *<co id="co-crontab-2" /> *<co id="co-crontab-3" /> *<co id="co-crontab-4" /> *<co id="co-crontab-5" /> /usr/bin/run-parts /etc/cron.hourly 1&gt; /dev/null<co id="co-crontab-6" />
#
# Run daily cron jobs at 4:40 every day:
40 4 * * * /usr/bin/run-parts /etc/cron.daily 1> /dev/null
#
# Run weekly cron jobs at 4:30 on the first day of the week:
30 4 * * 0 /usr/bin/run-parts /etc/cron.weekly 1> /dev/null
#
# Run monthly cron jobs at 4:20 on the first day of the month:
20 4 1 * * /usr/bin/run-parts /etc/cron.monthly 1> /dev/null</screen>


    <calloutlist>
      <callout arearefs="co-crontab-1">
        <para>El primer campo, <literal>47</literal>, especifica que 
          este trabajo debería ocurrir a los 47 minutos despues de la hora.</para>
      </callout>

      <callout arearefs="co-crontab-2">
        <para>El segundo campo, <literal>*</literal>, es un caracter especial,
          este trabajo debería ocurrir <emphasis>cada</emphasis> hora.</para>
      </callout>

      <callout arearefs="co-crontab-3">
        <para>El tercer campo, <literal>*</literal>, es un caracter especial,
          este trabajo debería ocurrir <emphasis>cada</emphasis> día.</para>
      </callout>

      <callout arearefs="co-crontab-4">
        <para>El cuarto campo, <literal>*</literal>, es un caracter especial,
          este trabajo debería ocurrir <emphasis>cada</emphasis> mes.</para>
      </callout>

      <callout arearefs="co-crontab-5">
        <para>El quinto campo, <literal>*</literal>, es un caracter especial,
		  este trabajo debería ocurrir <emphasis>cada</emphasis> día de la semana.</para>          
      </callout>

      <callout arearefs="co-crontab-6">
        <para>El sexto campo, <command>/usr/bin/run-parts
	  /etc/cron.hourly 1> /dev/null</command>, especifica 
	  el comando que debería ser ejecutado en la especificación 
	  de tiempo definida en los cinco primeros campos.</para>
      </callout>
    </calloutlist>

    <indexterm><primary>periodic scripts</primary></indexterm>
    <indexterm><primary>slocate</primary></indexterm>

    <para>El root crontab por defecto esta configurado para 
	  ejecutar scripts en <filename>/etc/cron.monthly</filename> de 
	  forma mensual, los scripts en <filename>/etc/cron.weekly</filename> 
	  de forma semanal, los scripts en <filename>/etc/cron.daily</filename> 
	  de forma diaria y los scripts en <filename>/etc/cron.hourly</filename> 
	  cada hora. Por esta razón no es estrictamente necesario para 
	  un administrador entender los trabajos internos de cron en absoluto. 
	  Con Slackware Linux, puede simplemente agregar un nuevo script en 
	  alguno de los directorios listados anteriormente para programar 
	  una nueva tarea periódica. De hecho, revisar esos directorios 
	  le data una buena idea del trabajo que Slackware Linux realiza 
	  detrás de escenas de forma regular para mantener cosas como la 
	  base de datos  <command>slocate</command> actualizada.</para>

  </sect1>

  <sect1 id="sysadmin-misc-hdparm">
    <title>Parámetros de disco duro</title>

    <indexterm><primary>hdparm</primary></indexterm>
    <indexterm><primary>DMA</primary><secondary>switching on</secondary></indexterm>

    <para>
	  Muchos discos modernos ofrecen varias características para 
	  incrementar el rendimiento y mejorar la integridad de disco. 
	  Muchas de estas características pueden ser personalizadas con el 
	  comando <command>hdparm</command>. Sea cuidadoso cambiando 
	  configuraciones de disco con esta utilidad, porque algunos cambios 
	  pueden dañar la información en su disco.
    </para>

    <para>
	  Puede obtener un resumen de las configuraciones activas para 
	  un disco proveyendo el nodo dispositivo del disco como parámetro 
	  para <command>hdparm</command>:
    </para>

    <screen>
# <command>hdparm /dev/hda</command>

/dev/hda:
 multcount    =  0 (off)
 IO_support   =  1 (32-bit)
 unmaskirq    =  1 (on)
 using_dma    =  1 (on)
 keepsettings =  0 (off)
 readonly     =  0 (off)
 readahead    = 256 (on)
 geometry     = 65535/16/63, sectors = 78165360, start = 0
    </screen>

    <para>
	  Una causa común para mal rendimiento de disco es que DMA no 
	  fue automáticamente usada por el kernel para un disco. DMA 
	  acelerará el rendimiento I/O y disminuirá el uso de CPU al 
	  hacer posible que el disco transfiera información del mismo 
	  a la memoria del sistema. Si DMA esta desactivado, el resumen 
	  de las configuraciones mostraría esta línea:
    </para>

    <screen>
using_dma    =  0 (off)
    </screen>

    <para>
	  Puede fácilmente activar DMA para este disco con el 
	  parámetro <parameter class="command">-d</parameter> de 
      <command>hdparm</command>:
    </para>

    <screen>
# <command>hdparm -d 1 /dev/hda</command>

/dev/hda:
 setting using_dma to 1 (on)
 using_dma    =  1 (on)
    </screen>

    <para>
	  Puede hacer esto durante cada inicio del sistema agregando 
	  el comando hdparm a <filename>/etc/rc.d/rc.local</filename>.
    </para>

    <para>
	  El parámetro <parameter class="command">-i</parameter> de 
	  <command>hdparm</command> es también muy útil, porque provee 
	  información detallada acerca del disco:
    </para>

    <screen>
# <command>hdparm -i /dev/hda</command>
/dev/hda:

 Model=WDC WD400EB-00CPF0, FwRev=06.04G06, SerialNo=WD-WCAAT6022342
 Config={ HardSect NotMFM HdSw>15uSec SpinMotCtl Fixed DTR>5Mbs FmtGapReq }
 RawCHS=16383/16/63, TrkSize=57600, SectSize=600, ECCbytes=40
 BuffType=DualPortCache, BuffSize=2048kB, MaxMultSect=16, MultSect=off
 CurCHS=16383/16/63, CurSects=16514064, LBA=yes, LBAsects=78163247
 IORDY=on/off, tPIO={min:120,w/IORDY:120}, tDMA={min:120,rec:120}
 PIO modes:  pio0 pio1 pio2 pio3 pio4 
 DMA modes:  mdma0 mdma1 mdma2 
 UDMA modes: udma0 udma1 udma2 udma3 udma4 *udma5 
 AdvancedPM=no WriteCache=enabled
 Drive conforms to: device does not report version: 

 * signifies the current active mode
    </screen>
  </sect1>

  <sect1 id="sysadmin-memory-hdparm">
    <title>Monitoreando uso de memoria</title>

    <para>
	  En algunas situaciones es útil diagnosticar información sobre cómo 
	  es usada la memoria. Por ejemplo, en un servidor que este rindiendo 
	  mal usted querria verificar si la escasez de RAM esta causando el uso 
	  de la memoria de intercambio, o tal vez esta iniciando un servicio de red 
	  y quiere hallar los parámetros óptimos de caching. Slackware Linux provee 
	  algunas herramientas que le ayudan a analizae cómo la memoria es usada.
    </para>

    <sect2 id="sysadmin-misc-memory-vmstat">
      <title>vmstat</title>

      <para>
	    <command>vmstat</command> es un comando que puede proveer 
		estadísticas sobre varias partes de la memoria virtual del sistema. 
		Sin parámetros extra <command>vmstat</command> provee un 
		resumen de algunas estadísticas relevantes:
      </para>

      <screen>
# <command>vmstat</command>
procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 0  0      0 286804   7912  98632    0    0   198     9 1189   783  5  1 93  1
      </screen>

      <para>
	    Ya que solamente estamos viendo el uso de memoria en esta sección, 
		solamente veremos a los cmapos <emphasis>memory</emphasis> y <emphasis>swap</emphasis>.
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <emphasis>swpd</emphasis>: La cantidad de memoria virtual siendo usada.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>free</emphasis>: La cantidad de memoria que no es usada en ese momento.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>buff</emphasis>: La cantidad de memoria usada como buffers.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>cache</emphasis>: La cantidad de memoria usada como caché.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>si</emphasis>: La cantidad de memoria que es intercambiada 
			desde el disco por segundo.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>si</emphasis>: La cantidad de memoria que es intercambiada 
			hacia el disco por segundo.
          </para>
        </listitem>
      </itemizedlist>

      <para>
	    Es a veces útil ver cómo el uso de memoria cambia durante el tiempo. 
		Puede agregar un intérvalo como parámetro a <command>vmstat</command> 
		para ejecutar <command>vmstat</command> continuamente, imprimiendo las 
		estadísticas actuales. Este intérvalo esta en segundos. Entonces, si 
		quiere obtener estadísticas actualizadas cada segundo, puede ejecutar:
      </para>

      <screen>
# <command>vmstat 1</command>
procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 2  0      0 315132   8832  99324    0    0   189    10 1185   767  5  1 93  1
 1  0      0 304812   8832  99324    0    0     0     0 1222  6881 24  8 68  0
 0  0      0 299948   8836  99312    0    0     0     0 1171  1824 41  9 49  0
 [...]
      </screen>

      <para>
	    Adicionalmente, puede decirle a <command>vmstat</command>, cuantas 
		veces debería devolver estas estadísticas (en vez de hacerla infinitamente). 
		Por ejemplo, si quisiera imprimir estas estadísticas cada dos segundos y 
		cinco veces en total, usted podría ejecutar <command>vmstat</command> 
		de la siguiente manera:
      </para>

      <screen>
# <command>vmstat 2 5</command>
procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 2  0      0 300996   9172  99360    0    0   186    10 1184   756  5  1 93  1
 0  1      0 299012   9848  99368    0    0   336     0 1293  8167 20  8 21 51
 1  0      0 294788  11976  99368    0    0  1054     0 1341 12749 14 11  0 76
 2  0      0 289996  13916  99368    0    0   960   176 1320 17636 22 14  0 64
 2  0      0 284620  16112  99368    0    0  1086   426 1351 21217 25 18  0 58
      </screen>
    </sect2>

  </sect1>

</chapter>
