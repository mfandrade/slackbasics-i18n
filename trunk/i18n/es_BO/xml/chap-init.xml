<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xml:id="chap-init">
  <title>Inicialización del sistema</title>

  <para>
    Este capítulo describe la inicialización de Slackware Linux. A lo
    largo de este camino describiremos varios archivos de
    configuración que son usados para manipular el proceso de
    inicialización.
  </para>

  <sect1 xml:id="chap-init-lilo">
    <title>El cargador de arranque (bootloader)</title>

    <para>
      Podría decirse que la pieza más importante de un sistema
      operativo es el kernel, El kernel administra los recursos de
      hardware y los procesos de software. El kernel es iniciado por
      algun pequó intermediario entre el sistema
      <acronym>BIOS</acronym> (Basic Input/Output System) y el kernel,
      llamado cargador de arranque. El bootloader maneja las
      complicaciones de cargar un kernel específico (o menos
      específico).
    </para>

    <para>
      La mayoría de los cargadores de arranque trabajan en dos
      etapas. La primera etapa carga la segunda etapa, la cual hace el
      trabajo verdadero.  El cargador de arranque es dividido en dos
      etapas en máquinas x86, porque el BIOS solamente carga un sector
      (el llamado sector de arranque) de 512 bytes.
    </para>

    <para>
      Slackware Linux usa el cargador de arranque
      <acronym>LILO</acronym> (LInux LOader). Este cargador de
      arranque esta en desarrollo desde 1992 y esta especificamente
      escrito para cargar el kernel Linux. Últimamente LILO ha sido
      reemplazado por <acronym>GRUB</acronym> (GRand Unified
      Bootloader) en la mayoría de las distribuciones GNU/Linux. GRUB
      esta disponible como un paquete extra en el medio de
      distribución de Slackware Linux.
    </para>

    <sect2 xml:id="chap-init-lilo-config">
      <title>Configuración de LILO</title>

      <para>
	LILO es configurado a través del archivo de configuración
	<filename>/etc/lilo.conf</filename>. Slackware Linux provee
	una sencilla herramienta para configurar LILO. Esta
	herramienta de configuración puede iniciarse con el comando
	<command>liloconfig</command> y esta descrito en el capítulo
	de instalación (<xref linkend="chap-install-installing" />).
      </para>

      <para>
	La configuración manual de LILO es bastante simple. El archivo
	de configuración de LILO usualmente empieza con algunas
	configuraciones globales:
      </para>

      <screen>
# Start LILO global section
boot = /dev/sda <co xml:id="liloconf-global-1" />
#compact        # faster, but won't work on all systems.
prompt <co xml:id="liloconf-global-2" />
timeout = 50 <co xml:id="liloconf-global-3" />
# Normal VGA console
vga = normal <co xml:id="liloconf-global-4" />
      </screen>

      <calloutlist>
	<callout arearefs="liloconf-global-1">
	  <para>
	    La opción <emphasis>boot</emphasis> especifica dónde
	    debería ser instalado el cargado de arranque. Si usted
	    quiere uar LILO como el principal cargador de arranque
	    para el arranque de Linux y/o otros sistemas operativos,
	    es recomendable instalar LILO en el <acronym>MBR</acronym>
	    (Master Boot Record) que usted usa para iniciar el
	    sistema. LILO es instalado en el MBR omitiendo el número
	    de partición, por ejemplo <filename>/dev/hda</filename> o
	    <filename>/dev/sda</filename>. Si quiere instalar LILO en
	    una partición específica, agregue un número de partición,
	    como <filename>/dev/sda1</filename>. Asegúrese de tener
	    otro cargador de arranque en el MBR o de activar la
	    partición usando <command>fdisk</command>. De otra forma
	    podría terminar con un sistema no arrancable.
	  </para>

	  <para>
	    Sea cauteloso si utiliza particiones con un sistema de
	    archivos XFS!. Escribir LILO en una partición XSF
	    sobreescribirá una parte del sistema de archivos. Si
	    utiliza un sistema de archivos root XFS
	    (<filename>/</filename>), cree un sistema de archivos
	    no-XFS <filename>/boot</filename> para instalar LILO, o
	    instálelo en el MBR.
	  </para>
	</callout>
	<callout arearefs="liloconf-global-2">
	  <para>
	    La opción <emphasis>prompt</emphasis> configurará LILO
	    para mostrar un menu de arranque. Desde este menú puede
	    seleccionar qué kernel o sistema operativo debería ser
	    iniciado. Si no tiene esta opción activada, todavía puede
	    acceder al menú del cargador de arranque presionando la
	    tecla &lt;Shift&gt; cuando el cargador de arranque es
	    iniciado.
            </para>
	</callout>
	<callout arearefs="liloconf-global-3">
	  <para>
	    El valor <emphasis>timeout</emphasis> especifica cuánto
	    tiempo LILO debería esperar antes de iniciar el kernel o
	    sistema operativo por defecto. El tiempo se especifica en
	    décimas de segundo, entonces en ejemplo anterior LILO
	    esperará 5 segundos antes de proceder con el arranque.
	  </para>
	</callout>
	<callout arearefs="liloconf-global-4">
	  <para>
	    Puede especificar que modo de video debería ser usado por
	    el kernel con la opción <emphasis>vga</emphasis>. Cuando
	    esto es configurado como <emphasis>normal</emphasis>, el
	    kernel usará el modo de texto 80x25 normal.
	  </para>
	</callout>
      </calloutlist>

      <para>
	Las opciones globales son seguidas por secciones que agregan
	kernels Linux u otros sistemas operativos. La mayoría de las
	secciones de kernel Linux se ven así:
      </para>

      <screen>
image = /boot/vmlinuz <co xml:id="co-liloconf-kernel-1" />
  root = /dev/sda5 <co xml:id="co-liloconf-kernel-2" /> 
  label = Slack <co xml:id="co-liloconf-kernel-3" />
  read-only <co xml:id="co-liloconf-kernel-4" />
      </screen>

      <calloutlist>
	<callout arearefs="co-liloconf-kernel-1">
	  <para>
	    La opción <emphasis>image</emphasis> especifica la imagen 
	    de kernel que debería ser cargada para item LILO.
	  </para>
	</callout>
	<callout arearefs="co-liloconf-kernel-2">
	  <para>
	    El parámetro <emphasis>root</emphasis> es pasado al kernel
	    y será usado por el kernel como el sistema de archivos
	    root (<filename>/</filename>).
	  </para>
	</callout>
	<callout arearefs="co-liloconf-kernel-3">
	  <para>
	    El texto <emphasis>label</emphasis> es usado como la
	    etiqueta para esta entrada en el menú de arranque de LILO.
	  </para>
	</callout>
	<callout arearefs="co-liloconf-kernel-4">
	  <para>
	    <emphasis>read-only</emphasis> especifica que el sistema
	    de archivos root debería ser montado en modo de solo
	    lectura. El sistema de archivos tiene que ser montado en
	    estado read-only para conducir un checkeo del sistema de
	    archivos.
	  </para>
	</callout>
      </calloutlist>
    </sect2>

    <sect2 xml:id="chap-init-lilo-installation">
      <title>Instalación de LILO</title>

      <para>
	LILO no lee el archivo <filename>/etc/lilo.conf</filename>
	durante la segunda fase. Entonces, tendrá que escribir los
	cambios al cargador de segunda fase cuando haya cambiado la
	configuración LILO. Esto es también necesario si instala un
	nuevo kernel en el sistema con el mismo nombre de archivo, ya
	que la posición del kernel en el disco puede haber cambiado.
	La reinstalación de LILO puede ser simplemente realizada con
	el comando <command>lilo</command>:
      </para>

      <screen>
# <command>lilo</command>
Added Slack26 *
Added Slack
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-init-init">
    <title>init</title>

    <para>
      Después de que el kernel es cargado e iniciado, se iniciará el
      comando <command>init</command>. <command>init</command> es el
      padre de todos los procesos, se hace cargo de los scripts de
      inicialización del sistema y del intercambio de las consolas de
      login a través de <command>agetty</command>. El comportamiento
      de <command>init</command> es configurado en
      <filename>/etc/inittab</filename>.
    </para>

    <para>
      El archivo <filename>/etc/inittab</filename> está muy bien
      documentado.  Especifica qué scripts deberían ser ejecutados por
      el sistema para diferentes niveles de ejecución. Un nivel de
      ejecución es un estado en el que el sistema se está
      ejecutando. Por ejemplo, el nivel de ejecución 1 es el modo de
      usuario singular y el nivel 3 es el modo multi-usuario. Daremos
      un corto vistazo línea por línea a
      <filename>/etc/inittab</filename> para ver como funciona:
    </para>

    <screen>
rc:2345:wait:/etc/rc.d/rc.M
    </screen>

    <para>
      Esta línea especifica que <command>/etc/rc.d/rc.M</command>
      debería ser iniciado cuando el sistema cambia al nivel de
      ejecución 2, 3, 4 o 5. La única línea que probablemente alguna
      vez tenga que tocar es la del nivel de ejecución por defecto:
    </para>

    <screen>
id:3:initdefault:
    </screen>

    <para>
      En este ejemplo el nivel de ejecución por defecto está en
      <emphasis>3</emphasis> (modo multi-usuario). Puede configurarlo
      a otro nivel reemplazanso 3 con el nuevo nivel de ejecución por
      defecto. El nivel de ejecución 4 puede ser particularmente
      interesante en máquinas de escritorio, ya que Slackware Linux
      tratará de iniciar el administrador de visualización GDM, KDM o
      XDM (en ese orden).  Estos administradores de visualización
      proveen un inicio de sesión gráfico y son respectivamente parte
      de GNOME, KDE y X11.
    </para>

    <para>
      Otra sección interesante son las líneas que especifican qué
      comando debería manejar una consola. Por ejemplo:
    </para>

    <screen>
c1:1235:respawn:/sbin/agetty 38400 tty1 linux
    </screen>

    <para>
      Esta línea especifica que <command>agetty</command> debería ser
      iniciado en <emphasis>tty1</emphasis> (la primera terminal
      virtual) en niveles de ejecución 1, 2, 3 y 5. El comando
      <command>agetty</command> abre el puerto tty y pregunta por un
      nombre de usuario. <command>agetty</command> entonces delegará
      el inicio de sesión a <command>login</command>. Como puede ver
      por las entradas, Slackware Linux solamente inicia una consola
      en el nivel de ejecución 6, nombrada <emphasis>tty6</emphasis>.
      Uno puede preguntarse qué pasa con <emphasis>tty0</emphasis>,
      <emphasis>tty0</emphasis> ciertamente existe y representa a la
      consola activa.
    </para>

    <para>
      Ya que <emphasis>/etc/inittab</emphasis> es el lugar correcto
      para generar instancias <command>agetty</command> para escuchar
      por logins, usted puede también dejar escuchando un puerto
      serial a una o mas instancias de agetty. Esto es especialmente
      útil cuando tiene una o mas terminales conectadas a una
      máquina. Puede agregar algo como la siguiente línea para iniciar
      una instancia <command>agetty</command> que escuche el
      puertoCOM1:
    </para>

    <screen>
s1:12345:respawn:/sbin/agetty -L ttyS0 9600 vt100
    </screen>
  </sect1>

  <sect1 xml:id="chap-init-initscripts">
    <title>Scripts de inicialización</title>

    <para>
      Como ya fue explicado en la sección <command>init</command>
      (<xref linkend="chap-init-init" />), <command>init</command>
      inicia algunos scripts que manejan diferentes niveles de
      ejecución. Estos scripts realizan trabajos y cambian
      configuraciones que son necesarias para un nivel de ejecución
      particular, pero también pueden iniciar otros scripts. Veamos un
      ejemplo desde <filename>/etc/rc.d/rc.M</filename>, el script que
      <command>init</command> ejecuta cuando el sistema cambia al
      nivel de ejecución multi-usuario:
    </para>

    <programlisting>
# Start the sendmail daemon:
if [ -x /etc/rc.d/rc.sendmail ]; then
  . /etc/rc.d/rc.sendmail start
fi
    </programlisting>

    <para>
      Estas líneas dicen <quote>ejecute <command>/etc/rc.d/rc.sendmail
      start</command> si <filename>/etc/rc.d/rc.sendmail</filename> es
      ejecutable</quote>. Esto indica la simplicidad de los scripts de
      inicialización de Slackware Linux. Diferentes funcionalidades,
      por ejemplo servicios de red, pueden ser apagados o encendidos
      cambiando la bandera de ejecución en el script de
      inicialización. Si el script de inicialización es ejecutable, el
      servicio será iniciado, de otra forma no. La asignación de
      banderas (permisos) de archivos esta descrita en <xref
      linkend="chap-filesystem-permissions-permbits" />, pero daremos
      un vistazo a un rápido ejemplo sobre como habilitar o
      deshabilitar sendmail.
    </para>

    <para>
      Para iniciar sendmail cuando el sistema inicia, ejecute:
    </para>

    <screen>
# <command>chmod +x /etc/rc.d/rc.sendmail</command>
    </screen>

    <para>
      Para deshabilitar el inicio de sendmail cuando el sistema se
      inicia, ejecute:
    </para>

    <screen>
# <command>chmod -x /etc/rc.d/rc.sendmail</command>
    </screen>

    <para>
      La mayoría de los scripts de inicialización específicos de un
      servicio aceptan tres parámetros para cambiar el estado del
      servicio: <emphasis>start</emphasis>,
      <emphasis>restart</emphasis> y <emphasis>stop</emphasis>. Estos
      parámetros son bastante descriptivos. Por ejemplo, si quisiera
      reiniciar sendmail, puede ejecutar:
    </para>

    <screen>
# <command>/etc/rc.d/rc.sendmail restart</command>
    </screen>

    <para>
      Si el script no es ejecutable, debe decirle a la consola de que
      quiere ejecutar el archivo con <command>sh</command>.  Por
      ejemplo:
    </para>

    <screen>
# <command>sh /etc/rc.d/rc.sendmail start</command>
    </screen>
  </sect1>

  <sect1 xml:id="chap-init-udev">
    <title>Hotplugging y administración de nodos de dispositivo</title>

    <para>
      Slackware Linux soporta hotplugging desde Slackware Linux
      9.1. Cuando está habilitado, el kernel pasa notificaciones sobre
      eventos de dispositivo a un comando userspace. Desde Slackware
      Linux 11.0, el conjunto de utilidades <command>udev</command>
      maneja estas notificaciones. <command>udev</command> también
      administra el directorio dinámico <filename>/dev</filename>.
    </para>

    <para>
      El modo de operación de <command>udev</command> para el manejo
      de hotplugging de dispositivos es bastante simple. Cuando un
      dispositivo es agregado al sistema, el kernel notifica un evento
      hotplug a los escuchadores del
      userspace. <command>udev</command> recibirá la notificación del
      dispositivo siendo agregado y ve si hay algún mapeo de módulo
      para el dispositivo. Si existe alguno, se carga automáticamente
      el módulo controlador de dispositivo apropiado.
      <command>udev</command> removerá el módulo cuando es notificado
      de la remoción del dispositivo y no hay mas dispositivos usando
      el módulo cargado.
    </para>

    <para>
      El subsistema udev es inicializado en
      <filename>/etc/rc.d/rc.S</filename> ejecutando el comando
      <command>/etc/rc.d/rc.udev start</command>.  Como con la mayoría
      de las funcionalidades, puede habilitar o deshabilitar udev
      cambiando la bandera de ejecución del script
      <filename>/etc/rc.d/rc.udev</filename> (véa <xref
      linkend="chap-init-initscripts" />).
    </para>

    <para>
      Si udev carga automáticamente módulos que usted no quiere
      cargar, puede agregar una <emphasis>lista negra
      (blacklist)</emphasis> en su configuración
      <command>modprobe</command> en el archivo
      <filename>/etc/modprobe.d/blacklist</filename>. Por ejemplo, si
      quisiera prevenir la carga del módulo
      <emphasis>8139cp</emphasis>, puede agregar la siguiente línea
      (actualmetne, este módulo ya es parte de la lista negra en
      Slackware Linux):
    </para>

    <screen>
blacklist 8139cp
    </screen>
  </sect1>

  <sect1 xml:id="chap-init-firmware">
    <title>Firmware de dispositivos</title>

    <sect2 xml:id="chap-init-firmware-introduction">
      <title>Introducción</title>

      <para>
	Algunos dispositivos de hardware requieren que el sistema
	cargue firmware. Firmware es una pieza de software usada para
	el control del hardware. Tradicionalmente, firmware era
	almacenado en la memoria ROM (read-only memory) o en medios no
	volátiles como memoria flash. De todas formas, muchos
	dispositivos nuevos usan memoria volátil para almacenar
	firmware, esto quiere decir que el firmware necesita ser
	recargado a la memoria del dispositivo cuando el sistema es
	reiniciado.
      </para>

      <para>
	Los controladores para dispositivos que requieren firmware
	tienen una tabla que lista los archivos firmware que
	necesitan.  Para cada archivo firmware que el controlador
	necesita lanzará un evento de adición de firmware. Si udev
	maneja los eventos de hotplugging, tratará de manejar ese
	evento. Las reglas udev contienen una entrada para los eventos
	de adición de firmware en
	<filename>/etc/udev/rules.d/50-udev.rules</filename>:
      </para>

      <programlisting>
# firmware loader
SUBSYSTEM=="firmware", ACTION=="add", RUN+="/lib/udev/firmware.sh"
      </programlisting>

      <para>
	Esto significa que sobre los eventos de adición de firmware,
	el script <filename>/lib/udev/firmware.sh</filename> debería
	ser ejecutado. Este script busca en los directorios
	<filename>/lib/firmware</filename> y
	<filename>/usr/local/lib/firmware</filename> por el firmware
	requerido. Si el archivo firmware existe, será cargado
	copiando el contenido del archivo a un nodo sysfs especial.
      </para>
    </sect2>

    <sect2 xml:id="chap-init-firmware-adding">
      <title>Agregando firmware</title>

      <para>
	Como fué descrito en la sección previa, algunos dispositivos
	de hardware requieren que el firmware sea cargado al hardware
	por el sistema operativo. Si este es el caso y el firmware no
	esta instalado, el kernel emitirá un mensaje de error cuando
	el driver para ese dispositivo sea cargado. Puede ver la
	salida del kernel con el comando <command>dmesg</command> o en
	el archivo <filename>/var/log/messages</filename>. Tal mensaje
	de error dice explícitamente que el firmware no pudo ser
	cargado, por ejemplo:
      </para>

      <screen>
ipw2100: eth1: Firmware 'ipw2100-1.3.fw' not available or load failed.
ipw2100: eth1: ipw2100_get_firmware failed: -2 
      </screen>

      <para>
	En este caso usted deberá encontrar el firmware para su
	dispositivo. Puede ser usualmente hallado buscando en la web
	por el chipset o controlador del dispositivo (en este case
	<emphasis>ipw2100</emphasis>) y el término literal
	<quote>firmware</quote>. El archivo firmware algunas veces
	contiene un archivo con instrucciones de
	instalación. Usualmente puede solamente copiar los archivos
	firmware a <filename>/lib/firmware</filename>.
      </para>

      <para>
	Después de instalar el firmware, puede recargar el controlador
	con <command>rmmod</command> y <command>modprobe</command>, o
	reiniciando el sistema.
      </para>
    </sect2>
  </sect1>

<!-- XXX - udev rules sections should be added here <sect2
     xml:id="chap-init-hotplug-hooks"> <title>Executing scripts on
     hotplug events</title>

      <para>
	One of the useful aspects of the hotplug scripts is that you
	can execute scripts when a device is added or removed. When a
	device event occurs, hotplug will execute all scripts with the
	<filename>.hotplug</filename> suffix in
	<filename>/etc/hotplug.d/&lt;class&gt;/</filename>, in which
	<emphasis>&lt;class&gt;</emphasis> denotes the class in which
	the device is in that caused the event. There most important
	classes are:
      </para>

      <table>
	<title>Hotplug device classes</title>

	<tgroup cols="2">
	  <thead>
	    <row>
	      <entry>Prefix</entry><entry>Description</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>default</entry>
	      <entry>Scripts for this device class are started
	      after any hotplug event.</entry>
	    </row>
	    <row>
	      <entry>ieee1394</entry>
	      <entry>IEEE1394/Firewire devices.</entry>
	    </row>
	    <row>
	      <entry>input</entry>
	      <entry>Input devices like keyboards and mice.</entry>
	    </row>
	    <row>
	      <entry>net</entry>
	      <entry>Network devices. Network devices will also
	      trigger bus-specific hotplug events.</entry>
	    </row>
	    <row>
	      <entry>pci</entry>
	      <entry>Devices on the PCI bus.</entry>
	    </row>
	    <row>
	      <entry>scsi</entry>
	      <entry>SCSI disks, CD-ROM and tape devices.</entry>
	    </row>
	    <row>
	      <entry>usb</entry>
	      <entry>Devices that use the USB bus.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Besides the device class, there is something some other
	convention that is worth observing: it is best to add a number
	and a dash as a prefix to the script, because this will allow
	you to order the priority of the scripts. For example,
	<filename>10-dosomething.hotplug</filename> will be executed
	before <filename>20-dosomething.hotplug</filename>.
      </para>

      <note>
	<para>
	  There is black no magic going on with the priority of the
	  script :^). <filename>/sbin/hotplug</filename> uses a
	  wildcard to loop through the scripts, and
	  <filename>10</filename> matches earlier than
	  <filename>20</filename>:
	</para>

	<programlisting>
for I in "${DIR}/$1/"*.hotplug "${DIR}/"default/*.hotplug ; do
	</programlisting>

	<para>
	  Hopefully this will give some taste of the power of shell
	  scripting.
	</para>
      </note>

      <para>
	Now, let's look at an example stub script, that does nothing
	besides outputting debug messages:
      </para>

      <programlisting>
#!/bin/sh

cd /etc/hotplug
. ./hotplug.functions

DEBUG=yes export DEBUG

debug_mesg "arguments ($*) env (`env`)"

case $ACTION in
  add|register)
    # Stub 
  ;;
  remove|unregister)
    # Stub 
  ;;
esac
      </programlisting>

      <para>
	By default, the hotplug scripts log at the
	<emphasis>notice</emphasis> level. The standard syslog
	configuration on Slackware Linux does not log this. To debug
	hotplugging scripts, it is best to change the logging
	level. You can do this by replacing the following line in
	<filename>/etc/hotplug/hotplug.functions</filename>:
      </para>

      <programlisting>
$LOGGER -t $(basename $0)"[$$]" "$@"
      </programlisting>

      <para>
	to:
      </para>

      <programlisting>
$LOGGER -p user.info -t $(basename $0)"[$$]" "$@"
      </programlisting>

      <para>
	After this change hotplug debug messages will be visible in
	<filename>/var/log/messages</filename>.
      </para>

      <para>
	As you can see the script makes use of the
	<emphasis>$ACTION</emphasis> variable to see what kind of
	hotplug action took place. Let's take a look at an example
	action when this script is used for handling USB events, and
	named <filename>10-stub.hotplug</filename>:
      </para>

      <screen>
Jul 19 16:13:23 mindbender 10-stub.hotplug[18970]: arguments (usb) env
(SUBSYSTEM=usb OLDPWD=/ DEVPATH=/devices/pci0000:00/0000:00:10.0/usb2/2-1/2-1.3/2-1.3:1.2
PATH=/bin:/sbin:/usr/sbin:/usr/bin ACTION=add PWD=/etc/hotplug HOME=/ SHLVL=2
DEVICE=/proc/bus/usb/002/009 PHYSDEVDRIVER=snd-usb-audio INTERFACE=1/2/0
PRODUCT=d8d/651/1 TYPE=0/0/0 DEBUG=yes PHYSDEVBUS=usb SEQNUM=1528 _=/usr/bin/env)
      </screen>

      <para>
	That is nice, when I plugged an USB device, the script gets
	loaded (a couple of times, this is just one of the interesting
	bits).  Actually, this is my USB Phone, which is represented
	as an USB audio device under GNU/Linux. The problem with USB
	audio devices is that the device volumes that are saved with
	<command>alsactl store</command> are not automatically set
	when the device is plugged. But right know we can easily
	execute <command>alsactl restore</command> when the device is
	plugged. Please note that the script gets very useful
	information through some environment variables.
      </para>

      <para>
	To solve the volume problem, we can create a script, say
	<filename>/etc/hotplug.d/usb/50-usb-audio-volume.hotplug</filename>,
	that looks like this:
      </para>

      <programlisting>
#!/bin/sh

cd /etc/hotplug
. ./hotplug.functions
# DEBUG=yes export DEBUG

debug_mesg "arguments ($*) env (`env`)"

case $ACTION in
  add|register)
    if [ $PHYSDEVDRIVER = "snd-usb-audio" ]; then
      /usr/sbin/alsactl restore
    fi
  ;;
  remove|unregister)
  ;;
  *)
    debug_mesg "Unknown action '$ACTION'"
  ;;
esac
      </programlisting>

      <para>
	Based on the environment variables this script can be refined
	to restrict running <command>alsactl</command> for specific
	USB audio devices.
      </para>
    </sect2>
-->
</chapter>
