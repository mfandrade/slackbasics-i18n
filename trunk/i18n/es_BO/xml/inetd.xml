<!-- $Id: inetd.xml 283 2007-09-18 20:14:31Z danieldk $ -->

<chapter> <?dbhtml filename="inetd.html"?>
<title>El Internet super server</title>

<sect1>
<title>Introducción</title>

<para>
Existen dos formas de ofrecer servicios TCP/IP: ejecutando un 
servidor de aplicaciones auto-suficiente como demonio o usando
el Internet super server, <command>inetd</command>. <command>inetd</command> 
es un demonio que monitorea un rango de puertos. Si un cliente 
intenta conectarse a un puerto <command>inetd</command> 
maneja la conexión y delega la misma a el software servidor 
que maneja ese tipo de conexión. La ventaja de esta alternativa 
es que agrega una capa extra de seguridad y facilita el 
registro de historial de conexiones entrantes. La desventaja 
es que es algo mas lento que utilizar un demonio auto-suficente. 
Es una buena idea ejecutar una demonio auto-suficiente, por ejemplo, 
en un servidor FTP sobrecargado.
</para>

</sect1>

<sect1>
<title>Configuration</title>

<para>
<command>inetd</command> can be configured using the
<filename>/etc/inetd.conf</filename> file. Let's have a look at
an example line from <filename>inetd.conf</filename>:
</para>

<screen>
# File Transfer Protocol (FTP) server:
ftp     stream  tcp     nowait  root    /usr/sbin/tcpd  proftpd
</screen>

<para>
This line specifies that <command>inetd</command> should accept
FTP connections and pass them to <command>tcpd</command>. This
may seem a bit odd, because <command>proftpd</command> normally 
handles FTP connections. You can also specify to use <command>proftpd</command>
directly in <filename>inetd.conf</filename>, but Slackware Linux normally
passes the connection to <command>tcpd</command>. This program
passes the connection to <command>proftpd</command> in turn, as specified.
<command>tcpd</command> is used to monitor services and to provide
host based access control.
</para>

<para>
Services can be disabled by adding the comment character (#) at
the beginning of the line. It is a good idea to disable all services
and enable services you need one at a time. After changing
<filename>/etc/inetd.conf</filename> <command>inetd</command>
needs to be restarted to activate the changes. This can be done
by sending the HUP signal to the inetd process:
</para>

<screen>
# <command>ps ax | grep 'inetd'</command>
   64 ?        S      0:00 /usr/sbin/inetd
# <command>kill -HUP 64</command>
</screen>

<para>
  Or you can use the <filename>rc.inetd</filename> initialization script to
  restart <command>inetd</command>:
</para>

<screen>
# <command>/etc/rc.d/rc.inetd restart</command>
</screen>

</sect1>

<sect1>
<title>TCP wrappers</title>

<para>
As you can see in <filename>/etc/inetd.conf</filename> connections for most
protocols are made through <command>tcpd</command>, instead of directly 
passing the connection to a service program. For example:
</para>

<screen>
# File Transfer Protocol (FTP) server:
ftp     stream  tcp     nowait  root    /usr/sbin/tcpd  proftpd
</screen>

<para>
In this example ftp connections are passed through <command>tcpd</command>.
<command>tcpd</command> logs the connection through syslog and allows for
additional checks. One of the most used features of <command>tcpd</command>
is host-based access control. Hosts that should be denied are controlled
via <filename>/etc/hosts.deny</filename>, hosts that should be allowed
via <filename>/etc/hosts.allow</filename>. Both files have one rule on
each line of the following form:
</para>

<screen>
service: hosts
</screen>

<para>
Hosts can be specified by hostname or IP address. The ALL keyword specifies
all hosts or all services.
</para>

<para>
Suppose we want to block access to all services managed through 
<command>tcpd</command>, except for host 
<quote>trusted.example.org</quote>. To do this the following
<filename>hosts.deny</filename> and <filename>hosts.allow</filename>
files should be created.
</para>

<para>
<filename>/etc/hosts.deny</filename>:
</para>

<screen>
ALL: ALL
</screen>

<para>
<filename>/etc/hosts.allow</filename>:
</para>

<screen>
ALL: trusted.example.org
</screen>

<para>
In the <filename>hosts.deny</filename> access is blocked to all (ALL)
services for all (ALL) hosts. But <filename>hosts.allow</filename>
specifies that all (ALL) services should be available to
<quote>trusted.example.org</quote>.
</para>

</sect1>

</chapter>
