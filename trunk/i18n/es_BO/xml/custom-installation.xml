<chapter id="getstarted-custominstall"> <?dbhtml filename="custom-installation.html" ?>
  <title>Instalación personalizada</title>

  <para>
    Algunas veces usted podría requerir realizar una instalación
    personalizada de Slackware Linux, por ejemplo, para tener un mejor
    entendimiento de como funciona un sistema GNU/Linux, o como
    preparar un script de instalación automática. Este capítulo
    remarca los pasos requeridos para instalar Slackware Linux
    manualmente. Un script de instalación de ejemplo es también
    proveído en <xref linkend="getstarted-custominstall-script" />.
  </para>

  <sect1 id="getstarted-custominstall-partition">
    <title>Particionando un disco duro</title>

    <para>
      Si usted ha realizado una instalación normal, no debería tener
      problemas particionando un disco. Puede usar los comandos
      <command>fdisk</command> y <command>cfdisk</command> para
      particionar discos. Si usted esta escribiendo un script de
      instalación de Slackware Linux, es útil saber que puede entubar
      comandos <command>fdisk</command>. Por ejemplo:
    </para>

    <screen>
# <command>fdisk /dev/hda &lt;&lt; EOF
n
p
1

+10000M
n
p
2

+512M
t
2
82
w
EOF</command>
    </screen>

    <para>
      Estos comando crean una partición primaria Linux de 10000MB, y
      una partición primaria Linux swap de 512MB. Podría almacenar los
      comandos <command>fdisk</command> en diferentes perfiles de
      disco y usar uno de los perfiles basados en el despliegue
      específico (e.g. el tamaño del disco). Por ejemplo:
    </para>

    <screen>
# <command>cat /usr/share/fdisk-profiles/smalldisk | fdisk</command>
    </screen>
  </sect1>

  <sect1 id="getstarted-custominstall-initfs">
    <title>Inicializando y montando sistemas de archivos</title>

    <para>
      Después de crear al menos una partición swap y una partición
      Linux, puede inicializar el sistema de archivos y el espacio
      swap y hacer uso de este almacenamiento. En sistemas de bajos
      recursos, usted debería inicializarlos y usar swap
      primero. Usaremos la disposición de particiones usada en el
      ejemplo de particionado anterior en los siguientes
      ejemplos. Para configurar y usar swap, ejecute:
    </para>

    <screen>
# <command>mkswap /dev/hda2</command>
# <command>swapon /dev/hda2</command>
    </screen>

    <para>
      El significado de estos comandos es bastante obvio.
      <command>mkswap</command> inicializa el espacio swap, y
      <command>swapon</command> lo pone en uso. Tendrá que ejecutar
      <command>mkswap</command> una vez, pero
      <command>swapon</command> debe ser ejecutado durante cada
      arranque del sistema. Esto puede hacerse automáticamente
      agregando una entrada para la partición swap en
      <filename>/etc/fstab</filename>, lo cual haremos durante un paso
      posterior.
    </para>

    <para>
      Por ahora, es importante inicializar las particiones
      destino. Esto puede hacerse con el comando
      <command>mkfs</command>. Puede especificar qué sistema de
      archivos debería ser usado agregando el parámetro <parameter
      class="command">-t</parameter>. <command>mkfs</command> invocará
      automáticamente un comando <command>mkfs.filesystem</command>
      basado en el sistema de archivos que usted haya elegido. Tenga
      en cuenta que los sistemas de archivos que pueden ser usados
      dependen del kernel de instalación con el que haya arrancado. Si
      usted ha usado el kernel <emphasis>bare.i</emphasis>, puede usar
      los sistemas de archivos <emphasis>ext2</emphasis>,
      <emphasis>ext3</emphasis> y <emphasis>reiserfs</emphasis>.
    </para>

    <para>
      Para inicializar un sistema de archivos
      <emphasis>ext3</emphasis> y montarlo, debería ejecutar los
      siguientes comandos:
    </para>

    <screen>
# <command>mkfs -t ext3 /dev/hda1</command>
# <command>mount /dev/hda1 /mnt</command>
    </screen>

    <para>
      Si ha creado particiones separadas para ciertos directorios en
      el sistema de archivos root, e.g. <filename>/home</filename>,
      también puede inicializarlos y montarlos en este punto. Por
      ejemplo:
    </para>

    <screen>
# <command>mkfs -t ext3 /dev/hda2</command>
# <command>mkdir /mnt/home</command>
# <command>mount /dev/hda2 /mnt/home</command>
    </screen>

    <para>
      Finalmente, tendrá que montar el medio de origen. Si usa un CD-ROM,
      esto es fácil. Suponga que <filename>/dev/hdc</filename> es el
      dispositivo de CD-ROM, puede montarlo con:
    </para>

    <screen>
# <command>mount /dev/hdc /var/log/mount</command>
    </screen>

    <para>
      Para usar NFS como medio de instalación se requieren algunos
      pasos mas.  Primeramente, tendrá que cargar el disco de
      red. Puede hacer esto ejecutando el comando
      <command>network</command> e insertando un disco de red. También
      puede cargar este disco desde otro medio, por ejemplo desde una
      memoria USB. Suponga que ha montado una memoria USB en
      /var/log/mount, puede cargar el disco de red con:
      <command>network /var/log/mount/network.dsk</command>. Después
      de cargar el disco de red, tendrá que configurar la interfaz de
      red. Si el servidor NFS esta en la misma red, solamente tendrá
      que asignar una dirección IP a la interfaz de red. Por ejemplo,
      para usar la dirección <emphasis>192.168.2.201</emphasis>, puede
      ejecutar el siguiente comando:
    </para>

    <screen>
# <command>ifconfig eth0 192.168.2.201</command>
    </screen>

    <para>
      Entonces puede cargar el portmapper (mapeador de puertos), el
      cual es necesario para que el cliente NFS funcione
      correctamente:
    </para>

    <screen>
# <command>/sbin/rpc.portmap</command>
    </screen>

    <para>
      Si portmapper se inicia correctamente, puede montar el
      volumen NFS. Pero primero asegúrese que haya desmontado
      cualquier sistema de archivos que haya montado previamente en
      <filename>/var/log/mount</filename>. Si no hay otros sistemas de
      archivos montados en <filename>/var/log/mount</filename>, puede
      proceder con el montaje del volumen NFS. Suponga que quiere
      montar
      <emphasis>192.168.2.1:/home/pub/slackware-current</emphasis>,
      debería usar el siguiente comando:
    </para>

    <screen>
# <command>mount -r -t nfs -o nolock 192.168.2.1:/home/pub/slackware-current /var/log/mount</command>
    </screen>

    <para>
      Si no hay errores impresos cuando el volumen es montado, debería
      ser accesible a través de <filename>/var/log/mount</filename>.
    </para>
  </sect1>

  <sect1 id="getstarted-custominstall-packages">
    <title>Instalando paquetes</title>

    <para>
      Ahora todo esta configurado para iniciar la instalación de
      paquetes desde el medio de instalación. Ya que
      <command>installpkg</command> esta disponible desde el sistema
      de instalación, puede usarlo para instalar los paquetes de
      Slackware Linux. Para instalar paquetes a las particiones
      destino montadas en <filename>/mnt</filename>, agregue la opción
      <parameter class="command">-root</parameter>. El siguiente
      comando instala todos los paquetes desde el medio de
      instalación:
    </para>

    <screen>
# <command>installpkg -root /mnt /var/log/mount/slackware/*/*.tgz</command>
    </screen>

    <para>
      Si ha creado tagfiles para definir qué paquetes deberían ser
      instalados, entonces puede usarlos ahora (los tagfiles son
      descritos en <xref linkend="chap-pkgmgmt-tagfiles" />). Suponga
      que tiene almacenado un tagfile para conjunto de paquetes en
      <filename>/usr/share/tagfiles/small-desktop</filename>, puede
      instalar paquetes basados en los tagfiles de la siguiente forma:
    </para>

    <screen>
# <command>for p in a ap d e f k kde kdei l n t tcl x xap y; do
   installpkg -infobox -root /mnt \
     -tagfile /usr/share/tagfiles/small-desktop/$p/tagfile \
     /var/log/mount/slackware/$p/*.tgz
done</command>
    </screen>
  </sect1>

  <sect1 id="getstarted-custominstall-config">
    <title>Configuración post-instalación</title>

    <para>
      Las secciones siguientes describen la configuración mínima
      necesaria para tener un sistema corriendo.
    </para>

    <sect2 id="getstarted-custominstall-config-fstab">
      <title>fstab</title>

      <para>
	Uno de los pasos de configuración necesarios es crear un
	archivo <command>fstab</command>, así el sistema puede buscar
	las particiones o volúmenes que deben ser montados. El formato
	del archivo <filename>/etc/fstab</filename> esta descrito en
	<xref linkend="basics-filesystem-mounting-fstab" />. Como
	mínimo tendrá que agregar entradas para el sistema de archivos
	<filename>/</filename>, el pseudo-sistema de archivos
	<filename>/proc</filename>, el pseudo-sistema de archivos
	<filename>devpts</filename> y la partición swap.
      </para>

      <para>
	Con el particionado de ejemplo usado anteriormente en este
	capítulo, puede crear un archivo
	<filename>/etc/fstab</filename> como este:
      </para>

      <screen>
# <command> cat &gt; /mnt/etc/fstab &lt;&lt; EOF
/dev/hda2	 swap             swap        defaults         0   0
/dev/hda1        /                ext3        defaults         1   1
devpts           /dev/pts         devpts      gid=5,mode=620   0   0
proc             /proc            proc        defaults         0   0
EOF</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-lilo">
      <title>LILO</title>

      <para>
	Para hacer que el sistema sea arrancable, deberá configurar e
	instalar el Linux Loader (LILO). La configuración de LILO es
	cubierta en <xref linkend="chap-init-lilo" />. Para esta
	sección solamente mostraremos un configuración LILO de
	ejemplo, que puede ser usada con la disposición descrita en
	este capítulo. El primer paso es crear el archivo
	<filename>/etc/lilo.conf</filename>:
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/lilo.conf &lt;&lt; EOF
boot = /dev/hda
vga = normal
timeout = 50
image = /boot/vmlinuz
	root = /dev/hda1
	label = Slackware
	read-only
EOF</command>
      </screen>

      <para>
	Entonces puede instalar LILO con <filename>/mnt</filename>
	como LILO root. Con <filename>/mnt</filename> configurado como
	root, LILO usará el archivo
	<filename>/etc/lilo.conf</filename> desde la partición
	destino:
      </para>

      <screen>
# <command>lilo -r /mnt</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-network">
      <title>Configuración de red</title>

      <para>
	La configuración de red en Slackware Linux es cubierta en
	<xref linkend="sysadmin-netconfig" />. Esta sección cubrirá un
	ejemplo de un host que usará DHCP para obtener una dirección
	IP.
      </para>

      <para>
	El archivo <filename>/etc/networks</filename> contiene
	información sobre las redes de Internet conocidas. Porque
	obtendremos la información de red DHCP, nosotros usaremos
	<emphasis>127.0.0.1</emphasis> como la red local.
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/networks &lt;&lt; EOF
loopback        127.0.0.0
localnet        127.0.0.0
EOF</command>
      </screen>

      <para>
	Aunque obtendremos un hostname a través de DHCP,
	configuraremos un hostname temporal:
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/HOSTNAME &lt;&lt; EOF
sugaree.example.net
EOF</command>
      </screen>

      <para>
	Ahora que el hostname esta configurado, el hostname y
	<emphasis>localhost</emphasis> también deberían ser
	resolvibles, creando una base de datos
	<filename>/etc/hosts</filename>:
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/hosts &lt;&lt; EOF
127.0.0.1	localhost
127.0.0.1	sugaree.example.net	sugaree	
EOF</command>
      </screen>

      <para>
	No tenemos que crear un archivo
	<filename>/etc/resolv.conf</filename>, ya que será
	automáticamente creado por <command>dhcpcd</command>, el
	cliente DHCP. Entonces, finalmente, podemos configurar la
	interfaz en <filename>/etc/rc.d/rc.inet1.conf</filename>:
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/rc.d/rc.inet1.conf &lt;&lt; EOF
IPADDR[0]=""
NETMASK[0]=""
USE_DHCP[0]="yes"
DHCP_HOSTNAME[0]=""
EOF</command>
      </screen>

      <para>
	Usted podría querer hacer un respaldo del archivo
	<filename>rc.inet1.conf</filename>, porque contiene muchos
	comentarios útiles. O puede usar <command>sed</command> para
	cambiar esta opción específica:
      </para>

      <screen>
# <command>sed -i 's/USE_DHCP\[0\]=""/USE_DHCP[0]="yes"/' \
   /mnt/etc/rc.d/rc.inet1.conf</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-init">
      <title>Personalizando los scripts de inicialización</title>

      <para>
	Dependiendo del propósito del sistema que esta siendo
	instalado, debería decidirse qué scripts de inicialización
	deberían ser iniciados. El número de servicios que estan
	disponibles dependen de los paquetes que haya instalado. Puede
	obtener una lista de los scripts disponibles con
	<command>ls</command>:
      </para>

      <screen>
# <command>ls -l /mnt/etc/rc.d/rc.*</command>
      </screen>

      <para>
	Si los bits ejecutables están configurados en un script, será
	iniciado, de otra forma no. Obviamente debería mantener
	ejecutables los scripts esenciales, incluyendo los scripts
	específicos del nivel de ejecución. Puede asignar el bit
	ejecutable en un script con:
      </para>

      <screen>
# <command>chmod +x /mnt/etc/rc.d/rc.scriptname</command>
      </screen>

      <para>
        Or remove it with:
      </para>

      <screen>
# <command>chmod -x /mnt/etc/rc.d/rc.scriptname</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-ldconfig">
      <title>Configurando en enlazador dinámico</title>

      <para>
	GNU/Linux usa una cache para la carga dinámica de
	librerias. Además que muchos programas se basan en números
	genéricos de librerías
	(e.g. <filename>/usr/lib/libgtk-x11-2.0.so</filename>, en vez
	de
	<filename>/usr/lib/libgtk-x11-2.0.so.0.600.8</filename>). El
	cache y los enlaces de librería pueden ser actualizados en una
	ejecución de <command>ldconfig</command>:
      </para>

      <screen>
# <command>chroot /mnt /sbin/ldconfig</command>
      </screen>

      <para>
	Usted podría no conocer el comando <command>chroot</command>;
	es un comando que ejecuta un comando con un root diferente al
	root activo. En este ejemplo, el directorio root es cambiado a
	<filename>/mnt</filename>, y desde ahí
	<command>chroot</command> ejecuta el binario
	<command>/sbin/ldconfig</command>. Después de que el comando
	hay finalizado, el sistema retornará a la consola, la cual usa
	el root original. Para usar <command>chroot</command> con
	otros comandos debe ejecutar primero
	<command>ldconfig</command> una vez, porque sin inicializar el
	enlazador dinámico la mayoría de los comandos no serán
	ejecutados, debido a dependencias de librerías sin resolver.
      </para>
    </sect2>

    <sect2 id="getstarted-custominstall-config-rootpasswd">
      <title>Asignando la contraseña root</title>

      <para>
	Ahora que la cache de librerías dinámicas y los enlaces están
	configurados, puede ejecutar comandos instalados en el
	sistema. Haremos uso de esto para asignar la contraseña
	<emphasis>root</emphasis>. El comando
	<command>passwd</command> puede ser usado para asignar la
	contraseña para un usuario existente (el usuario
	<emphasis>root</emphasis> es parte del archivo inicial
	<filename>/etc/passwd</filename>). Usaremos el comando
	<command>chroot</command> de nuevo para ejecutar el comando en
	la partición destino:
      </para>

      <screen>
# <command>chroot /mnt /usr/bin/passwd root</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-timezone">
      <title>Configurando la zona horaria</title>

      <para>
	En los sistemas UNIX-like es importante configurar la zona
	horaria correctamente, porque es usada por varias partes del
	sistema. Por ejemplo, la zona horaria es usada por NTP para
	sincronizar la hora del sistema correctamente, o por
	diferentes programas de red para computar la diferencia de
	tiempo entre un cliente y un servidor. En Slackware Linux la
	zona horaria puede ser configurada enlazando
	<filename>/etc/localtime</filename> a un archivo de zona
	horaria. Puede encontrar la zona horaria para su región
	navegando el directorio
	<filename>/mnt/usr/share/zoneinfo</filename>. La mayoría de
	las zonas horarias pueden ser encontradas en los
	sub-directorios de sus respectivas regiones. Por ejemplo, para
	usar <emphasis>Europe/Amsterdam</emphasis> como zona horaria,
	puede ejecutar los siguientes comandos:
      </para>

      <screen>
# <command>cd /mnt</command>
# <command>rm -rf etc/localtime</command>
# <command>ln -sf /usr/share/zoneinfo/Europe/Amsterdam etc/localtime</command>
      </screen>

      <para>
	Después de configurar la zona horaria, los programas aún no
	saben si el reloj de hardware está configurado a la hora
	local, o al estándar Coordinated Universal Time (UTC). SI usa
	otro sistema operativo en la misma máquina que no usa UTC, es
	mejor configurar el reloj de hardware a la hora local. En los
	sistemas UNIX-like es una costumbre configurar el sistema a
	UTC. Puede configurar qué tiempo usa el reloj del sistema
	creando el archivo <filename>/etc/hardwareclock</filename>, y
	colocando la palabra <emphasis>localtime</emphasis> en él si
	su reloj está configurado a la hora local, o
	<emphasis>UTC</emphasis> cuando está configurado a UTC. Por
	ejemplo, para usar UTC, puede crear
	<filename>/etc/hardwareclock</filename> de la siguiente forma:
      </para>

      <screen>
# <command>echo "UTC" &gt; /mnt/etc/hardwareclock</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-fonts">
      <title>Creando la caché de fuente X11</title>

      <para>
	Si va a usar X11, tendrá que inicializar la cache de fuente
	para fuentes TrueType y Type1. Esto puede hacerse con el
	comando <command>fc-cache</command>:
      </para>

      <screen>
# <command>chroot /mnt /usr/bin/fc-cache</command>
      </screen>
    </sect2>
  </sect1>

  <sect1 id="getstarted-custominstall-script">
    <title>Script de instalación automatizada</title>

    <para>
      Es fácil combinar los pasos de una instalación personalizada en
      un script, el cual ejecuta los pasos personalizados
      automáticamente. Esto es ideal para hacer que un servidor por
      defecto instale o administre clientes Linux masivos. Esta
      sección contiene un script de ejemplo que fué escrito por
      William Park. Es fácil agregar un script de instalación al medio
      de Slackware Linux, especialmente si usted usa un CD-ROM de
      instalación o arranca el sistema de instalación desde una
      memoria USB.
    </para>

    <para>
      El sistema de instalación esta almacenado en un archivo de
      imagen comprimida, que esta disponible en el medio de
      distribución como
      <filename>isolinux/initrd.img</filename>. Puede crear una copia
      de esta imagen en su disco duro, y descomprimirlo con
      <command>gunzip</command>:
    </para>

    <screen>
# <command>mv initrd.img initrd.img.gz</command>
# <command>gunzip initrd.img.gz</command>
    </screen>

    <para>
      Después de descomprimir la imagen, puede montar el archivo como
      un disco, usando el dispositivo loopback:
    </para>

    <screen>
# <command>mount -o loop initrd.img /mnt/hd</command>
    </screen>

    <para>
      Ahora puede agregar un script al archivo initrd agregándolo a la
      estructura de directorio disponible bajo el punto de montaje.
      Después de hacer los cambios necesarios, puede desmontar el
      sistema de archivos y comprimirlo:
    </para>

    <screen>
# <command>umount /mnt/hd</command>
# <command>gzip initd.img</command>
# <command>mv initrd.img.gz initrd.img</command>
    </screen>

    <para>
      Entonces puede colocar el nuevo archivo
      <filename>initrd.img</filename> en el medio de instalación, y
      probar el script.
    </para>

    <programlisting>
#! /bin/sh
# Copyright (c) 2003-2005 by William Park &lt;opengeometry@yahoo.ca&gt;.
# All rights reserved.
#
# Usage: slackware-install.sh

rm_ln ()		# Usage: rm_ln from to
{
	rm -rf $2; ln -sf $1 $2
}


###############################################################################
echo "Partitioning harddisk..."

(   echo -ne "n\np\n1\n\n+1000M\n"	# /dev/hda1 --> 1GB swap
	echo -ne "n\np\n2\n\n+6000M\n"	# /dev/hda2 --> 6GB /
	echo -ne "t\n1\n82\nw\n"
) | fdisk /dev/hda

mkswap /dev/hda1		# swap
swapon /dev/hda1

mke2fs -c /dev/hda2		# /
mount /dev/hda2 /mnt


###############################################################################
echo "Installing packages..."

mount -t iso9660 /dev/hdc /cdrom	# actually, /var/log/mount
cd /cdrom/slackware
for p in [a-z]*; do		# a, ap, ..., y
	installpkg -root /mnt -priority ADD $p/*.tgz
done

cd /mnt


###############################################################################
echo "Configuring /dev/* stuffs..."

rm_ln psaux dev/mouse		# or, 'input/mice' for usb mouse
rm_ln ttyS0 dev/modem
rm_ln hdc dev/cdrom
rm_ln hdc dev/dvd


###############################################################################
echo "Configuring /etc/* stuffs..."

cat &gt; etc/fstab &lt;&lt; EOF
/dev/hda1   swap         swap     defaults         0  0
/dev/hda2   /            ext2     defaults         1  1
devpts      /dev/pts     devpts   gid=5,mode=620   0  0
proc        /proc        proc     defaults         0  0
#
/dev/cdrom  /mnt/cdrom   iso9660  noauto,owner,ro  0  0
/dev/fd0    /mnt/floppy  auto     noauto,owner     0  0
tmpfs       /dev/shm     tmpfs    noauto           0  0
EOF

cat &gt; etc/networks &lt;&lt; EOF
loopback	127.0.0.0
localnet	192.168.1.0
EOF
cat &gt; etc/hosts &lt;&lt; EOF
127.0.0.1	localhost
192.168.1.1	node1.example.net	node1
EOF
cat &gt; etc/resolv.conf &lt;&lt; EOF
search example.net
nameserver 127.0.0.1
EOF
cat &gt; etc/HOSTNAME &lt;&lt; EOF
node1.example.net
EOF

## setup.05.fontconfig
chroot . /sbin/ldconfig		# must be run before other program
chroot . /usr/X11R6/bin/fc-cache

chroot . /usr/bin/passwd root

## setup.06.scrollkeeper
chroot . /usr/bin/scrollkeeper-update

## setup.timeconfig
rm_ln /usr/share/zoneinfo/Canada/Eastern  etc/localtime
cat &gt; etc/hardwareclock &lt;&lt; EOF
localtime
EOF

## setup.liloconfig
cat &gt; etc/lilo.conf &lt;&lt; EOF
boot=/dev/hda
delay=100
vga=normal	# 80x25 char
# VESA framebuffer console:
#   pixel	char	8bit	15bit	16bit	24bit
#   -----	----	----	-----	-----	-----
#   1600x1200		796	797	798	799
#   1280x1024	160x64	775	793	794	795
#   1024x768	128x48	773	790	791	792
#   800x600	100x37	771	787	788	789
#   640x480	80x30	769	784	785	786
image=/boot/vmlinuz		# Linux
	root=/dev/hda2
	label=bare.i
	read-only
# other=/dev/hda1		# Windows
#     label=win
#     table=/dev/hda
EOF
lilo -r .

## setup.xwmconfig
rm_ln xinitrc.fvwm95  etc/X11/xinit/xinitrc


###############################################################################
echo "Configuring /etc/rc.d/rc.* stuffs..."

cat &gt; etc/rc.d/rc.keymap &lt;&lt; EOF
#! /bin/sh
[ -x /usr/bin/loadkeys ] &amp;&amp; /usr/bin/loadkeys us.map
EOF
chmod -x etc/rc.d/rc.keymap

## setup.mouse
cat &gt; etc/rc.d/rc.gpm &lt;&lt; 'EOF'
#! /bin/sh
case $1 in
	stop)
	    echo "Stopping gpm..."
	    /usr/sbin/gpm -k
	    ;;
	restart)
	    echo "Restarting gpm..."
	    /usr/sbin/gpm -k
	    sleep 1
	    /usr/sbin/gpm -m /dev/mouse -t ps2
	    ;;
	start)
	    echo "Starting gpm..."
	    /usr/sbin/gpm -m /dev/mouse -t ps2
	    ;;
	*)
	    echo "Usage $0 {start|stop|restart}"
	    ;;
esac
EOF
chmod +x etc/rc.d/rc.gpm

## setup.netconfig
cat &gt; etc/rc.d/rc.inet1.conf &lt;&lt; EOF
IPADDR=(192.168.1.1)		# array variables
NETMASK=(255.255.255.0)
USE_DHCP=()			# "yes" or ""
DHCP_HOSTNAME=()
GATEWAY=""
DEBUG_ETH_UP="no"
EOF

cat &gt; etc/rc.d/rc.netdevice &lt;&lt; EOF
/sbin/modprobe 3c59x
EOF
chmod +x etc/rc.d/rc.netdevice

## setup.setconsolefont
mv etc/rc.d/rc.font{.sample,}
chmod -x etc/rc.d/rc.font

## setup.services
chmod +x etc/rc.d/rc.bind
chmod +x etc/rc.d/rc.hotplug
chmod +x etc/rc.d/rc.inetd
chmod +x etc/rc.d/rc.portmap
chmod +x etc/rc.d/rc.sendmail
#
chmod -x etc/rc.d/rc.atalk
chmod -x etc/rc.d/rc.cups
chmod -x etc/rc.d/rc.httpd
chmod -x etc/rc.d/rc.ip_forward
chmod -x etc/rc.d/rc.lprng
chmod -x etc/rc.d/rc.mysqld
chmod -x etc/rc.d/rc.pcmcia
chmod -x etc/rc.d/rc.samba
chmod -x etc/rc.d/rc.sshd
    </programlisting>
  </sect1>
</chapter>
