<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xmlns:xl="http://www.w3.org/1999/xlink" xml:lang="es"
	 xml:id="chap-procmgmt">

  <title>Administración de procesos</title>

  <sect1 xml:id="chap-procmgmt-theory">
    <title>Teoría</title>

    <sect2 xml:id="chap-procmgmt-theory-proc">
      <title>Procesos</title>

      <para>
	Una instancia en ejecución de un programa es llamada
	<emphasis>proceso</emphasis>. Cada proceso tiene su propia
	memoria protegida, denominada <emphasis>process address
	space</emphasis> (espacio de direccionamiento del
	programa). Este espacio de direccionamiento consiste en dos
	áreas: el <emphasis>text area</emphasis> y el <emphasis>data
	area</emphasis>. El text area contiene el código del programa
	actual y le dice al sistema qué hacer. El data area almacena
	datos constantes y de ejecución de un proceso. Debido a que
	existen muchos procesos en un sistema y solamente uno o pocos
	procesadores, el kernel del sistema operativo el tiempo del
	procesador entre procesos. Este proceso es llamado
	<emphasis>time-sharing</emphasis> (distribución de tiempo).
      </para>

      <table xml:id="chap-procmgmt-theory-proc-struct">
	<title>La estructura de un proceso</title>

	<tgroup cols="2">
	  <thead>
	    <row><entry>Campo</entry><entry>Descripción</entry></row>
	  </thead>

	  <tbody>
	    <row>
	      <entry>pid</entry><entry>Identificador numérico del
	      proceso</entry>
	    </row>
	    <row>
	      <entry>ppid</entry><entry>Identificador numérico del
	      proceso padre</entry>
	    </row>
	    <row>
	      <entry>euid</entry><entry>ID efectivo del usuario del
	      proceso</entry>
	    </row>
	    <row>
	      <entry>ruid</entry><entry>ID real del usuario del
	      proceso</entry>
	    </row>
	    <row>
	      <entry>egid</entry><entry>ID del grupo del
	      proceso</entry>
	    </row>
	    <row>
	      <entry>rgid</entry><entry>ID real del grupo del
	      proceso</entry>
	    </row>
	    <row>
	      <entry>fd</entry><entry>Puntero a la lista de
	      descriptores de archivos abiertos</entry>
	    </row>
	    <row>
	      <entry>vmspace</entry><entry>Puntero al espacio de
	      dirección del proceso</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	<xref linkend="chap-procmgmt-theory-proc-struct" /> lista los
	campos de información mas importantes que el kernel almacena
	sobre un proceso. Cada proceso puede ser identificado
	únicamente por su <emphasis>PID</emphasis> (identificador de
	proceso), el cual es un número sin signo. Como veremos mas
	adelante, un usuario puede fácilmente obtener el PID de un
	proceso. Cada proceso es asociado con un
	<emphasis>UID</emphasis> (ID de usuario) y
	<emphasis>GID</emphasis> (ID de grupo) en el sistema. Cada
	proceso tiene un <emphasis>UID real</emphasis>, el cual es el
	UID con el cual el proceso fué iniciado y el <emphasis>UID
	efectivo</emphasis> es el UID con el cual el proceso
	opera. Normalmente, el UID efectivo es igual al UID real, pero
	algunos programas le piden al sistema cambiar su UID
	efectivo. El UID efectivo es usado para control de
	acceso. Esto significa que si un usuario joe inicia un
	comando, digamos <command>less</command>,
	<command>less</command> solamente puede abrir archivos en los
	que joe tiene permisos de lectura. En paralelo, un proceso
	tiene también un <emphasis>GID read</emphasis> y un
	<emphasis>GID efectivo</emphasis>.
      </para>

      <para>
	Muchos procesos abren archivos, el medio usado para operar un
	archivo es denominado <emphasis>file descriptor (descriptor de
	archivo)</emphasis>. El kernel administra una lista de
	descriptores de archivos abiertos para cada proceso. El campo
	<emphasis>fd</emphasis> contiene un puntero a la lista de
	archivos abierto. El campo <emphasis>vmspace</emphasis> apunta
	al espacio de dirección del proceso.
      </para>

      <!-- XXX - make more sophisticated (swap)? -->
      <figure xml:id="chap-procmgmt-theory-proc-procstates">
	<title>Estados de un proceso</title>

	<mediaobject>
	  <imageobject>
	    <imagedata format="PNG" fileref="../../images/procstates.png"/>
	  </imageobject>
	  <imageobject>
	    <imagedata format="SVG" fileref="../../images/procstates.svg"/>
	  </imageobject>
	</mediaobject>
      </figure>

      <para>
	Ahora, no todo proceso requiere tiempo del CPU en un momento
	dado. Por ejemplo, algunos procesos pueden estar esperando la
	finalización o la interrupción de alguna operación
	<emphasis>I/O</emphasis> (Input/Output). Sin tomar en cuenta
	las sutilezas, los procesos están normalmente
	<emphasis>started (iniciado)</emphasis>, <emphasis>running (en
	ejecución)</emphasis>, <emphasis>ready (listo)</emphasis>
	(para ejecutarse), <emphasis>blocked (bloqueado)</emphasis>
	(esperando por I/O) o <emphasis>terminated
	(finalizado)</emphasis>. <xref
	linkend="chap-procmgmt-theory-proc-procstates" /> muestra el
	ciclo de vida de un proceso. Un proceso que es finalizado,
	pero cuya entrada de la tabla de procesos no es reclamada, es
	regularmente llamado un <emphasis>proceso zombie</emphasis>.
	Los procesos zombie son útiles para dejar al proceso padre
	leer el estatus de salida del proceso, o reservar la entrada
	de la tabla de procesos temporalmente.
      </para>
    </sect2>

    <sect2 xml:id="chap-procmgmt-theory-proc-new">
      <title>Creando procesos nuevos</title>

      <para>
	Los procesos nuevos son creados con la llamada del sistema
	<emphasis>fork()</emphasis>. Esta llamada del sistema copia el
	espacio de dirección del proceso, procesa la información en el
	ejecutante y da al nuevo proceso, llamado proceso hijo, un PID
	diferente. El proceso hijo continuará su ejecución en el
	mismo punto que el padre, pero tendrá un diferente valor de
	retorno desde la llamada del sistema
	<emphasis>fork()</emphasis>. Basado en este valor de retorno
	el código del padre y el hijo pueden decidir cómo continuar su
	ejecución. El siguiente fragmento de código C muestra una
	llamada <emphasis>fork()</emphasis> en acción:
      </para>

      <programlisting>
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  pid_t pid = fork();
  if (pid == 0)
    printf("Hi, I am the child!\n");
  else
    printf("Hi, I am the parent, the child PID is %d!\n", pid);

  return 0;
}
      </programlisting>

      <para>
	Este pequeño programa llama a <emphasis>fork()</emphasis>,
	almacenando el valor de retorno de <emphasis>fork()</emphasis>
	en la variable
	<emphasis>pid</emphasis>. <emphasis>fork()</emphasis> retorna
	el valor <emphasis>0</emphasis> al hijo y el PID del hijo al
	padre. Ya que este es el caso, podemos usar una simple
	estructura condicional para verificar el valor de la variable
	<emphasis>pid</emphasis> e imprimir un mensaje apropiado.
      </para>

      <para>
	Puede estar preguntándose cómo es posible iniciar programas
	nuevos, ya que <emphasis>fork()</emphasis> duplica un proceso
	existente. Esa es una buena pregunta, ya que solamente con
	<emphasis>fork()</emphasis> no es posible iniciar nuevos
	programas. Los kernels UNIX también proveen un conjunto de
	llamadas del sistema, empezando con <emphasis>exec</emphasis>,
	que carga una imagen nueva del programa en el proceso
	actual. Vimos al inicio de este capítulo que un proceso es un
	programa en ejecución -- un proceso fué construído en memoria
	desde la imagen del programa que está almacenada en un medio
	de almacenamiento. Entonces, la familia de llamadas del
	sistema <emphasis>exec</emphasis> dan a un proceso en
	ejecución las facilidades de reemplazar su contenido con un
	programa almacenado en algún medio. En sí mismo, esto no es
	extremadamente útil, porque cada vez que una llamada
	<emphasis>exec</emphasis> es realizada, el código ejecutante
	original (o programa) es removido del proceso. Esto puede
	atestiguarse en el siguiente programa C:
      </para>

      <programlisting>
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  execve("/bin/ls", NULL, NULL);

  /* This will never be printed, unless execve() fails. */
  printf("Hello world!\n");

  return 0;
}
      </programlisting>

      <para>
	Este programa ejecuta <command>ls</command> con la llamada
	<emphasis>execve()</emphasis>. El mensaje impreso con
	<emphasis>printf()</emphasis> nunca será mostrado, porque la
	imagen del programa en ejecución es reemplazada con aquella en
	<command>ls</command>. Sin embargo, una combinación de las
	funciones <emphasis>fork()</emphasis> y
	<emphasis>exec</emphasis> es muy poderosa. Un proceso puede
	bifurcarse (fork) a sí mismo y dejar al hijo
	<quote>sacrificarse</quote> para ejecutar otro programa. El
	siguiente programa demuestra este patron:
      </para>

      <programlisting>
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  pid_t pid = fork();
  if (pid == 0)
    execve("/bin/ls", NULL, NULL);

  printf("Hello world!");

  return 0;
}
      </programlisting>

      <para>
	Este programa se bifurca a sí mismo primero. La imagen del
	programa del proceso hijo será reemplazada con
	<command>ls</command>, mientras el proceso padre imprime el
	mensaje <quote>Hello world!</quote> en la pantalla y finaliza.
      </para>

      <para>
	Este procedimiento es seguido por muchos programas, incluyendo
	la consola, cuando un comando es ejecutado desde el símbolo de
	consola. De hecho, todos los procesos en un sistema UNIX son
	directa o indirectamente derivados del proceso
	<emphasis>init</emphasis>, el cual es el primer programa
	iniciado en un sistema UNIX.
      </para>

      <!-- XXX - Describe what is inherited when exec is called. -->
    </sect2>

    <sect2 xml:id="chap-procmgmt-theory-proc-threads">
      <title>Hilos</title>

      <para>
	Aunque los programas bifurcados son muy útiles para construir
	algo de paralelismo<footnote><para>Por ejemplo, un servidor
	web podría bifurcar múltiples procesos hijos para manejar
	peticiones</para></footnote>, esto puede ser muy caro para
	algunos propósitos. Copiar el proceso completo toma algún
	tiempo y existe un costo si los procesos quieren compartir
	data. Esto se resuelve ofreciendo una alternativa más ligera,
	nominalmente permitiendo más de un hilo por ejecución. Cada
	hilo de ejecución es ejecutado de forma separada, pero los
	datos del proceso son compartidos entre los hilos.
      </para>

      <para>
	Escribir buenos programas <emphasis>multithreaded
	(multi-hilo)</emphasis> requiere un buen conocimiento sobre
	compartir datos y locking (bloqueo). Ya que todos los datos
	son compartidos, programas descuidados pueden llevar a errores
	(bugs).
      </para>
    </sect2>

    <!-- XXX - Add a section about capabilities. -->
  </sect1>

  <sect1 xml:id="chap-procmanagement-analyzing">
    <title>Analizando procesos en ejecución</title>

    <sect2 xml:id="chap-procmanagement-analyzing-listing">
      <title>Listando procesos en ejecución</title>

      <para>
	Los sistemas UNIX proveen el comando <command>ps</command>
	para mostrar una lista de procesos en
	ejecución. Desafortunadamente, este comando es un ejemplo del
	sufrimiento de la falta de estandarización. Las variantes BSD
	y System V de <command>ps</command> tienen su propio conjunto
	de opciones. Afortunadamente, GNU/Linux implementa ambos
	parámetros System V y BSD, asi como algunas otras opciones
	extendidas (GNU-style). Las opciones precedidas de un guión
	son interpretadas como opciones System V y las opciones son un
	guión como opciones BSD. Describiremos las opciones System
	V-style en esta sección.
      </para>

      <para>
	Si <command>ps</command> es usado sin parámetros, muestra
	todos los procesos que le pertenecen al usuario que invoca a
	<command>ps</command> y que estan adjuntos a la misma
	terminal. Por ejemplo:
      </para>

      <screen>
$ <userinput>ps</userinput>
  PID TTY          TIME CMD
 8844 pts/5    00:00:00 bash
 8862 pts/5    00:00:00 ps
      </screen>

      <para>
	Mucha información útil puede ser extraída desde esta
	salida. Como puede ver, dos procesos son listados: la consola
	que fué usada para llamar a <command>ps</command>
	(<emphasis>bash</emphasis>) y el mismo comando
	<command>ps</command>. En este caso hay cuatro campos de
	información.  <emphasis>PID</emphasis> es el ID del proceso,
	<emphasis>TTY</emphasis> la terminal controladora,
	<emphasis>TIME</emphasis> la cantidad de tiempo de CPU que el
	proceso ha usado y <command>CMD</command> el comando o programa
	base del cual una copia se está ejecutando. Los campos
	mostrados por defecto pueden variar un poco entre sistemas,
	pero usualmente al menos estos campos son mostrados con tal
	vez algunos cambios en las etiquetas.
      </para>

      <para>
	En algún momento quisiera tener una vista más amplia de los
	procesos en ejecución. Agregando la opción <parameter
	class="command">-a</parameter> muestra todos los procesos
	asociados con las terminales. Por ejemplo:
      </para>

      <screen>
$ <userinput>ps -a</userinput>
  PID TTY          TIME CMD
 7487 pts/1    00:00:00 less
 8556 pts/4    00:00:10 emacs-x
11324 pts/3    00:00:00 ps
      </screen>

      <para>
	Como puede ver, los procesos con diferentes terminales
	controladores son mostrados. Sin embargo, en contraste a la
	salida plana del comando <command>ps</command>, solamente se
	muestran los procesos que son controlados por la terminal en
	ese momento. Por ejemplo, la consola que fué usada para llamar
	a <command>ps</command> no es mostrada.
      </para>

      <para>
	También puede imprimir todos los procesos en ejecución,
	incluyendo procesos que no estan asociados con una terminal,
	usando la opción <parameter class="command">-A</parameter>:
      </para>

      <screen>
$ <userinput>ps -A | head -n 10</userinput>
  PID TTY          TIME CMD
    1 ?        00:00:01 init
    2 ?        00:00:00 migration/0
    3 ?        00:00:00 ksoftirqd/0
    4 ?        00:00:00 watchdog/0
    5 ?        00:00:00 migration/1
    6 ?        00:00:00 ksoftirqd/1
    7 ?        00:00:00 watchdog/1
    8 ?        00:00:00 events/0
    9 ?        00:00:00 events/1
      </screen>

      <para>
	Puede imprimir todos los proceso con cierto ID de usuario, con
	la opción <emphasis>-U</emphasis>. Esta opción acepta uno o
	más (separados por comas) nombres de usuario como
	parámetros. El siguiente comando muestra todos los procesos
	que tienen <emphasis>xfs</emphasis> o <emphasis>rpc</emphasis>
	como ID de usuario:
      </para>

      <screen>
$ <userinput>ps -U xfs,rpc</userinput>
  PID TTY          TIME CMD
 2409 ?        00:00:00 portmap
 2784 ?        00:00:00 xfs
      </screen>

      <para>
	De la misma forma, también puede imprimir los procesos con un
	ID de grupo en particular, con la opción
	<emphasis>-G</emphasis>:
      </para>

      <screen>
$ <userinput>ps -G messagebus,haldaemon</userinput>
  PID TTY          TIME CMD
 8233 ?        00:00:00 dbus-daemon
11312 ?        00:00:00 hald
11320 ?        00:00:00 hald-addon-keyb
11323 ?        00:00:00 hald-addon-acpi
      </screen>

      <para>
	Si quisiera tener una lista para una terminal física o
	pseudo-terminal, puede usar la opción <parameter
	class="command">-t</parameter>;
      </para>

      <screen>
$ <userinput>ps -t tty2</userinput>
  PID TTY          TIME CMD
 2655 tty2     00:00:00 getty
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-procmanagement-managing">
    <title>Administrando procesos</title>

    <sect2 xml:id="chap-procmanagement-managing-signals">
      <title>Enviando señales a procesos</title>

      <para>
	Las señales son crudas, pero son una forma efectiva de
	comunicación inter-proceso (IPC). Una señal es básicamente un
	número con un significado especial que es entregado a un
	proceso. Para todas las señales existen controladores por
	defecto. Los procesos pueden instalar sus propios
	controladores de señal, o escoger ignorar señales. Algunas
	señales (normalmente SIGKILL y SIGSTOP) no pueden ser
	ignoradas. Todas las señales tiene nombres simbólicos
	convenientes.
      </para>

      <para>
	Solamente unas cuantas señales son normalmente interesante
	para uso interactivo en sistemas UNIX-like. Estas son
	(seguidas por su número):
      </para>

      <itemizedlist>
	<listitem>
	  <para><emphasis>SIGKILL (9):</emphasis> finalización forzada de un
	  proceso.</para>
	</listitem>
	<listitem>
	  <para><emphasis>SIGTERM (15):</emphasis> pide la
	  finalización de un proceso. Ya que esta es una petición, un
	  programa podría ignorarla, en contraste a
	  <emphasis>SIGKILL</emphasis>.</para>
	</listitem>
	<listitem>
	  <para><emphasis>SIGHUP (1):</emphasis> Tradicionalmente,
	  esto señala un cuelgue de terminal. Pero hoy en día algunos
	  daemons (e.g. <emphasis>inetd</emphasis>) releen su
	  configuración cuando esta señal es enviada.</para>
	</listitem>
      </itemizedlist>

      <para>
	El comando <command>kill</command> es usado para enviar una
	señal a un proceso. Por defecto <command>kill</command> envía
	la señal <emphasis>SIGTERM</emphasis>. Para enviar esta señal,
	debe usar el ID del proceso al que quisiera enviar esta señal
	como parámetro. Por ejemplo:
      </para>

      <screen>
$ <userinput>kill 15631</userinput>
      </screen>

      <para>
	Para enviar otra señal, puede usar una de las siguientes
	opciones: <emphasis>-signalnumber</emphasis> o
	<emphasis>-signalname</emphasis>. Entonces, los siguientes
	comandos envían la señal <emphasis>SIGKILL</emphasis> al
	proceso con el ID de proceso <emphasis>15631</emphasis>:
      </para>

      <screen>
$ <userinput>kill -9 15631</userinput>
      </screen>

      <screen>
$ <userinput>kill -SIGKILL 15631</userinput>
      </screen>

      <!-- XXX - Add note about what users can send signals. -->
    </sect2>

    <sect2 xml:id="chap-procmanagement-managing-nice">
      <title>Siendo amable con los demás</title>

      <para>
	En un acto de altruismo usted puede ser amable con los otros
	usuarios de recursos de la computadora. Si planea ejecutar un
	proceso que usa intensivamente el tiempo del CPU, pero no
	quiere interferir con el trabajo de los demás usuarios (o
	procesos) en el sistema, puede asignar algun grado de
	'amabilidad' a un proceso. Prácticamente, esto significa que
	será capaz de influenciar la prioridad de planificación de un
	proceso. Procesos más amables obtienen una prioridad de
	planificación baja. La amabilidad normal de un proceso es
	<emphasis>0</emphasis> y puede ser cambiando ejecutando un
	programa con el comando <command>nice</command>. La opción
	<emphasis>-n [amabilidad]</emphasis> puede ser usada para
	especificar la amabilidad:
      </para>

      <screen>
$ <userinput>nice -n 20 cputimewaster</userinput>
      </screen>

      <para>
	El número máximo de amabilidad es dependiente de la
	implementación. Si un programa fue iniciado con
	<command>nice</command> sin haber especificado la amabilidad,
	será iniciado con un grado de amabilidad de
	<emphasis>10</emphasis>. Por si se esta preguntando: si, usted
	puede ser rudo, pero esto esta restringido al usuario
	<emphasis>root</emphasis>.  Puede aumentar la prioridad de un
	proceso especificando un valor negativo como grado de
	amabilidad.
      </para>

      <para>
	También puede modificar la amabilidad de un proceso en
	ejecución con el comando <command>renice</command>. Esto puede
	realizarse para IDs específicos de proceso (<parameter
	class="command">-p PIDs</parameter>), usuarios (<parameter
	class="command">-u user/uid</parameter>) y grupos efectivos
	(<parameter class="command">-g group/gid</parameter>). La
	nueva amabilidad es especificada como el primer parámetro.
      </para>

      <para>
	La amabilidad de un proceso solamente puede ser incrementada.
	Y por supuesto, ningún usuario a excepción de
	<emphasis>root</emphasis> puede afectar la amabilidad de
	procesos de otros usuarios.
      </para>

      <para>
	Veámos un ejemplo, para configurar la amabilidad de un proceso
	con PID <emphasis>3108</emphasis> a <emphasis>14</emphasis>,
	podría uar el siguiente comando:
      </para>

      <screen>
$ <command>renice 14 -p 3108</command>
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-procmanagement-jobcontrol">
    <title>Control de trabajo</title>

    <para>
      A veces es útil agrupar procesos para permitir operaciones en un
      conjunto de procesos, como por ejemplo para distribuir una señal
      a todos los procesos en un grupo en vez de a un solo
      proceso. Sin mucha sorpresa, estos conjuntos de procesos son
      llamados <emphasis>grupos de programas</emphasis> en
      UNIX. Después de una bifurcación, un proceso hijo es
      automáticamente miembro del grupo de procesos del padre. Sin
      embargo, nuevos grupos de procesos pueden ser creados haciendo
      que un proceso sea un líder de grupo de procesos y agregando
      otros procesos al grupo. El ID del grupo de procesos es el PID
      del líder del grupo de procesos.
    </para>

    <para>
      Virtualmente todas las consolas UNIX modernas dan su propio
      grupo de procesos a los procesos creados a través de la
      invocación de un comando. Todos los procesos en una tubería on
      normalmente agregados a un grupo de procesos. En los siguientes
      comandos que crean una tubería
    </para>

    <screen>
cat | tr -s ' ' | egrep 'foob.r'
    </screen>

    <para>
      la consola toscamente realiza los siguientes pasos:
    </para>

    <orderedlist>
      <listitem>
	<para>
	  Tres procesos hijos son bifurcados.
	</para>
      </listitem>
      <listitem>
	<para>
	  El primer proceso en la tubería es colocado en un grupo de
	  proceso con su propio PID como el ID del grupo, haciéndolo
	  el proceso líder. Los otros proceso en la tubería son
	  agregados al grupo de proceso.
	</para>
      </listitem>
      <listitem>
	<para>
	  Los descriptores de archivo de los procesos en la tubería
	  son reconfigurados para formar la tubería.
	</para>
      </listitem>
      <listitem>
	<para>
	  Los programas en la tubería son ejecutados.
	</para>
      </listitem>
    </orderedlist>

    <para>
      La consola usa grupos de proceso para implementar el
      <emphasis>control de trabajo</emphasis>. Una consola puede
      ejecutar múltiples trabajos en segundo plano, puede haber
      múltiples trabajos detenidos y uno puede estar en segundo
      plano. Un trabajo de segundo plano es enlazado a la terminal
      para sus datos de entrada estándar (esto quiere decir que el
      trabajo obtiene los datos de entrada del usuario).
    </para>

    <sect2 xml:id="chap-procmgmt-jobcontrol-stopping">
      <title>Deteniendo y continuando un trabajo</title>
      
      <para>
	Un trabajo que está en segundo plano (por tanto, un trabajo
	puede potencialmente aceptar los datos de entrada del usuario
	desde la terminal) puede ser detenido presionando
	<emphasis>Ctrl-z</emphasis> ( presionando 'Ctrl' y 'z'
	simultáneamente). Esto detendrá el trabajo y delegará el
	control de la terminal hacia la consola. Tratemos con el
	comando <command>sleep</command>, el cual espera por un número
	de segundos definidos pasados como argumento:
      </para>

      <screen>
$ <userinput>sleep 3600</userinput>
<userinput>Ctrl-z</userinput>
[1]+  Stopped                 sleep 3600
      </screen>

      <para>
	El grupo de proceso, al cual nos referiremos como el trabajo
	que ha sido detenido, significando esto que
	<command>sleep</command> ha acabado de contar - su ejecución
	esta completamente detenida. Puede obtener una lista de
	trabajos con el comando <command>jobs</command>:
      </para>

      <screen>
$ <userinput>jobs</userinput>
[1]+  Stopped                 sleep 3600
      </screen>

      <para>
	Esto muestra el número de trabajo (<emphasis>1</emphasis>), su
	estado y el comando que fué usado para iniciar este
	trabajo. Ejecutemos otro programa, detenerlo y dar un vistazo
	al listado de trabajos.
      </para>

      <screen>
$ <userinput>cat</userinput>
<userinput>Ctrl-z</userinput>
[2]+  Stopped                 cat
$ <userinput>jobs</userinput>
[1]-  Stopped                 sleep 3600
[2]+  Stopped                 cat
      </screen>

      <para>
	Como se esperada, el segundo trabajo esta tambien detenido y
	se le asignó el número de trabajo <emphasis>2</emphasis>. El
	símbolo de suma (<emphasis>+</emphasis>) que le sigue al
	primer trabajo ha cambiando a un signo menos
	(<emphasis>-</emphasis>), mientras el segundo trabajo esta
	ahora marcado por un símbolo de suma. El símbolo de suma es
	usado para indicar el <emphasis>trabajo actual</emphasis>. Los
	comandos <command>bg</command> y <command>fg</command> que
	veremos enseguida, operarán en el trabajo actual si ningún
	trabajo es especificado como parámetro.
      </para>
     
      <!-- XXX - Document under what circumstances a job becomes the
                 current job. -->

      <para>
	Usualmente, cuando esta usando trabajos, querrá mover los
	trabajos a segundo plano nuevamente. Esto se realiza con el
	comando <command>fg</command>. Ejecutando
	<command>fg</command> sin parámetros colocará el trabajo
	actual en segundo plano. La mayoría de las consolas imprimirán
	el comando que se mueve a segundo plano para indicar qué
	proceso fue movido a segundo plano:
      </para>

      <screen>
$ <userinput>fg</userinput>
cat
      </screen>

      <para>
	Por supuesto, no siempre es útil colocar el trabajo actual en
	segundo plano. Puede colocar otro trabajo en segundo plano
	agregando el número de trabajo precedido del signo de
	porcentaje (<emphasis>%</emphasis>) como argumento para
	<command>fg</command>:
      </para>

      <screen>
$ <userinput>fg %1</userinput>
sleep 3600
      </screen>

      <para>
	El intercambio de trabajos puede detenerlos y colocarlos en
	segundo plano, a menudo esto es muy útil cuando la consola
	esta siendo usada interactivamente. Por ejemplo, suponga que
	esta editando un archivo con un editor de texto y quisiera
	ejecutar otro comando y luego continuar editando. Podría
	detener el editor con <emphasis>Ctrl-z</emphasis>, ejecutar el
	comando y colocar el editor en primer plano con
	<command>fg</command>.
      </para>
    </sect2>

    <sect2 xml:id="chap-procmgmt-jobcontrol-background">
      <title>Trabajos de segundo plano</title>

      <para>
	Además de ejecutarse en primer plano, los trabajos también
	pueden ejecutarse en segundo plano. Esto significa que se
	estan ejecutando, pero los datos de entrada desde la terminal
	no son redirigidos a los procesos en segundo plano. La mayoría
	de las consolas configuran los procesos en segundo plano para
	dirigir su salida a la terminal de la consola de donde fueron
	iniciados.
      </para>

      <para>
	Un proceso detenido puede continuar su ejecución en segundo
	plano con el comando <command>bg</command>:
      </para>

      <screen>
$ <userinput>sleep 3600</userinput>
  
[1]+  Stopped                 sleep 3600
$ <userinput>bg</userinput>
[1]+ sleep 3600 &amp;
$
      </screen>

      <para>
	Puede ver que el trabajo esta en ejecución con
	<command>jobs</command>:
      </para>

      <screen>
$ <userinput>jobs</userinput>
[1]+  Running                 sleep 3600 &amp;
      </screen>

      <para>
	Como <command>fg</command>, también puede mover otro trabajo
	diferente al actual a segundo plano especificando su número de
	trabajo:
      </para>

      <screen>
$ <command>bg %1</command>
[1]+ sleep 3600 &amp;
      </screen>

      <para>
	También puede ejecutar y colocar un trabajo directamente en
	segundo plano cuando es iniciado, agregando el signo &amp; al
	comando o a una tubería. Por ejemplo:
      </para>

      <screen>
$ <userinput>sleep 3600 &amp;</userinput>
[1] 5078
      </screen>

      <!-- XXX - behavior of background processes when a shell is
                 terminated. -->
    </sect2>
  </sect1>
</chapter>
