<!-- $Id: concepts.xml 333 2007-10-21 17:20:54Z danieldk $ -->

<chapter id="concepts"> <?dbhtml filename="concepts.html"?>
  <title>Conteitos gerais</title>

  <para>
    Este capítulo introduz alguns conceitos gerais sobre UNIX e GNU/Linux. 
    É importante ler este capítulo cuidadosamente se você não tem nenhuma 
    experiência com estes sistemas. Muitos conceitos vistos aqui são usados 
    neste livro e no GNU/Linux.
  </para>

  <sect1 id="concepts-multitasking">
    <title>Multitarefa</title>

    <sect2 id="concepts-multitasking-intro">
      <title>Introdução</title>

      <para>
        Uma das principais vantagens dos sistemas UNIX é ser multitarefa. 
        Isso quer dizer que vários programas podem rodar ao mesmo tempo. 
        Talvez você não saiba o quão isto é importante, porque a 
        maioria das pessoas usam apenas uma aplicação por vez. Isto 
        é uma necessidade vital para sistemas UNIX e derivados. Mesmo que 
        você não tenha iniciado nenhuma aplicação, existem programas que 
        rodam em segundo plano. Por exemplo, alguns programas provêm serviços 
        de rede, enquanto outros mostram a tela de autenticação e esperam até que 
        o usuário se autentique em um terminal (virtual). Programas que 
        rodam em segundo plano muitas vezes são chamados de 
        <emphasis>daemon</emphasis>
        <footnote>
          <para>
	    A palavra <emphasis>daemon</emphasis> não deve ser confundida com 
	    a palavra <emphasis>demon</emphasis>, a palavra <emphasis>daemon</emphasis> 
	    refere-se à seres sobrenaturais da mitologia grega.
          </para>
        </footnote>.
      </para>
    </sect2>

    <sect2 id="concepts-multitasking-procsthreads">
      <title>Processos e threads</title>

      <para>
        Depois que o programa é carregado da mídia de armazenamento, 
        uma instância do programa é iniciado. Esta instância é 
        chamada de <emphasis>processo</emphasis>. Um processo têm o 
        seu próprio espaço na memória, conhecido como 
        <emphasis>espaço de endereçamento da memória</emphasis>.
        Este espaço possui duas áreas importantes: a área de 
        <emphasis>texto</emphasis> e a área de 
        <emphasis>dados</emphasis>. A área de <emphasis>texto</emphasis>
        é o código do programa. É usada para dizer ao sistema o que fazer. 
        Já a área de <emphasis>dados</emphasis> é usada guardar constantes 
        e dados de tempo de execução. O sistema operacional dá a cada 
        processo um tempo para executar. Em sistemas com um único 
        processador, os processos não rodam simultaneamente. Na verdade 
        um pequeno gerenciador no kernel divide o tempo da CPU entre os 
        processos, dando a ilusão de os processos estarem executando 
        simultaneamente. Esta tarefa é chamada de 
        <emphasis>time-sharing</emphasis>. Em sistemas com mais de uma 
        CPU ou mais de um núcleo, mais de um processo pode rodar 
        simultaneamente, mas mesmo assim o time-sharing é utilizado 
        para dividir o tempo da CPU disponível entre os processos.
      </para>

      <para>
        Novos processos são criados através da duplicação de processos 
        existentes utilizando a chamada de sistema <command>fork</command>. 
        <xref linkend="fork" /> mostra esquematicamente uma chamada 
        fork() em ação. O processo pai solicita uma chamada fork(). O 
        kernel irá responder a esta chamada duplicando o processo e 
        nomeando um processo de <emphasis>pai</emphasis> e os outros 
        processos de <emphasis>filhos</emphasis>.
      </para>

      <figure id="fork">
        <title>Duplicando um processo</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/fork.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>
        A duplicação de processos pode ser usada para criar dois processos
        que podem rodar simultaneamente em máquinas com mais de um 
        processador. Entretanto, isto não é exatamente o ideal, porque 
        ambos os processos terão o seu próprio espaço de endereçamento. A 
        duplicação inicial da memória de um processo leva relativamente 
        muito tempo, e é muito difícil compartilhar dados entre os processos. 
        Este problema é resolvido com um conceito chamado 
        <emphasis>multithreading</emphasis>. Multithreading quer dizer que
        múltiplas instâncias de uma área de texto por rodar ao mesmo tempo, 
        compartilhando a área de dados. Essas instâncias, chamadas de threads, 
        podem ser executadas em paralelo em múltiplos processadores.
      </para>
    </sect2>
  </sect1>

  <sect1 id="concepts-fshierarchy">
    <title>Hierarquia do sistema de arquivos</title>

    <sect2 id="concepts-fshierarchy-structure">
      <title>Estrutura</title>

      <para>
        Sistemas operacionais guardam os dados em sistemas de arquivos. 
        Um sistema de arquivos é basicamente um conjunto de diretórios em 
        uma estrutura similar à de uma árvore e guardam arquivos, 
        como o sistema operacional, programas e dados do usuário. A 
        maioria dos sistemas de arquivos podem guardar várias 
        meta-informações sobre os arquivos e diretórios, como por exemplo 
        a data de execução ou alteração. No Linux há apenas uma 
        hierarquia no sistema de arquivos, isto quer dizer que não há 
        letras para as mídias (e.g. A:, C:, D:) para diferentes sistemas 
        de arquivos, como no DOS e no Windows. O sistema de arquivos é 
        similar à uma árvore, com um diretório raiz (que não possui 
        diretório pai), ramos e folhas (diretórios sem um subdiretório). 
        O diretório raiz é sempre representado por uma barra (<quote>/</quote>). 
        Os subdiretórios são separados por este caracter também.
      </para>

      <figure id="filesystem-structure">
        <title>A estrutura do sistema de arquivos</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/fs-structure.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>
        <xref linkend="filesystem-structure"/> mostra a estrutura de um 
        sistema de arquivos. Você pode ver que o diretório raiz 
        <filename>/</filename> possui dois subdiretórios:
        <filename>bin</filename> e <filename>home</filename>. O 
        <filename>home</filename> possui dois subdiretórios,
        <filename>joe</filename> e <filename>jack</filename>. O diagrama 
        mostra o caminho completo de cada diretório. A mesma notação 
        é usada para arquivos. Suponha que haja um arquivo chamado 
        <filename>memo.txt</filename> no diretório 
        <filename>/home/jack</filename>, o caminho completo do arquivo 
        é <filename>/home/jack/memo.txt</filename>.
      </para>

      <para>
        Cada diretório possui duas entradas especiais
        <quote><filename>.</filename></quote>, e 
        <quote><filename>..</filename></quote>.  A primeira refere-se 
        ao próprio diretório, e a segunda ao diretório anterior. Estas 
        entradas podem ser usadas para criar caminhos relativos. Se 
        você está no diretório <filename>jack</filename>, voce pode 
        referir-se ao diretório <filename>/home/joe</filename> como 
        <filename>../joe</filename>.
      </para>
    </sect2>

    <sect2 id="concepts-fshierarchy-mounting">
      <title>Montando</title>

      <para>
        Você deve estar se perguntando como é possível acessar outros 
        dispositivos ou partições fora da partição do disco em que a 
        raiz do sistema se encontra. O Linux usa o mesmo conceito 
        do UNIX para acessar outros sistemas de arquivos. Ele permite 
        que o administrador do sistema conecte um dispositivo à 
        qualquer diretório na estrutura do sistema de arquivos. Este 
        processo é chamado de <emphasis>montar</emphasis>. Por exemplo, 
        podemos montar o drive de CD-ROM no diretório 
        <filename>/cdrom</filename>. Se montar corretamente, os arquivos 
        do CD-ROM poderão ser acessados através deste diretório. Os 
        detalhes sobre a montagem podem ser vistas em 
        <xref linkend="basics-filesystem-mounting"/>.
      </para>
    </sect2>

    <sect2 id="concepts-fshierarchy-commondirs">
      <title>Diretórios comuns</title>

      <para>
        O Filesystem Hierarchy Standard Group (Grupo de Padrões para Sistema de
        arquivos Hierárquico) tem procurado um padrão que descreva quais
        diretórios devem estar disponíveis em sistemas GNU/Linux. Atualmente 
        as maiores distribuições utilizam como base o Padrão para Sistema 
        de arquivos Hierárquico (do inglês FHS - Filesystem Hierarchy
        Standard). Esta seção mostra alguns diretórios obrigatórios em 
        sistemas GNU/Linux.
      </para>

      <para>
        Por favor, note que o GNU/Linux não possui um diretório separado 
        para cada aplicação (como no Windows). Em vez disso, os arquivos 
        ficam ordenados por função e tipo. Por exemplo, os binários da 
        maioria dos programas mais comuns ficam armazenados em 
        <filename>/usr/bin</filename>, e suas bibliotecas em 
        <filename>/usr/lib</filename>. Esta é uma pequena mostra dos 
        diretórios mais importantes em um sistema Slackware Linux:
      </para>


      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">/bin</emphasis>: binários
            essenciais que devem sempre estar disponíveis para o caso 
            de o <filename>/usr</filename> não montar.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/dev</emphasis>: arquivos de dispositivos.
            Estes são arquivos especiais usados para acessar certos
            dispositivos.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/etc</emphasis>: o diretório 
            <filename>/etc</filename> contém todos os arquivos de 
            configuração importantes.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/home</emphasis>: contém o diretório 
            padrão de cada usuário.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/lib</emphasis>: bibliotecas essenciais 
            para o sistema (como o glibc), e módulos do kernel.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/root</emphasis>: diretório padrão do 
            usuário <emphasis>root</emphasis>.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/sbin</emphasis>: binários essenciais
            utilizados para a adminitração do sistema.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/tmp</emphasis>: um diretório que pode 
            ser modificado por qualquer usuário, utilizado para arquivos 
            temporários.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/bin</emphasis>: guarda a maioria dos 
            binários dos usuários.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/lib</emphasis>: bibliotecas que não são
            essenciais para a inicialização do sistema.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/sbin</emphasis>: binários que não são 
            essenciais para a administração do sistema.
            system administration binaries.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/var</emphasis>: arquivos de dados que variam,
            como logs.
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="concepts-devices">
    <title>Dispositivos</title>

    <sect2 id="concepts-devices-intro">
      <title>Introdução</title>

      <para>
        No GNU/Linux, praticamente tudo é representado por arquivos, incluindo 
        dispositivos. Cada sistema GNU/Linux possui um diretório com arquivos 
        especiais, chamado <filename>/dev</filename>. Cada arquivo no
        diretório <filename>/dev</filename> representa um dispositivo ou 
        pseudo-dispositivo. Esse arquivo contém dois números especiais 
        associados à ele, o número de dispositivo 
        <emphasis>principal</emphasis> e o <emphasis>secundário</emphasis>. 
        O kernel utiliza estes números para saber qual dispositivo um arquivo de 
        dispositivo representa. O exemplo a seguir mostra os números de
        dispositivo do arquivo de dispositivo <filename>/dev/zero</filename>:
      </para>

      <screen>
$ <command>file /dev/zero</command>
/dev/zero: character special (1/5)
      </screen>

      <para>
        O comando <command>file</command> pode ser utilizado para determinar 
        o tipo do arquivo. Este arquivo em particular é reconhecido como um 
        arquivo de dispositivo com o número <emphasis>1</emphasis> 
        representando o número de dispositivo principal e <emphasis>5</emphasis> 
        representando o número de dispositivo secundário.
      </para>

      <para>
        Se você instalou o pacote do código-fonte do kernel, você pode 
        encontrar uma lista com a maioria dos dispositivos e seus números 
        de dispositivos primários e secundários em 
        <filename>/usr/src/linux/Documentation/devices.txt</filename>. Uma 
        lista mais atualizada pode ser encontrada on-line no Linux Kernel Archives<footnote>
          <para>
            <ulink url="ftp://ftp.kernel.org/pub/linux/docs/device-list/" />
          </para>
        </footnote>.
      </para>

      <para>
        O kernel do Linux manipula dois tipos de dispositivos:
        <emphasis>caracter</emphasis> e <emphasis>bloco</emphasis>.
        Dispositivos de caracter podem ser lidos byte a byte, dispositivos 
        de bloco não. Este é lido bloco a bloco (4096 bytes de cada vez, 
        por exemplo). O tipo do dispositivo é determinado pela sua natureza. 
        Por exemplo, a maioria das mídias de armazenamento são dispositivos 
        de bloco, e a maioria dos dispositivos de entrada são dispositivos 
        de caracter. Dispositivos de bloco tem uma vantagem única, eles 
        podem ser utilizados em cache. Isto quer dizer que blocos lidos e 
        escritos são armazenados em uma área especial da memória do sistema 
        chamada de cache. A memória é muito mais rápida que a maioria das 
        mídias de armazenamento, então ganha-se muita performance lendo e 
        escrevendo na memória. É claro que eventualmente as mudanças tem 
        de ser escritas na mídia de armazenamento para refletir as mudanças 
        feitas no cache.
      </para>
    </sect2>

    <sect2 id="concepts-devices-atascsi">
      <title>Dispositivos ATA e SCSI</title>

      <para>
        Existem dois tipo de dispositivos de blocos que nós iremos ver com 
        detalhes, porque entender a nomenclatura destes dispositivos é 
        crucial para o particionar um disco e montá-lo. Quase todos os 
        computadores modernos da arquitetura x86 utilizam discos ATA e CD-ROMs. 
        No Linux estes dispositivos são nomeados da seguinte maneira:
      </para>

      <screen>
/dev/hda - dispositivo principal no primeiro canal ATA
/dev/hdb - dispositivo secundário no primeiro canal ATA
/dev/hdc - dispositivo principal no segundo canal ATA
/dev/hdd - dispositivo secundário no segundo canal ATA
      </screen>

      <para>
        Na maioria dos computadores com um único disco, o disco é o dispositivo 
        principal no primeiro canal ATA (<filename>/dev/hda</filename>), e 
        o CD-ROM é o dispositivo principal do segundo canal ATA. As partições
        do disco são nomeados com o nome do disco mais um número. Por exemplo, 
        <filename>/dev/hda1</filename> é a primeira partição do disco representado 
        pelo arquivo de dispositivo <filename>/dev/hda</filename>
      </para>

      <para>
        Os discos SCSI e CD-ROMs seguem uma outra convenção de nomes. O SCSI 
        não é muito utilizado em máquinas de baixo custo, mas dispositivos USB
        e Serial ATA (SATA) também são representados como discos SCSI. A
        seguinte notação é utilizada para dispositivos SCSI:
      </para>

      <screen>
/dev/sda - Primeiro disco SCSI
/dev/sdb - Segundo disco SCSI
/dev/sdc - Terceiro disco SCSI
/dev/scd0 - Primeiro CD-ROM
/dev/scd1 - Segundo CD-ROM
/dev/scd2 - Terceiro CD-ROM
      </screen>

      <para>
        Os nomes das partições são feitos da mesma maneira que os discos ATA; 
        <filename>/dev/sda1</filename> é a primeira partição do primeiro disco
        SCSI
      </para>

      <para>
        Se você está usando a implementação de RAID via software, os volumes do
        RAID estão disponíveis como <filename>/dev/mdn</filename>, onde o 
        <emphasis>n</emphasis> é o número do volume, iniciando em 0.
      </para>
    </sect2>
  </sect1>
</chapter>
