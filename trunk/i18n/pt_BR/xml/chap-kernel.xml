<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:lang="en"
xml:id="kernel">
  <title>Construindo um kernel</title>

  <sect1 xml:id="chap-kernel-intro">
    <title>Introdução</title>

    <para>
      O kernel Linux é brevemente apresentado em <xref
      linkend="chap-intro-linux" />.  Uma das vantagens do Linux é que
      os fontes completos estão disponíveis (bem como todo o sistema
      Slackware Linux).  Isto quer dizer que você pode recompilar o
      kernel.  Há muitas situações em que é útil recompilar o kernel.
      Por exemplo:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <emphasis role="bold">Deixar o kernel mais enxuto</emphasis>:
          Você pode desabilitar algumas funcionalidades do kernel para
          reduzir seu tamanho.  Isso é especialmente útil em ambiente em
          que a memória seja escassa.
        </para>
      </listitem>

      <listitem>
        <para>
          <emphasis role="bold">Otimizar o kernel</emphasis>: é possível
          otimizar o kernel.  Por exemplo, compilando-o para um processador
          específico.
        </para>
      </listitem>

      <listitem>
        <para>
          <emphasis role="bold">Suporte de hardware</emphasis>: o suporte
          para alguns hardwares não estão habilitados por padrão no kernel
          provido pelo Slackware Linux.  Um exemplo comum é o suporte a
          sistemas SMP.
        </para>
      </listitem>

      <listitem>
        <para>
          <emphasis role="bold">Utilizar patches específicos</emphasis>: existem
          muitos patches não-oficiais para o kernel Linux.  Falando de uma
          forma geral, é uma boa idéia evitar patches não-oficiais.  No entanto
          alguns softwares de terceiros, como o <ulink
          url="http://www.netraverse.com">Win4Lin</ulink>, precisam
          que você instale patches adicionais no kernel.
        </para>
      </listitem>

      <listitem>
        <para>
          Pegue os cabeçalhos apropriados e construa a infraestrutura
          disponível para construir módulos de terceiros.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Este capítulo foca na série do kernel padrão usado no Slackware
      Linux 12.0, que é o Linux 2.6.  Compilar um kernel não é realmente
      difícil, apenas mantenha sempre um kernel de backup que você possa
      usar quando algo der errado.  A compilação do Linux envolve os
      seguintes passos:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          Configurar o kernel.
        </para>
      </listitem>

      <listitem>
        <para>
          Construir o kernel.
        </para>
      </listitem>

      <listitem>
        <para>
          Construir os modules.
        </para>
      </listitem>

      <listitem>
        <para>
          Instalar o kernel e os módulos.
        </para>
      </listitem>

      <listitem>
        <para>
          Atualizar a configuração do LILO.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Neste capítulo, supomos que os fontes do kernel já estão
      disponíveis em <filename>/usr/src/linux</filename>.  Se você
      instalou os fontes do kernel a partir da série <quote>k</quote>,
      os fontes do kernel estão disponíveis em
      <filename>/usr/src/linux-kernelversion</filename>, e
      <filename>/usr/src/linux</filename> é um link simbólico para o
      diretório real dos fontes do kernel.  Então, se você usar os
      padrões do Slackware Linux, o pacote de kernel que você configurar
      estará pronto para usar.
    </para>

    <para>
      Diferente das versões mais antigas do kernel, não é mais necessário
      usar um link simbólico <filename>/usr/src/linux</filename>.  Se
      você extraiu os fontes do kernel em <filename>/usr/src</filename>,
      você pode construir o kernel em
      <filename>/usr/src/linux-&lt;version&gt;</filename>, e usar esse
      diretório para os exemplos neste capítulo.
    </para>
  </sect1>

  <sect1 xml:id="chap-kernel-build">
    <title>Configuração</title>

    <para>
      Como já mencionado acima, o primeiro passo é configurar os fontes
      do kernel.  Para facilitar a configuração do kernel, é uma boa
      idéia copiar a configuração do kernel padrão do Slackware Linux
      para os fontes do kernel.  A configuração do kernel do Slackware
      Linux é armazenada na mídia de distribuição como
      <filename>kernels/&lt;kernelname&gt;/config</filename>.  Suponha
      que você queira usar a configuração do kernel
      <filename>hugesmp.s</filename> como ponto de partida (que é o
      kernel padrão), e que você tenha um CD-ROM do Slackware Linux
      montado em <filename>/mnt/cdrom</filename>, você pode copiar a
      configuração do kernel do Slackware Linux com:
    </para>

    <screen>
      # <userinput>cp /mnt/cdrom/kernels/hugesmp.s/config
      /usr/src/linux/.config</userinput>
    </screen>

    <para>
      A configuração de um kernel em execução também pode ser obtida
      a partir de <filename>/proc/config.gz</filename> se o kernel tiver
      sido compilado com as opções <emphasis>CONFIG_IKCONFIG</emphasis>
      e <emphasis>CONFIG_IKCONFIG_PROC</emphasis>.  Todos os kernels
      padrão do Slackware Linux têm essas opções habilitadas.  Então, se
      você quiser usar a configuração de um kernel em execução, você
      pode executar:
    </para>

    <screen>
      # <userinput>zcat /proc/config.gz > /usr/src/linux/.config</userinput>
    </screen>

    <para>
      Se você estiver usando um arquivo de configuração que for para uma
      versão do kernel diferente daquela que você estiver compilando, é
      provável que ambas versões não tenham o mesmo conjunto de opções.
      Quase sempre novas opções são adicionadas (p.ex., para adição de
      novos drivers de dispositivos), e algumas vezes componentes do
      kernel são removidos.  Você pode configurar novas opções (e
      remover opções não usadas) com o comando <command>make
      oldconfig</command>:
    </para>

    <para>
      # <userinput>cd /usr/src/linux ; make oldconfig</userinput>
    </para>

    <para>
      Isto irá lhe solicitar as opções que você gostaria de compilar com
      suporte embutido (<emphasis>Y</emphasis>), compilar o suporte como
      um módulo (<emphasis>M</emphasis>), ou não incluir o suporte
      (<emphasis>N</emphasis>).  Por exemplo:
    </para>

    <screen>
      IBM ThinkPad Laptop Extras (ACPI_IBM) [N/m/y/?] (NEW)
    </screen>

    <para>
      Como você pode ver, as opções possíveis são mostradas, com a opção padrão
      destacada com letra maiúscula.  Se você apenas apertar &lt;Enter&gt;, a
      opção com a letra maiúscula será a escolhida.  Se você quiser mais
      informação sobre uma opção, você pode digitar o sinal de interrogação
      (<emphasis>?</emphasis>):
    </para>

    <screen>
      IBM ThinkPad Laptop Extras (ACPI_IBM) [N/m/y/?] (NEW)
      <userinput>?</userinput>

      This is a Linux ACPI driver for the IBM ThinkPad laptops. It adds
      support for Fn-Fx key combinations, Bluetooth control, video
      output switching, ThinkLight control, UltraBay eject and more.
      For more information about this driver see
      &lt;file:Documentation/ibm-acpi.txt&gt;
      and &lt;http://ibm-acpi.sf.net/&gt; .

      If you have an IBM ThinkPad laptop, say Y or M here.

      IBM ThinkPad Laptop Extras (ACPI_IBM) [N/m/y/?] (NEW)
    </screen>

    <para>
      A saída deste comando pode ser um tanto quanto verbosa, já que as
      opções que foram usadas no arquivo de configuração, e estão
      disponíveis no kernel em execução também são mostradas, mas suas
      confgurações serão preenchidas automaticamente baseadas no arquivo
      de configuração.
    </para>

    <para>
      Neste ponto, você pode começar a configurar o kernel em detalhes.
      Há três interfaces de configuração para o kernel.  A primeira é
      <parameter class="command">config</parameter>, que apenas lhe
      pergunta o que você quer fazer a cada opção do kernel.  Isto leva
      um bocado de tempo.  Então, normalmente isto não é uma boa maneira
      de se configurar o kernel.  Uma abordagem bem mais amigável é o
      front-end <parameter class="command">menuconfig</parameter>, que
      usa um sistema de menu que você pode usar para configurar o
      kernel.  Há um front-end gráfico também, chamado de <parameter
      class="command">xconfig</parameter>.  Você pode executar um
      front-end de configuração alterando para o diretório do fontes do
      kernel e executando <command>make &lt;front-end&gt;</command>.
      Por exemplo, para configurar o kernel com a interface de menu,
      você pode usar os seguintes comandos:
    </para>

    <screen>
      # <userinput>cd /usr/src/linux</userinput>
      # <userinput>make menuconfig</userinput>
    </screen>

    <para>
      É claro, se você preferir, você também pode editar o arquivo
      <filename>.config</filename> diretamente com seu editor de texto
      preferido.
    </para>

    <para>
      Como já visto rapidamente anteriormente, na configuração do kernel
      há basicamente três opções para cada escolha: <quote>n</quote>
      desabilita uma funcionalidade, <quote>y</quote> habilita, e
      <quote>m</quote> a compila como um módulo.  A configuração padrão
      do kernel do Slackware Linux é uma configuração muito boa, que
      inclui o suporte a maioria dos controladores de disco e sistemas
      de arquivos, e o resto é compilado como módulo.  Quaisquer que
      sejam as escolhas que você faça, você precisa se certificar que
      tanto o driver para o controlador de disco e o suporte para o tipo
      de sistema de arquivo de sua partição raiz sejam incluídos.
      Quando não estão presentes, o kernel não é capaz de montar o
      sistema de arquivos raiz, e o kernel irá <quote>entrar em
      pânico</quote> pois não poderá manipular o programa de
      <command>init</command> para a inicialização do sistema.
    </para>

    <note>
      <para>
        É sempre uma boa idéia manter seu kernel antigo com seus respectivos
        módulos, no caso de haver um erro na sua configuração.  Se o kernel
        a ser compilado tiver o mesmo número de versão que o kernel
        atualmente em execução, você deveria considerar seriamente modificar
        a opção <emphasis>CONFIG_LOCALVERSION</emphasis>.  A string
        especificada nesta opção é anexada ao número de versão.  Por
        exemplo, se a versão do kernel for 2.6.21.6, e
        <emphasis>CONFIG_LOCALVERSION</emphasis> estiver definida como
        <emphasis>"-smp-ddk"</emphasis>, o kernel será
        <emphasis>2.6.21.6-smp-ddk</emphasis>.
      </para>

      <para>
        Se você não modificar a versão do kernel desta maneira, a instalação
        de módulos do novo kernel irá sobrescrever os módulos de seu kernel
        atualmente em execução.  E isto é muito inconveniente se você
        precisar voltar ao kernel anterior.
      </para>
    </note>
  </sect1>

  <sect1 xml:id="chap-kernel-compile">
    <title>Compilação</title>

    <para>
      A compilação do kernel usada consiste de múltiplos passos, mas os
      kernels Linux da série 2.6 podem ser compilados executando-se
      <command>make</command> no diretório dos fontes do kernel.  Isto
      pode calcular dependências, construir o kernel, e também irá
      construir e ligar os módulos do kernel.
    </para>

    <screen>
      # <userinput>cd /usr/src/linux</userinput>
      # <userinput>make</userinput>
    </screen>

    <para>
      Depois que a compilação estiver concluída, as árvore conterá os
      módulos compilados além de uma imagem compactada do kernel,
      com o nome de <filename>bzImage</filename> em
      <filename>/usr/src/linux/arch/i386/boot</filename>.  Você agora
      pode continuar com a instalação do kernel e de seus módulos.
    </para>
  </sect1>

  <sect1 xml:id="chap-kernel-install">
    <title>Instalação</title>

    <sect2 xml:id="chap-kernel-install-kernel">
      <title>Instalando o kernel</title>

      <para>
        O próximo passo é instalar o kernel e os módulos do kernel.  Vamos
        começar com a instalação dos módulos do kernel, já que isso pode ser
        feito com apenas um comando dentro do diretório dos fontes do
        kernel:
      </para>

      <screen>
        # <userinput>make modules_install</userinput>
      </screen>

      <para>
        Isto irá instalar os módulos em
        <filename>/lib/modules/&lt;kernelversion&gt;</filename>.  Se você
        estiver substituindo um kernel exatamente com o mesmo número de
        versão, é uma boa idéia remover os módulos antigos antes de instalar
        os nomes.  P.ex.:
      </para>

      <screen>
        # <userinput>rm -rf /lib/modules/2.6.21.5-smp</userinput>
      </screen>

      <para>
        Você pode <quote>instalar</quote> o kernel apenas copiando-o para o
        diretório <filename>/boot</filename>.  Você pode dar a ele qualquer
        nome que você queira, mas é uma boa idéia usar algum tipo de
        convenção de nomenclatura, como
        <filename>vmlinuz-version</filename>.  Por exemplo, se você for
        renomeá-lo como <filename>vmlinuz-2.6.21.5-smp-ddk</filename>, você
        pode copiá-lo a partir da árvore dos fontes do kernel com:
      </para>

      <screen>
        # <userinput>cp arch/i386/boot/bzImage
        /boot/vmlinuz-2.6.21.5-smp-ddk</userinput>
      </screen>

      <para>
        Neste ponto tudo já está concluído.  O último passo é adicionar o
        novo kernel à configuração do carregador de inicialização do Linux
        (LILO).
      </para>
    </sect2>

    <sect2 xml:id="chap-kernel-install-lilo">
      <title>Configurando o LILO</title>

      <para>
        O <acronym>LILO</acronym> (Linux Loader) é o carregador de
        inicialização padrão usado pelo Slackware Linux.  A configuração
        do LILO funciona em dois passos; o primeiro passo é alterar a
        configuração do LILO em <filename>/etc/lilo.conf</filename>.  O
        segundo passo é executar o comando <command>lilo</command>, que
        irá escrever a configuração do LILO no carregador de
        inicialização.  A configuração do LILO já possui uma entrada
        para o kernel atual que você está usando.  É uma boa idéia
        manter essa entrada, como uma opção de recuperação em caso de
        erros se o novo kernel não funcionar.  Se você for até o final
        do arquivo <filename>/etc/lilo.conf</filename> você verá esta
        entrada como algo parecido com:
      </para>

      <screen>
# Linux bootable partition config begins
image = /boot/vmlinuz
  root = /dev/hda5
  label = Slack
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking
# Linux bootable partition config ends
      </screen>

      <para>
        A maneira mais fácil de adicionar um novo kernel é duplicar a
        entrada existente, e então editar a primeira entrada,
        alterando as opções <parameter>image</parameter>, e
        <parameter>label</parameter>.  Depois de alterado, o exemplo
        acima deveria se parecer com isto:
      </para>

      <screen>
# Linux bootable partition config begins
image = /boot/vmlinuz-2.6.21.5-smp-ddk
  root = /dev/hda5
  label = Slack
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking

image = /boot/vmlinuz
  root = /dev/hda5
  label = SlackOld
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking
# Linux bootable partition config ends
      </screen>

      <para>
        Como você pode ver, a primeira entrada <parameter>image</parameter>
        aponta para o novo kernel, e o rótulo da segunda entrada foi
        modificado para <quote>SlackOld</quote>.  O LILO irá iniciar a
        primeira imagem automaticamente.  Você agora pode instalar esta nova
        configuração do LILO com o comando <command>lilo</command>:
      </para>

      <screen>
# <userinput>lilo</userinput>
Added Slack *
Added SlackOld
      </screen>

      <para>
        Na próxima inicialização do sistema, ambas as entradas estarão
        disponíveis, e a entrada <quote>Slack</quote> será inicializada por
        padrão.
      </para>

      <note>
        <para>
          Se você quiser que o LILO mostre um menu com as entradas
          configuradas no <filename>lilo.conf</filename> a cada
          inicialização, certifique-se de ter adicionado uma linha contendo
        </para>

        <screen>
prompt
        </screen>

        <para>
          ao <filename>lilo.conf</filename>.  De outra forma, o LILO irá
          inicializar a entrada padrão que estiver definida com
          <emphasis>default=&lt;name&gt;</emphasis>, ou então a primeira
          entrada existente quando nenhum kernel padrão for especificado.
          Você pode acessar o menu com as entradas a qualquer tempo
          segurando a tecla &lt;Shift&gt; quando o LILO for iniciado.
        </para>
      </note>
    </sect2>
  </sect1>
</chapter>
