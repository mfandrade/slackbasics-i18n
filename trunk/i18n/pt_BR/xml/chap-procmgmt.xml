<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xmlns:xl="http://www.w3.org/1999/xlink" xml:lang="en"
	 xml:id="chap-procmgmt">

  <title>Gerência de processos</title>

  <sect1 xml:id="chap-procmgmt-theory">
    <title>Teoria</title>

    <sect2 xml:id="chap-procmgmt-theory-proc">
      <title>Processos</title>

      <para>
    Uma instância de um programa que está executando é 
    chamada de <emphasis>processo</emphasis>. Cada processo
    tem sua própria área de memória chamada de <emphasis>espaço de 
        endereçamento</emphasis> do processo. Esse espaço de endereçamento
    é constituído de duas áreas: <emphasis>área de texto</emphasis> e <emphasis>área de dados</emphasis>.
    A área de texto contém o código do programa e diz ao sistema o que deve ser feito. A área de dados
    armazena constantes e dados em tempo de execução do processo. Como existem vários processos em um 
    sistema e apenas um ou poucos processadores, o kernel do sistema precisa dividir
    o tempo de processamento entre os processos. Essa tarefa é chamada de: <emphasis>compartilhamento de tempo</emphasis>.
      </para>

      <table xml:id="chap-procmgmt-theory-proc-struct">
	<title>A estrutura de um processo</title>

	<tgroup cols="2">
	  <thead>
	    <row><entry>Campo</entry><entry>Descrição</entry></row>
	  </thead>

	  <tbody>
	    <row>
	      <entry>pid</entry><entry>O identificador numérico do processo</entry>
	    </row>
	    <row>
	      <entry>ppid</entry><entry>O identificador do processo</entry>
	    </row>
	    <row>
	      <entry>euid</entry><entry>O ID efetivo (nome do usuário) que está executando o processo</entry>
	    </row>
	    <row>
	      <entry>ruid</entry><entry>O ID real (id numérico) do usuário que está executando o processo</entry>
	    </row>
	    <row>
	      <entry>egid</entry><entry>O ID do grupo (nome do grupo) do processo</entry>
	    </row>
	    <row>
	      <entry>rgid</entry><entry>O ID real do grupo (id numérico) do processo</entry>
	    </row>
	    <row>
	      <entry>fd</entry><entry>Ponteiro para a lista de descritores de arquivos abertos</entry>
	    </row>
	    <row>
	      <entry>vmspace</entry><entry>Ponteiro para espaço de endereçamento do processo</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
          <xref linkend="chap-procmgmt-theory-proc-struct" /> lista os campos mais
          importantes onde o kernel armazena informações sobre processos. Cada processo
          pode ser identificado exclusivamente pelo seu <emphasis>PID</emphasis> (process identifier),
          que é nada mais do que um número (sempre positivo).
          Como veremos mais adiante, um usuário pode facilmente saber o PID de um processo.
          Cada processo é associado a um <emphasis>UID</emphasis> (user ID) e a um <emphasis>GID</emphasis> (group ID) no sistema.
          Cada process possui um <emphasis>UID real</emphasis>, que é o UID pelo
          qual o processo foi iniciado, e um <emphasis>UID efetivo</emphasis>, que é o UID com o qual o
          processo opera. Normalmente o UID real é igual ao UID efetivo, mas alguns programas
          pedem ao sistema que troque seu UID efetivo. O UID efetivo é usado para controle de acesso. Isto
          significa que se um usuário chamado joe executar um comando, ele apenas poderá arquivos onde
          joe tenha permissão de leitura.  Além disso, um processo também tem
          um <emphasis>GID real</emphasis> e um <emphasis>GID efetivo</emphasis>.
      </para>

      <para>
          Muitos processos abrem arquivos. O <foreignphrase>handle</foreignphrase> utilizado
          para operar o arquivo é chamado de descritor de arquivo. O kernel manipula
          uma lista de descritores de arquivo para cada processo. O campo <emphasis>fd</emphasis> contém
          um ponteiro para a lista de arquivos abertos. O campo <emphasis>vmspace</emphasis> aponta o espaço
          de endereçamento do processo.
      </para>

      <!-- XXX - make more sophisticated (swap)? -->
      <figure xml:id="chap-procmgmt-theory-proc-procstates">
	<title>Estados do Processo</title>

	<mediaobject>
	  <imageobject>
	    <imagedata format="PNG" fileref="../../images/procstates.png"/>
	  </imageobject>
	  <imageobject>
	    <imagedata format="SVG" fileref="../../images/procstates.svg"/>
	  </imageobject>
	</mediaobject>
      </figure>

      <para>
    Nem todo processo precisa da CPU em um dado momento. Em um
    determinado momento um(ns) processo(s) pode(m) estar aguardando o término de uma operação
    de Entrada/Saída (<emphasis>I/O</emphasis>). 
    Sem levar em consideração pequenos detalhes, os processos normalmente possuem os 
    seguintes estados: <emphasis>iniciado</emphasis>, <emphasis>executando</emphasis>, <emphasis>bloqueado</emphasis>, 
    <emphasis>pronto</emphasis> (para executar), <emphasis>bloqueado</emphasis> (aguardando por I/O) ou 
    <emphasis>terminado</emphasis>.
    <xref linkend="chap-procmgmt-theory-proc-procstates" /> mostra o ciclo de vida
    de um processo. Um processo que é terminado mas cuja tabela de informações não foi
    removida é normalmente chamado de <emphasis>processo zumbi</emphasis>. Processos
    zumbi são úteis para permitir que o processo pai leia o status de saída do processo, ou 
    então para reservar temporariamente a entrada na tabela de processos.
      </para>
    </sect2>

    <sect2 xml:id="chap-procmgmt-theory-proc-new">
      <title>Criando novos processos</title>

      <para>
    Novos processos são criados com a chamada de sistema (<foreignphrase>system call</foreignphrase>) <emphasis>fork()</emphasis>.
    Essa chamada de sistema copia o espaço de endereçamento e informações do processo que a executou e cria o novo
    processo, chamado processo filho, com um PID diferente. O processo filho continuará
    a execução a partir do mesmo ponto que o processo pai, mas vai obter um valor de retorno diferente da chamada
    de sistema <emphasis>fork()</emphasis>. Baseado nesse valor de retorno o processo pai
    pode decidir como continuar a execução. O trecho de código C a seguir mostra como funciona uma chamada a <emphasis>form()</emphasis>: 
      </para>

      <programlisting>
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  pid_t pid = fork();
  if (pid == 0)
    printf("Hi, I am the child!\n");
  else
    printf("Hi, I am the parent, the child PID is %d!\n", pid);

  return 0;
}
      </programlisting>

      <para>
          .	
          Este pequeno programa executa a <emphasis>fork()</emphasis> e armazena
          o valor retornado por <emphasis>fork()</emphasis> na variável pid. <emphasis>fork()</emphasis> o
          valor <emphasis>0</emphasis> para o processo filho e o PID do processo filho para o processo pai.
          Desde que isso tenha ocorrido, nós podemos uma simples estrutura condicional para verificar
          o valor da variável <emphasis>pid</emphasis> e exibir a mensagem que for mais apropriada.
      </para>

      <para>
    Você deve estar curioso para saber como é possível iniciar novos programas já
    que a chamada a <emphasis>fork()</emphasis> duplica um processo existente. 
    Essa é uma boa questão já que não é possível executar novos programas utilizando apenas <emphasis>fork()</emphasis>.
    O kernel UNIX fornece um conjunto de chamadas
    de sistema, a começar pela <emphasis>exec</emphasis>, que carrega um novo programa no
    no processo corrente. Nós vimos no início deste capítulo que um processo
    é um programa em execução -- um processo foi construído na memória a partir de uma imagem
    de um programa que é armazenado em uma mídia de armazenamento. A chamada
    de sistema <emphasis>exec</emphasis> então oferece a um processo em execução a facilidade
    de substituir seu conteúdo com um programa armazenado em alguma mídia. Por si só isto não
    é realmente muito útil visto que cada vez que a chamada de sistema <emphasis>exec</emphasis> é
    executada o código (programa) original é removido do processo. Isso pode ser conferido
    com o código C a seguir:
      </para>

      <programlisting>
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  execve("/bin/ls", NULL, NULL);

  /* This will never be printed, unless execve() fails. */
  printf("Hello world!\n");

  return 0;
}
      </programlisting>

      <para>
          Esse programa executa um <command>ls</command> usando a chamada de sistema <emphasis>execve()</emphasis>.
          A mensagem mostrada com <emphasis>printf()</emphasis> nunca será mostrada porque a imagem do 
          programa em execução será substituída pelo <command>ls</command>.
          A combinação de <emphasis>fork()</emphasis> e <emphasis>exec</emphasis> é bem poderosa.
          Um processo pode fazer um fork dele mesmo e deixar que o processo filho <quote>encerre</quote> por conta
          própria para executar outro programa. O programa a seguir demonstra esse funcionamento:
      </para>

      <programlisting>
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  pid_t pid = fork();
  if (pid == 0)
    execve("/bin/ls", NULL, NULL);

  printf("Hello world!");

  return 0;
}
      </programlisting>

      <para>
    Este programa primeiramente faz um fork de si próprio. A imagem do programa do processo 
    filho será substituída pelo <command>ls</command>, enquanto que o processo
    pai mostra na tela a mensagem <quote>Hello world!</quote> e encerra a execução.
      </para>

      <para>
    Esse procedimento é seguido por muitos programas, incluindo 
    o shell, quando um comando é executado a partir de um prompt de comando.
    De fato, todos os processos em um sistema UNIX são direta ou indiretamente
    derivados do processo <emphasis>init</emphasis> que é o primeiro programa
    iniciado em um sistema UNIX.
      </para>

      <!-- XXX - Describe what is inherited when exec is called. -->
    </sect2>

    <sect2 xml:id="chap-procmgmt-theory-proc-threads">
      <title>Threads</title>

      <para>
    Apesar de forks serem muito úteis para permitir
    um certo paralelismo<footnote><para>Por exemplo um servidor
    web pode fazer fork de vários processos filhos para 
    gerenciar requisições</para></footnote>, eles podem
    ser dispendiosos em alguns casos. Copiar todo um processo
    consome algum tempo e ainda há o custo envolvido caso os processos
    compartilhem dados. Essa situação é resolvida com uma alternativa
    mais leve, já sabida, que é utilizar mais de uma thread de execução. Cada
    thread pode ser executada separadamente, porém, os dados do processo são
    compartilhados entre as threads.
      </para>

      <para>
          Escrever bons <emphasis>programas multi-thread</emphasis> requer bons
          conhecimentos sobre comparilhamento de dados e técnicas
          de <foreignphrase>locking</foreignphrase> (gerenciar a disputa por uma mesma área).
          Já que todos os dados são compartilhados, um programa mal feito pode caminhar
          para problemas de disputa.
      </para>
    </sect2>

    <!-- XXX - Add a section about capabilities. -->
  </sect1>

  <sect1 xml:id="chap-procmanagement-analyzing">
    <title>Analisando processos em execução</title>

    <sect2 xml:id="chap-procmanagement-analyzing-listing">
      <title>Listando processos em execução</title>

      <para>
    Sistemas UNIX fornecem o comando <command>ps</command> para exibir
    uma lista de processos que estão em execução. Infelizmente 
    esse é um exemplo dos problemas da falta de padronização. O BSD
    e variantes do System V possuem o <command>ps</command> com seu 
    próprio conjunto de opções. Felizmente o GNU/Linux implementa ambos
    os conjuntos de opção, do BSD e System V, e também, algumas opções
    a mais no estilo GNU. Opções precedidas com um traço são interpretadas
    como opções do System V e opções sem o traço são tratadas como opções BSD.
    Nós vamos descrever as opções do System V nesta seção.
      </para>

      <para>
          Se for executado o comando <command>ps</command> sem qualquer parâmetro,
          o resultado será uma lista de todos os processos que pertencem
          ao usuário que executou o <command>ps</command> e que são relativos
         ao terminal que está sendo utilizado. Por exemplo:
      </para>

      <screen>
$ <userinput>ps</userinput>
  PID TTY          TIME CMD
 8844 pts/5    00:00:00 bash
 8862 pts/5    00:00:00 ps
      </screen>

      <para>
    Muitas informações podem ser extraídas do resultado obtido. Como
    você pode ver, dois processos são listados, o shell que usamos
    para executar o <command>ps</command> (<emphasis>bash</emphasis>) e o
    próprio comando <command>ps</command>. Nesse caso existem quatro campos
    de informação. <emphasis>PID</emphasis> é o ID do processo, <emphasis>TTY</emphasis> é
    o terminal onde foi executado o comando, <emphasis>TIME</emphasis> é o tempo gasto pelo
    processador e <emphasis>CMD</emphasis> é o comando ou programa cuja cópia está rodando.
    Os campos que são mostrados por padrão podem variar de acordo com o sistema, mas ao menos
    os mostrados anteriormente serão exibidos (talvez variando um pouco o nome dos campos).
      </para>

      <para>
    Talvez você queira uma visão maior dos processos que estão em execução.
    Ao adicionar a opção <parameter class="command">-a</parameter> você verá todos os processos
   associados a qualquer erminal. 
   Por exemplo:
      </para>

      <screen>
$ <userinput>ps -a</userinput>
  PID TTY          TIME CMD
 7487 pts/1    00:00:00 less
 8556 pts/4    00:00:10 emacs-x
11324 pts/3    00:00:00 ps
      </screen>

      <para>
    Como você pode ver, processos de diferentes terminais foram exibidos, embora,
    em contraste com a saída da execução de um simples <command>ps</command>, apenas
    processos do terminal corrente são mostrados. Por exemplo, o shell que executou o
    <command>ps</command> não foi exibido.
      </para>

      <para>
    Você também pode exibir todos os processos que estão em execução, inclusive
    processos que não estão associados ao terminal onde você está executando o <command>ps</command>
    Para isso você pode usar a opção <parameter class="command">-A</parameter>:
      </para>

      <screen>
$ <userinput>ps -A | head -n 10</userinput>
  PID TTY          TIME CMD
    1 ?        00:00:01 init
    2 ?        00:00:00 migration/0
    3 ?        00:00:00 ksoftirqd/0
    4 ?        00:00:00 watchdog/0
    5 ?        00:00:00 migration/1
    6 ?        00:00:00 ksoftirqd/1
    7 ?        00:00:00 watchdog/1
    8 ?        00:00:00 events/0
    9 ?        00:00:00 events/1
      </screen>

      <para>
       Você pode mostrar todos os processos com um dado ID de usuário com a
       opção <emphasis>-U</emphasis>.  Esta opção aceita um nome de usuário
       como parâmetro, ou múltiplos nomes de usuários que são separados por
       uma vírgula.  O seguinte comando mostra todos os processos cujo ID
       de usuário seja <emphasis>xfs</emphasis> ou
       <emphasis>rpc</emphasis>:
      </para>

      <screen>
$ <userinput>ps -U xfs,rpc</userinput>
  PID TTY          TIME CMD
 2409 ?        00:00:00 portmap
 2784 ?        00:00:00 xfs
      </screen>

      <para>
       Da mesma forma, você também pode exibir os processos com um
       determinado ID de grupo com a opção <emphasis>-G</emphasis>:
      </para>

      <screen>
$ <userinput>ps -G messagebus,haldaemon</userinput>
  PID TTY          TIME CMD
 8233 ?        00:00:00 dbus-daemon
11312 ?        00:00:00 hald
11320 ?        00:00:00 hald-addon-keyb
11323 ?        00:00:00 hald-addon-acpi
      </screen>

      <para>
       Se você preferir ter uma listagem dos terminais físicos ou de
       pseudo-terminais, você pode usar a opção <parameter
	class="command">-t</parameter>:
      </para>

      <screen>
$ <userinput>ps -t tty2</userinput>
  PID TTY          TIME CMD
 2655 tty2     00:00:00 getty
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-procmanagement-managing">
    <title>Gerenciando processos</title>

    <sect2 xml:id="chap-procmanagement-managing-signals">
      <title>Enviando sinais a um processo</title>

      <para>
       Sinais são uma forma crua, porém efetiva de comunicação
       inter-processos (IPC).  Basicamente, um sinal é um número com um
       significado especial que é informado a um processo.  Para todos os
       sinais, há manipuladores padrão de sinal.  Os processos podem
       instalar seus próprios manipuladores de sinal, ou optar por ignorar
       sinais.  Alguns sinais (normalmente o SIGKILL e SIGSTOP) não podem
       ser ignorados.  Todos os sinais possuem convenientes nomes
       significativos.
      </para>

      <para>
       Apenas alguns poucos sinais normalmente são interessantes para uso
       interativo em sistemas UNIX(-like).  São estes (seguidos de seus
       respectivos números):
      </para>

      <itemizedlist>
	<listitem>
	  <para><emphasis>SIGKILL (9):</emphasis> mata um processo
      abruptamente.</para>
	</listitem>
	<listitem>
	  <para><emphasis>SIGTERM (15):</emphasis> solicita o término de um
      processo.  Como é uma solicitação, um programa pode ignorá-lo,
      diferentemente do <emphasis>SIGKILL</emphasis>.</para>
	</listitem>
	<listitem>
	  <para><emphasis>SIGHUP (1):</emphasis> Tradicionalmente, este
      significava a suspensão de um terminal.  Mas hoje em dia, alguns
      daemons (como o <emphasis>inetd</emphasis>) relêem suas
      configurações quando este sinal é enviado.</para>
	</listitem>
      </itemizedlist>

      <para>
       O comando <command>kill</command> é usado para enviar um sinal a um
       processo.  Por padrão, o <command>kill</command> envia o sinal
       <emphasis>SIGTERM</emphasis>.  Para enviar este sinal, o ID do
       processo para o qual você enviar o sinal deve ser informado como
       parâmetro.  Por exemplo:
      </para>

      <screen>
$ <userinput>kill 15631</userinput>
      </screen>

      <para>
       Para enviar um outro sinal, você pode usar uma das seguintes opções:
	   <emphasis>-númerodosinal</emphasis> ou
       <emphasis>-nomedosinal</emphasis>.  Então, ambos os comandos a seguir
       enviam o sinal <emphasis>SIGKILL</emphasis> ao processo que possui o
       ID <emphasis>15631</emphasis>:
      </para>

      <screen>
$ <userinput>kill -9 15631</userinput>
      </screen>

      <screen>
$ <userinput>kill -SIGKILL 15631</userinput>
      </screen>

      <!-- XXX - Add note about what users can send signals. -->
    </sect2>

    <sect2 xml:id="chap-procmanagement-managing-nice">
        <title>Sendo gentil<footnote><para>N.T.: <emphasis>Being nice with
        others</emphasis>.  A tradução <emphasis>gentil</emphasis>
        refere-se ao nome do comando:
        <quote>nice</quote>.</para></footnote> com os outros</title>

      <para>
       Em um ato de autruísmo você pode ser gentil com os outros
       usuários dos recursos do computador.  Se você planeja executar um
       processo que irá fazer uso extensivo de tempo de CPI, mas não
       quer que isso interfira no trabalho dos outros usuários no
       sistema (ou de outros processos), você pode associar algum grau
       de 'gentileza' para um processo.  Praticamente, isto significa
       que você será capaz de influenciar a prioridade de escalonamento
       de seu processo.  Processos mais gentis possuem uma prioridade
       menor de escalonamento.  A prioridade normal de um processo é 
       <emphasis>0</emphasis>, e pode ser modificada executando-se um
       programa com o comando <command>nice</command>.  A opção
       <emphasis>-n [niceness]</emphasis> pode ser usada para
       especificar o grau de gentileza:
      </para>

      <screen>
$ <userinput>nice -n 20 cputimewaster</userinput>
      </screen>

      <para>
       O valor máximo deste grau de gentileza é dependente de
       plataforma.  Se um programa tiver sido iniciado pelo comando 
       <command>nice</command>, mas nenhum valor for especificado, será
       atribuído o valor padrão de <emphasis>10</emphasis>.  Se você
       estiver pensando: sim, você também pode ser 'fominha' e requerer
       mais prioridade para seu processo, mas esta permissão é restrita
       ao usuário <emphasis>root</emphasis>.  No caso, você pode
       aumentar a prioridade de um processo especificando um valor
       negativo do grau de gentileza.
      </para>

      <para>
       Você também pode modificar o grau de gentileza de um processo em
       execução com o comando <command>renice</command>.  Isto pode ser
       feito por IDs de processo (<parameter class="command">-p
       PIDs</parameter>), por usuários (<parameter class="command">-u
       user/uid</parameter>), e por grupos efetivos (<parameter
       class="command">-g group/gid</parameter>).  O novo valor é
       especificado como primeiro parâmetro do comando.
      </para>

      <para>
       O grau de gentileza de um processo só pode ser aumentado.  E, é
       claro, nenhum usuário além do <emphasis>root</emphasis> pode
       modificar a prioridade de processos de outros usuários.
      </para>

      <para>
       Vamos ver um exemplo, para definir o grau de gentileza do
       processo com PID <emphasis>3108</emphasis> para
       <emphasis>14</emphasis>, você pode usar o seguinte comando:
      </para>

      <screen>
$ <command>renice 14 -p 3108</command>
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-procmanagement-jobcontrol">
    <title>Controle de tarefas</title>

    <para>
      Frequentemente é útil pode agrupar processos para executar
      operações em um conjunto de processos, por exemplo, para
      distribuir um sinal a todos os processos em um grupo ao invés
      de apenas para um único processo.  Não é surpresa que estes
      conjuntos de processos sejam chamados de <emphasis>grupos de
      programas</emphasis> no UNIX.  Depois de um fork, um processo
      filho passa automaticamente a ser um membro do grupo de
      processo de seu pai.  Além disso, novos grupos de processos
      podem ser criados promovendo-se um processo a líder do grupo
      de processos, e adicionando outros processos ao grupo.  O ID
      do grupo de processos é o mesmo PID do processo líder do grupo.
    </para>

    <para>
      Virtualmente, todos os shells de sistemas UNIX modernos dispõem
      de processos que são criados através da chamada de um comando de
      seu próprio grupo de processo.  Todos os processo em um duto
      (pipeline) normalmente são adicionados a um grupo de processo.
      Se os comandos que criam o duto seguinte forem executados
    </para>

    <screen>
cat | tr -s ' ' | egrep 'foob.r'
    </screen>

    <para>
      o shell prontamente executará os seguintes passos:
    </para>

    <orderedlist>
      <listitem>
	<para>
	  Três processos filhos são criados.
	</para>
      </listitem>
      <listitem>
	<para>
	  O primeiro processo no duto é colocado em um grupo de processo
	  com seu próprio PID como o ID do grupo de processo, o que o 
	  torna o processo líder.  Os outros processos no duto são
	  adicionados ao grupo do processo.
	</para>
      </listitem>
      <listitem>
	<para>
	  Os descritores de arquivos dos processo são reconfigurados de
	  acordo para formar o duto.
	</para>
      </listitem>
      <listitem>
	<para>
	  Os programas no duto são enfim executados.
	</para>
      </listitem>
    </orderedlist>

    <para>
      O shell usa grupos de processo para implementar <emphasis>controle
      de tarefas</emphasis>.  Um shell pode executar múltiplas tarefas em
      segundo plano, pode haver diversas tarefas paradas e uma tarefa
      pode estar em primeiro plano.  Uma tarefa em primeiro plano é levada
      ao terminal por sua entrada padrão (o que significa que ela é a
      tarefa que obtém uma entrada do usuário).
    </para>

    <sect2 xml:id="chap-procmgmt-jobcontrol-stopping">
      <title>Parando e continuando uma tarefa</title>
      
      <para>
	Uma tarefa que está em primeiro plano (ou seja, uma tarefa que
	esteja potencialmente aceitando entradas do usuário a partir do
	terminal) pode ser parada pressionando-se <emphasis>Ctrl-z</emphasis>
	(pressionando ambas as teclas 'Ctrl' e 'z' ao mesmo tempo).  Isto
	irá parar a tarefa e devolverá o controle do terminal de volta para o
	shell.  Vamos experimentar isto com o comando <command>sleep</command>,
	o qual causa uma espera pela quantidade de segundo informada como
	argumento:
      </para>

      <screen>
$ <userinput>sleep 3600</userinput>
<userinput>Ctrl-z</userinput>
[1]+  Stopped                 sleep 3600
      </screen>

      <para>
	O grupo de processo, ao qual nos referíamos como uma tarefa, agora
	foi parado, significando que o <command>sleep</command> parou sua
	contagem - sua execução está completamente parada.  Você pode obter
	uma lista de tarefas com o comando <command>jobs</command>:
      </para>

      <screen>
$ <userinput>jobs</userinput>
[1]+  Stopped                 sleep 3600
      </screen>

      <para>
	Isto mostra o número da tarefa (<emphasis>1</emphasis>), seu estado,
	e o comando que foi usado para iniciá-la.  Agora vamos executar um
	outro programa, pará-lo também, e dar outra olhada na listagem de
	tarefas.
      </para>

      <screen>
$ <userinput>cat</userinput>
<userinput>Ctrl-z</userinput>
[2]+  Stopped                 cat
$ <userinput>jobs</userinput>
[1]-  Stopped                 sleep 3600
[2]+  Stopped                 cat
      </screen>

      <para>
	Como esperado, a segunda tarefa também está parada, e a ela foi
	associado o número <emphasis>2</emphasis> como número de tarefa. O
	sinal de mais (<emphasis>+</emphasis>) depois do número da primeira
	tarefa foi trocado por um sinal de menos (<emphasis>-</emphasis>),
	e 	a segunda tarefa agora está marcada com um sinal de mais.  
	O sinal	de mais é usado para indicar a <emphasis>tarefa
	atual</emphasis>.  Os comandos <command>bg</command> e
	<command>fg</command>, que veremos em instantes, irão operar sobre
	a tarefa atual quando nenhuma tarefa for informada como parâmetro.
      </para>
     
      <!-- XXX - Document under what circumstances a job becomes the
                 current job. -->

      <para>
        Normalmente, quando você está trabalhando com tarefas, você irá
        querer mover tarefas para o primeiro plano novamente.  Isto é feito
        com o comando <command>fg</command>.  Executar <command>fg</command>
        sem nenhum parâmetro irá trazer a tarefa atual para o primeiro
        plano.  Muitos shells irão exibir o comando que foi movido para o
        primeiro plao para lhe dar uma indicação de sobre qual processo
        estamos nos referindo:
      </para>

      <screen>
$ <userinput>fg</userinput>
cat
      </screen>

      <para>
	É claro que nem sempre é útil colocar a tarefa atual no primeiro
	plano.  Você pode colocar outra tarefa no primeiro plano informando
	o número da tarefa junto com um sinal de porcentagem
	(<emphasis>%</emphasis>) como um argumetno para o comando 
	<command>fg</command>:
      </para>

      <screen>
$ <userinput>fg %1</userinput>
sleep 3600
      </screen>

      <para>
	Chavear tarefas parando-as e então recolocando-as em primeiro plano
	é quase sempre muito útil quando o shell é usado interativamente.  
	Por exemplo, suponha que você está editando um arquivo com um editor
	de texto, e que você gostaria de executar algum outro comando e
	então continuar editando.  Você poderia parar o editor com
	<emphasis>Ctrl-z</emphasis>, executar um comando, e colocar o editor
	em primeiro plano de novo com <command>fg</command>.
      </para>
    </sect2>

    <sect2 xml:id="chap-procmgmt-jobcontrol-background">
      <title>Tarefas em segundo plano</title>

      <para>
	Além de executar em primeiro plano, tarefas também podem ser
	executadas em segundo plano, ou background.  Isto significa que ela
	ainda continuarão rodando, mas a entrada do terminal não é
	redirecionada para processos em segundo plano.  A maioria dos shells
	configuram tarefas em segundo plano para direcionar sua saída para o
	terminal de shell onde as tarefas foram iniciadas.
      </para>

      <para>
	Um processo que esteja parado pode ser continuado em segundo plano
	com o comando <command>bg</command> command:
      </para>

      <screen>
$ <userinput>sleep 3600</userinput>
  
[1]+  Stopped                 sleep 3600
$ <userinput>bg</userinput>
[1]+ sleep 3600 &amp;
$
      </screen>

      <para>
	Você pode ver que a tarefa está de fato executando com o comando
	<command>jobs</command>:
      </para>

      <screen>
$ <userinput>jobs</userinput>
[1]+  Running                 sleep 3600 &amp;
      </screen>

      <para>
	Como para o <command>fg</command>, você também pode mover outra tarefa
	além da tarefa atual para segundo plano especificando seu número de
	tarefa para o comando <command>bg</command>:
      </para>

      <screen>
$ <command>bg %1</command>
[1]+ sleep 3600 &amp;
      </screen>

      <para>
	Você também pode colocar uma tarefa em segundo plano diretamente ao
	iniciá-la, adicionando um <emphasis><quote>e</quote> comercial</emphasis>
	(&amp;) ao comando ou a um duto de comando.  Por exemplo:
      </para>

      <screen>
$ <userinput>sleep 3600 &amp;</userinput>
[1] 5078
      </screen>

      <!-- XXX - behavior of background processes when a shell is
                 terminated. -->
    </sect2>
  </sect1>
</chapter>
