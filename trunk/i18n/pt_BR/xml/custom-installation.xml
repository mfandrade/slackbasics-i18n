<chapter id="getstarted-custominstall"> <?dbhtml filename="custom-installation.html" ?>
  <title>Instalação personalizada</title>

  <para>
    Você pode querer executar uma instalação personalizada do Slackware Linux,
    por exemplo, para entender melhor como o sistema GNU/Linux funciona,
    ou para preparar um script para instalação automática. Este capítulo esboça
    os passos necessários para instalar o Slackware Linux manualmente. Um exemplo de 
    script de instalação pode ser encontrado em <xref
    linkend="getstarted-custominstall-script" />.
  </para>

  <sect1 id="getstarted-custominstall-partition">
    <title>Particionando o disco rígido</title>

    <para>
      Se você executou uma instalação normal, não teria motivos para ter
      qualquer problema particionando um disco. Você pode usar os comandos 
      <command>fdisk</command> e <command>cfdisk</command>
      para particionar o disco. Se você está instalando o Slackware Linux via script
      pode ser útil saber que você pode enviar comandos (pipe) <command>fdisk</command> para o 
      <command>fdisk</command>. Por exemplo:
    </para>

    <screen>
# <command>fdisk /dev/hda &lt;&lt; EOF
n
p
1

+10000M
n
p
2

+512M
t
2
82
w
EOF</command>
    </screen>

    <para>
      Estes comandos criam uma partição primária do tipo Linux com 10000MB, e
      uma partição primária do tipo swap com 512MB. Você poderia armazenar comandos
      <command>fdisk</command> em diferentes perfis de disco e
      usar um desses perfis baseado em um critério específico 
      (ex:  tamanho do disco). Por exemplo (entende-se 'smalldisk' como 'disco pequeno):
    </para>

    <screen>
# <command>cat /usr/share/fdisk-profiles/smalldisk | fdisk</command>
    </screen>
  </sect1>

  <sect1 id="getstarted-custominstall-initfs">
    <title>Inicializando e montando sistemas de arquivos</title>

    <para>
      Após criar ao menos uma partição do tipo Linux e outra do tipo swap, você pode
      inicializar o sistema de arquivos e swap, e utilizar o normalmente o disco.
      Em sistemas com pouca memória, você deveria inicializar a partição swap primeiro.
      Nós vamos usar o esquema de particionamento demonstrado aqui e que
      está listado abaixo no exemplo: 
      Para inicializar uma partição swap, execute:
    </para>

    <screen>
# <command>mkswap /dev/hda2</command>
# <command>swapon /dev/hda2</command>
    </screen>

    <para>
      O significado desses comandos é bastante óbvio. <command>mkswap</command>
      formata a partição swap e <command>swapon</command> a incializa  (e passa portanto
      a estar disponível para uso).
      Você precisa executar o comando <command>mkswap</command> apenas uma vez,
      mas, o comando <command>swapon</command> deve ser executado em cada inicialização (boot) do sistema.
      Isto pode ser feito automaticamente se você adicionar uma linha para a
      partição swap no <filename>/etc/fstab</filename>, que nós vamos
      abordar em uma leitura mais adiante.
    </para>

    <para>
      Por enquanto, é importante inicializar a partição do sistema. Isto 
      pode ser feito com o comando <command>mkfs</command>. Você pode
      especificar qual sistemas de arquivos de ser utilizado adicionando o parâmetro <parameter
      class="command">-t</parameter>. <command>mkfs</command>
      automaticamente executará o comando <command>mkfs.filesystem</command>
      baseado no sistema de arquivos que você escolheu. Tenha em mente que 
      o sistema de arquivos que pode ser usado depende da instalação do kernel que 
      você carregou. Se você carregou o kernel
      <emphasis>bare.i</emphasis>, então você pode utilizar os sistemas de arquivos  
      <emphasis>ext2</emphasis>, <emphasis>ext3</emphasis> e 
      <emphasis>reiserfs</emphasis>.
    </para>

    <para>
      Para incializar e montar um sistema de arquivos <emphasis>ext3</emphasis>
      você deve executar os seguintes comandos:
    </para>

    <screen>
# <command>mkfs -t ext3 /dev/hda1</command>
# <command>mount /dev/hda1 /mnt</command>
    </screen>

    <para>
      Se você criou partições separadas para certos diretórios
      da raíz do sistema (por exemplo <filename>/home</filename>), você 
      pode também inicializar e montá-los agora.
      Por exemplo:
    </para>

    <screen>
# <command>mkfs -t ext3 /dev/hda2</command>
# <command>mkdir /mnt/home</command>
# <command>mount /dev/hda2 /mnt/home</command>
    </screen>

    <para>
      Por fim, você deve montar a mídia de origem do sistema. Se você
      utiliza um CD-ROM, isto será fácil. Suponha que o <filename>/dev/hdc</filename>
      seja seu arquivo para o CD-ROM, então você pode montá-lo com:
    </para>

    <screen>
# <command>mount /dev/hdc /var/log/mount</command>
    </screen>

    <para>
      Usar o NFS como mídia de instalação requer mais alguns passos.
      Antes de qualquer coisa, você deve carregar o disco de rede.
      Você pode fazer isso executando o comando <command>network</command>
      e inserindo um disco de rede. Você também pode carregar 
      o disco a partir de outra mídia, por exemplo, a partir de um pendrive USB.
      Supondo que você mountou o pendrive USB em /var/log/mount,
      você pode então carregar o disco de rede com: <command>network
      /var/log/mount/network.dsk</command>. Após carregar o disco de rede
      você deve configurar sua interface de rede. Se o servidor 
      NFS está na mesma rede, você apenas precisa assinalar o 
      endereço IP para a interface de rede. Por exemplo, para usar
      o endereço <emphasis>192.168.2.201</emphasis>, você deveria executar 
      o seguinte comando:
    </para>

    <screen>
# <command>ifconfig eth0 192.168.2.201</command>
    </screen>

    <para>
      Você pode então carregar o portmapper, que é necessário para
      que o cliente NFS funcione corretamente:
    </para>

    <screen>
# <command>/sbin/rpc.portmap</command>
    </screen>

    <para>
      Se o portmapper iniciou corretamente, você pode então montar
      o volume NFS. Mas, antes, tenha certeza de que desmontou qualquer sistema de arquivos
      que você tenha montado previamente em <filename>/var/log/mount</filename>.
      Se não há nenhum outro sistema de arquivos montado em
      <filename>/var/log/mount</filename>, você pode montar o 
      volume NFS. Suponha que você queira montar 
      <emphasis>192.168.2.1:/home/pub/slackware-current</emphasis>,
      você deve então executar o seguinte comando:
    </para>

    <screen>
# <command>mount -r -t nfs -o nolock 192.168.2.1:/home/pub/slackware-current /var/log/mount</command>
    </screen>

    <para>
      Se nenhum erro foi mostrado quando você montou o volume NFS, então você pode 
      acessá-lo em <filename>/var/log/mount</filename>
    </para>
  </sect1>

  <sect1 id="getstarted-custominstall-packages">
    <title>Instalando pacotes</title>

    <para>
      Tudo agora está pronto para começar a instalar os pacotes que estão
      na mídia de instalação.  Se o comando <command>installpkg</command> estiver 
      disponível no sistema, você pode usá-lo para  
      instalar pacotes Slackware Linux. Para instalar pacotes para partição
      montada em <filename>/mnt</filename>, adicione o parâmetro 
      <parameter class="command">-root</parameter>. O seguinte 
      comando instala todos os pacotes da mídia de instalação:
    </para>

    <screen>
# <command>installpkg -root /mnt /var/log/mount/slackware/*/*.tgz</command>
    </screen>

    <para>
      Se você criou tagfiles para definir quais pacotes devem ser 
      instalados, então você pode usá-los agora (tagfiles são descritos em
       <xref linkend="chap-pkgmgmt-tagfiles" />). Supondo que você tenha 
      armazenado um tagfile para cada disco em 
      <filename>/usr/share/tagfiles/small-desktop</filename>, você 
      então pode instalar pacotes baseados em tagfiles da seguinte
      maneira:
    </para>

    <screen>
# <command>for p in a ap d e f k kde kdei l n t tcl x xap y; do
   installpkg -infobox -root /mnt \
     -tagfile /usr/share/tagfiles/small-desktop/$p/tagfile \
     /var/log/mount/slackware/$p/*.tgz
done</command>
    </screen>
  </sect1>

  <sect1 id="getstarted-custominstall-config">
    <title>Configuração Pós-instalação</title>

    <para>
      A próxima seção descreve o mínimo de configurações necessárias
      para rodar seu sistema.
    </para>

    <sect2 id="getstarted-custominstall-config-fstab">
      <title>fstab</title>

      <para>
        Um dos passos mínimos necessários é criar o arquivo <command>fstab</command>
        para que o sistema saiba quais as partições ou volumes 
        devem ser montados. O formato do arquivo <filename>/etc/fstab</filename> 
        é descrito em <xref linkend="basics-filesystem-mounting-fstab" />.
        Você deve, no mínimo, adicionar o sistema de arquivos  
        <filename>/</filename> , o <filename>/proc</filename>
        pseudo sistema de arquivos, o <filename>devpts</filename> pseudo sistema de arquivos,
        e a partição swap.
      </para>

      <para>
        Com o particionamento exemplificado anteriormente, você poderia criar
        o arquivo <filename>/etc/fstab</filename> como abaixo:
      </para>

      <screen>
# <command> cat &gt; /mnt/etc/fstab &lt;&lt; EOF
/dev/hda2	 swap             swap        defaults         0   0
/dev/hda1        /                ext3        defaults         1   1
devpts           /dev/pts         devpts      gid=5,mode=620   0   0
proc             /proc            proc        defaults         0   0
EOF</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-lilo">
      <title>LILO</title>

      <para>
        Para que seja possível carregar o sistema operacional, você deve configurar e instalar
        o Linux Loader (LILO). A configuração do LILO e mostrada em 
        <xref linkend="chap-init-lilo" />. Para esta seção nós apenas 
        mostraremos um exemplo de configuração do LILO - que pode utilizar 
        o esquema de particionamento descrito neste capítulo. O primeiro passo 
        é criar o arquivo <filename>/etc/lilo.conf</filename>:
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/lilo.conf &lt;&lt; EOF
boot = /dev/hda
vga = normal
timeout = 50
image = /boot/vmlinuz
	root = /dev/hda1
	label = Slackware
	read-only
EOF</command>
      </screen>

      <para>
        Você pode então instalar o LILO usando <filename>/mnt</filename> como  
        a raíz para o LILO. Ao usar o <filename>/mnt</filename> como raíz,
        o LILO vai utilizar o arquivo <filename>/etc/lilo.conf</filename> a partir da partição de 
        destino:
      </para>

      <screen>
# <command>lilo -r /mnt</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-network">
      <title>Rede</title>

      <para>
        A configuração da rede no Slackware Linux é descrita em 
        <xref linkend="sysadmin-netconfig" />. Esta seção abordará apenas
        um exemplo de um host que vai usar DHCP para obter um endereço IP.
      </para>

      <para>
        O arquivo <filename>/etc/networks</filename> contém informações sobre
        redes Internet conhecidas. Como nós vamos obter informações de rede via DHCP, 
        devemos usar apenas <emphasis>127.0.0.1</emphasis>
        como rede local.
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/networks &lt;&lt; EOF
loopback        127.0.0.0
localnet        127.0.0.0
EOF</command>
      </screen>

      <para>
        Apesar de recebermos um nome de host (hostname) via DHCP, continuaremos
        usando um hostname temporário:
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/HOSTNAME &lt;&lt; EOF
sugaree.example.net
EOF</command>
      </screen>

      <para>
        Agora que o hostname está configurado, o hostname e  
        <emphasis>localhost</emphasis> devem poder ser resolvidos 
        apropriadamente, criando o banco de dados <filename>/etc/hosts</filename>:
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/hosts &lt;&lt; EOF
127.0.0.1	localhost
127.0.0.1	sugaree.example.net	sugaree	
EOF</command>
      </screen>

      <para>
        Nós não precisamos criar o arquivo <filename>/etc/resolv.conf</filename>,
        já que ele é automaticamente criado pelo <command>dhcpcd</command>,
        o cliente DHCP. Por fim, podemos configurar a interface 
        no arquivo <filename>/etc/rc.d/rc.inet1.conf</filename>:
      </para>

      <screen>
# <command>cat &gt; /mnt/etc/rc.d/rc.inet1.conf &lt;&lt; EOF
IPADDR[0]=""
NETMASK[0]=""
USE_DHCP[0]="yes"
DHCP_HOSTNAME[0]=""
EOF</command>
      </screen>

      <para>
    Você talvez queira antes fazer uma cópia de segurança do arquivo 
	<filename>rc.inet1.conf</filename> porque ele possui  
	muitos comentários úteis. Ou então você pode utilizar o comando  
	<command>sed</command> para trocar uma configuração específica:
      </para>

      <screen>
# <command>sed -i 's/USE_DHCP\[0\]=""/USE_DHCP[0]="yes"/' \
   /mnt/etc/rc.d/rc.inet1.conf</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-init">
      <title>Fazendo ajustes finos (tuning) na inicialização do sistema</title>

      <para>
        Dependendo do propósito do sistema que está sendo instalado,
        podem ser definidos quais scripts de inicialização devem ser iniciados.
        O número de serviços que estão disponíveis depende de quais pacotes
        você instalou. Você pode pegar uma lista dos scripts disponíveis com o comando
        <command>ls</command>:
      </para>

      <screen>
# <command>ls -l /mnt/etc/rc.d/rc.*</command>
      </screen>

      <para>
        Se o bit de executável estiver configurado para o script, então ele será carregado na inicialização,
        caso contrário, ele será ignorado. Obviamente você deve deixar scripts essenciais configurados como 
        executáveis, incluindo o script específico do runlevel do sistema. Você pode marcar o bit de executável de um arquivo  
        usando:
      </para>

      <screen>
# <command>chmod +x /etc/rc.d/rc.scriptname</command>
      </screen>

      <para>
        E pode removê-lo com:
      </para>

      <screen>
# <command>chmod -x /etc/rc.d/rc.scriptname</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-ldconfig">
      <title>Configurando o "linkador" dinâmico</title>

      <para>
        O GNU/Linux usa um "cache" para carregar bibliotecas dinâmicas. Considerando 
        que muitos programas confiam em números de versão genéricos da bibliotecas 
        (por exemplo <filename>/usr/lib/libgtk-x11-2.0.so</filename>, ao invés 
        de <filename>/usr/lib/libgtk-x11-2.0.so.0.600.8</filename>),
        o cache e os links para as bibliotecas podem ser atualizados executando o comando 
        <command>ldconfig</command>:
      </para>

      <screen>
# <command>chroot /mnt /sbin/ldconfig</command>
      </screen>

      <para>
        Você talvez não conheça o comando <command>chroot</command>; Ele é um comando
        que executa um comando em uma raíz direfente da raíz atualmente ativa.
        No exemplo a raíz do sistema foi mudada para
        <filename>/mnt</filename>, e é de lá que o comando <command>chroot</command>
        executa o <command>/sbin/ldconfig</command>. Após terminar sua execução
        o sistema vai retornar para o shell, que utilizará a raíz original.
        Para usar o <command>chroot</command> com outros comandos, o  
        <command>ldconfig</command> precisa ser executado uma vez porque
        sem inicializar o "linkador" dinâmico muitos comandos não funcionarão 
        já que podem haver dependências de bibliotecas não resolvidas.
      </para>
    </sect2>

    <sect2 id="getstarted-custominstall-config-rootpasswd">
      <title>Configurando a senha do usuário root</title>

      <para>
        Agora que o cache e os links das bibliotecas dinâmicas estão configurados,
        você pode executar comandos no sistema instalado. Nós vamos fazer isso
        para configurar a senha do usuário <emphasis>root</emphasis>. O comando 
        <command>passwd</command> pode ser usado para configurar a senha
        de um usuário existente (o usuário <emphasis>root</emphasis>
        já se econtra no arquivo <filename>/etc/passwd</filename>). 
        Nós usamos novamente o comando <command>chroot</command>
        para executar o comando na partição do sistema:
      </para>

      <screen>
# <command>chroot /mnt /usr/bin/passwd root</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-config-timezone">
        <title>Configurando o fuso-horário do sistema</title>

      <para>
        Em sistemas do tipo UNIX é importante configurar corretamente o fuso-horário
        porque este é usado em várias partes do sistema. 
        Por exemplo, o fuso-horário é usado pelo NTP para sincronizar corretamente a data/hora do sistema,
        ou então em diferentes programas de rede que o utilizam para computar a diferença de tempo  
        entre um cliente e um servidor. No Slackware Linux o fuso-horário pode ser configurado
        criando um link do <filename>/etc/localtime</filename> com um arquivo de fuso-horário.
        Você vai encontrar o fuso-horário para sua região no diretório 
        <filename>/mnt/usr/share/zoneinfo</filename>.
        A maioria dos fusos-horários podem ser encontrados nos subdiretórios de suas 
        respectivas regiões.
        Por exemplo, para usar o fuso-horário 
        <emphasis>Europe/Amsterdam</emphasis>, você pode 
        executar o seguinte comando:
      </para>

      <screen>
# <command>cd /mnt</command>
# <command>rm -rf etc/localtime</command>
# <command>ln -sf /usr/share/zoneinfo/Europe/Amsterdam etc/localtime</command>
      </screen>

      <para>
        Após configurar o fuso-horário, os programas continuam sem saber
        se o relógio do computador foi configurado como uma data/hora local
        ou se está seguindo o padrão UTC (Coordinated Universal Time).
        Se você usa outros sistemas operacionais no mesmo computador
        que não usam o padrão UTC, então é melhor configurar o relógio do computador
        como uma data/hora local. Em sistemas do tipo UNIX, configurar
        o relógio do sistema como UTC é considerado uma personalização.
        Você pode configurar qual o padrão seu sistema vai utilizar
        criando o arquivo <filename>/etc/hardwareclock</filename>, e colocando dentro
        dele a palavra <emphasis>localtime</emphasis> caso queira que use o sistema local, 
        ou colocando <emphasis>UTC</emphasis> quando deseja configurar para usar o padrão UTC. 
        Por exemplo, para usar o UTC, você pode criar o arquivo <filename>/etc/hardwareclock</filename>
        da seguinte maneira:
      </para>

      <screen>
# <command>echo "UTC" &gt; /mnt/etc/hardwareclock</command>
      </screen>
    </sect2>

    <sect2 id="getstarted-custominstall-fonts">
      <title>Criando o cache de fontes do X11</title>

      <para>
        Se você vai usar o X11, você tem que inicializar o cache de fontes 
        TrueType e Type1. Isto pode ser feito com o 
        comando <command>fc-cache</command>:
      </para>

      <screen>
# <command>chroot /mnt /usr/bin/fc-cache</command>
      </screen>
    </sect2>
  </sect1>

  <sect1 id="getstarted-custominstall-script">
    <title>Scripts de instalação automatizados</title>

    <para>
      É fácil combinar os passos de uma instalação personalizada
      em um script que vai executar todos os passos automaticamente.
      Isto é o ideal para fazer instalações padrão para servidores ou 
      conduzir instalação em massa de clientes Linux.
      Esta seção contém um script de exemplo que foi escrito por
      William Park. É fácil adicionar um script de instalação 
      à mídia de instalação do Slackware Linux, especialmente se você está 
      usando um CD-ROM inicializando o sistema de instalação a partir de um pendrive USB.
    </para>

    <para>
      O sistema de instalação é armazenado em um arquivo comprimido,
      que está disponível na mídia de instalação em 
      <filename>isolinux/initrd.img</filename>. Você pode fazer uma cópia desse arquivo
      para seu disco rígido, e descompactá-lo com
      <command>gunzip</command>:
    </para>

    <screen>
# <command>mv initrd.img initrd.img.gz</command>
# <command>gunzip initrd.img.gz</command>
    </screen>

    <para>
      Após descompactar o arquivo, você pode montá-lo como um disco,
      usando um device loopback:
    </para>

    <screen>
# <command>mount -o loop initrd.img /mnt/hd</command>
    </screen>

    <para>
      Agora você pode adicionar um script ao arquivo initrd colocando ele
      na estrutura de diretório que está disponível no ponto de montagem.
      Após fazer as alterações necessárias, você pode desmontar o sistema
      de arquivos e compactá-lo novamente:
    </para>

    <screen>
# <command>umount /mnt/hd</command>
# <command>gzip initd.img</command>
# <command>mv initrd.img.gz initrd.img</command>
    </screen>

    <para>
      Você pode então colocar o novo arquivo <filename>initrd.img</filename>
      na mídia de instalação e testar o script.
    </para>

    <programlisting>
#! /bin/sh
# Copyright (c) 2003-2005 by William Park &lt;opengeometry@yahoo.ca&gt;.
# All rights reserved.
#
# Usage: slackware-install.sh

rm_ln ()		# Usage: rm_ln from to
{
	rm -rf $2; ln -sf $1 $2
}


###############################################################################
echo "Partitioning harddisk..."

(   echo -ne "n\np\n1\n\n+1000M\n"	# /dev/hda1 --> 1GB swap
	echo -ne "n\np\n2\n\n+6000M\n"	# /dev/hda2 --> 6GB /
	echo -ne "t\n1\n82\nw\n"
) | fdisk /dev/hda

mkswap /dev/hda1		# swap
swapon /dev/hda1

mke2fs -c /dev/hda2		# /
mount /dev/hda2 /mnt


###############################################################################
echo "Installing packages..."

mount -t iso9660 /dev/hdc /cdrom	# actually, /var/log/mount
cd /cdrom/slackware
for p in [a-z]*; do		# a, ap, ..., y
	installpkg -root /mnt -priority ADD $p/*.tgz
done

cd /mnt


###############################################################################
echo "Configuring /dev/* stuffs..."

rm_ln psaux dev/mouse		# or, 'input/mice' for usb mouse
rm_ln ttyS0 dev/modem
rm_ln hdc dev/cdrom
rm_ln hdc dev/dvd


###############################################################################
echo "Configuring /etc/* stuffs..."

cat &gt; etc/fstab &lt;&lt; EOF
/dev/hda1   swap         swap     defaults         0  0
/dev/hda2   /            ext2     defaults         1  1
devpts      /dev/pts     devpts   gid=5,mode=620   0  0
proc        /proc        proc     defaults         0  0
#
/dev/cdrom  /mnt/cdrom   iso9660  noauto,owner,ro  0  0
/dev/fd0    /mnt/floppy  auto     noauto,owner     0  0
tmpfs       /dev/shm     tmpfs    noauto           0  0
EOF

cat &gt; etc/networks &lt;&lt; EOF
loopback	127.0.0.0
localnet	192.168.1.0
EOF
cat &gt; etc/hosts &lt;&lt; EOF
127.0.0.1	localhost
192.168.1.1	node1.example.net	node1
EOF
cat &gt; etc/resolv.conf &lt;&lt; EOF
search example.net
nameserver 127.0.0.1
EOF
cat &gt; etc/HOSTNAME &lt;&lt; EOF
node1.example.net
EOF

## setup.05.fontconfig
chroot . /sbin/ldconfig		# must be run before other program
chroot . /usr/X11R6/bin/fc-cache

chroot . /usr/bin/passwd root

## setup.06.scrollkeeper
chroot . /usr/bin/scrollkeeper-update

## setup.timeconfig
rm_ln /usr/share/zoneinfo/Canada/Eastern  etc/localtime
cat &gt; etc/hardwareclock &lt;&lt; EOF
localtime
EOF

## setup.liloconfig
cat &gt; etc/lilo.conf &lt;&lt; EOF
boot=/dev/hda
delay=100
vga=normal	# 80x25 char
# VESA framebuffer console:
#   pixel	char	8bit	15bit	16bit	24bit
#   -----	----	----	-----	-----	-----
#   1600x1200		796	797	798	799
#   1280x1024	160x64	775	793	794	795
#   1024x768	128x48	773	790	791	792
#   800x600	100x37	771	787	788	789
#   640x480	80x30	769	784	785	786
image=/boot/vmlinuz		# Linux
	root=/dev/hda2
	label=bare.i
	read-only
# other=/dev/hda1		# Windows
#     label=win
#     table=/dev/hda
EOF
lilo -r .

## setup.xwmconfig
rm_ln xinitrc.fvwm95  etc/X11/xinit/xinitrc


###############################################################################
echo "Configuring /etc/rc.d/rc.* stuffs..."

cat &gt; etc/rc.d/rc.keymap &lt;&lt; EOF
#! /bin/sh
[ -x /usr/bin/loadkeys ] &amp;&amp; /usr/bin/loadkeys us.map
EOF
chmod -x etc/rc.d/rc.keymap

## setup.mouse
cat &gt; etc/rc.d/rc.gpm &lt;&lt; 'EOF'
#! /bin/sh
case $1 in
	stop)
	    echo "Stopping gpm..."
	    /usr/sbin/gpm -k
	    ;;
	restart)
	    echo "Restarting gpm..."
	    /usr/sbin/gpm -k
	    sleep 1
	    /usr/sbin/gpm -m /dev/mouse -t ps2
	    ;;
	start)
	    echo "Starting gpm..."
	    /usr/sbin/gpm -m /dev/mouse -t ps2
	    ;;
	*)
	    echo "Usage $0 {start|stop|restart}"
	    ;;
esac
EOF
chmod +x etc/rc.d/rc.gpm

## setup.netconfig
cat &gt; etc/rc.d/rc.inet1.conf &lt;&lt; EOF
IPADDR=(192.168.1.1)		# array variables
NETMASK=(255.255.255.0)
USE_DHCP=()			# "yes" or ""
DHCP_HOSTNAME=()
GATEWAY=""
DEBUG_ETH_UP="no"
EOF

cat &gt; etc/rc.d/rc.netdevice &lt;&lt; EOF
/sbin/modprobe 3c59x
EOF
chmod +x etc/rc.d/rc.netdevice

## setup.setconsolefont
mv etc/rc.d/rc.font{.sample,}
chmod -x etc/rc.d/rc.font

## setup.services
chmod +x etc/rc.d/rc.bind
chmod +x etc/rc.d/rc.hotplug
chmod +x etc/rc.d/rc.inetd
chmod +x etc/rc.d/rc.portmap
chmod +x etc/rc.d/rc.sendmail
#
chmod -x etc/rc.d/rc.atalk
chmod -x etc/rc.d/rc.cups
chmod -x etc/rc.d/rc.httpd
chmod -x etc/rc.d/rc.ip_forward
chmod -x etc/rc.d/rc.lprng
chmod -x etc/rc.d/rc.mysqld
chmod -x etc/rc.d/rc.pcmcia
chmod -x etc/rc.d/rc.samba
chmod -x etc/rc.d/rc.sshd
    </programlisting>
  </sect1>
</chapter>
