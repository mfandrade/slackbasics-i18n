<!-- $Id: ipsec.xml 315 2007-09-21 15:26:04Z danieldk $ -->

<chapter id="ipsec"> <?dbhtml filename="ipsec.html"?>
  <title>IPsec</title>

  <sect1>
    <title>Teoria</title>

    <para>
      <acronym>IPsec</acronym> é um padrão para comunicação IP segura
      através de autenticação e encriptação. Além disso, também é possível
      compactar os pacotes e com isso reduzir o tráfego. Os seguintes protocolos são parte do
      padrão IPsec:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <acronym>AH</acronym> (Authentication Header) garante a autenticidade dos
          pacotes transportados. Isto é feito usando um algoritmo de criptografia
          que gera um checksum dos pacotes. Se o checksum for considerado correto
          pelo receptor, o receptor pode então ter certeza de que o pacote não foi modificado e que
          o pacote realmente veio do emissor identificado (desde que as chaves sejam de conhecimento
          apenas do emissor e do receptor).
        </para>
      </listitem>
      <listitem>
        <para>
          <acronym>ESP</acronym> (Encapsulating Security Payload) é usado para
          encriptar pacotes. Isto torna confiáveis os dados dos pacotes e também
          somente leitura pelo host que tem a chave correta de decriptação.
        </para>
      </listitem>
      <listitem>
        <para>
           <acronym>IPcomp</acronym> (IP payload compression) provê
           uma compressão antes de o pacotes ser encriptado. Isto é útil
           porque dados encriptados normalmente são mais difíceis de compactar
           do que dados não criptografados.
        </para>
      </listitem>
      <listitem>
        <para>
           <acronym>IKE</acronym> (Internet Key Exchange) fornece os meios para
           negociar chaves sigilosamente.
           Tenha em mente que o IKE é opcional, chaves podem ser configuradas manualmente.
        </para>
      </listitem>
    </itemizedlist>

    <para>
        De fato existem dois modos de operação: <emphasis>transport mode</emphasis> é usado
        para encriptar conexões normais entre dois hosts, <emphasis>tunnel mode</emphasis> encapsula
        o pacote original em um novo cabeçalho. Neste capítulo nós vamos ver o transport mode
        porque o principal motivo deste capítulo é mostrar como configurar uma conexão segura entre dois hosts.
    </para>

    <para>
      Existem também dois principais métodos de autenticação. Você pode usar
      chaves manuais ou um daemon Internet Key Exchange (IKE)
      como por exemplo o racoon que troca chaves
      automaticamente entre dois hosts. Em ambos os casos você vai precisar configurar
      uma política de segurança no Security Policy Database (SPD).
      Esse banco de dados é usado pelo kernel para decidir qual tipo de política
      é necessária para se comunicar com outro host. Se você optou por utilizar chaves
      manuais, você também precisará configurar o banco de dados Security Association Database (SAD)
      para especificar qual algoritmo de encriptação e chave deverão ser utilizados para uma comunicação
      segura com outro host. Se você usar o daemon IKE as associações de segurança serão automaticamente estabelecidas.
    </para>
  </sect1>

  <sect1>
    <title>Configuração do Linux</title>

    <para>
      O suporte nativo ao IPsec está disponível apenas nos kernels Linux 2.6.x.
      Kernels mais antigos não possuem suporte nativo ao IPsec. Portanto, tenha certeza
      de que está utilizando um kernel 2.6.x. O kernel 2.6 está disponível no Slackware Linux
      10.0, 10.1 e 10.2 no diretório <filename>testing</filename> do CD2 do conjunto de CDs do
      Slackware Linux, ou em qualquer mirror oficial do Slackware Linux.
      O kernel 2.6 é padrão desde o Slackware Linux 12.0.
      O kernel 2.6 padrão do Slackware Linux possui suporte para AH, ESP e IPcomp em
      ambos IPv4 e IPv6. Se você vai usar um kernel personalizado, habilite ao menos
      as seguintes opções:
    </para>

    <screen>
CONFIG_INET_AH=y
CONFIG_INET_ESP=y
CONFIG_INET_IPCOMP=y
    </screen>

    <para>
      Você também pode compilar o suporte aos protocolos IPsec como módulos:
    </para>

    <screen>
CONFIG_INET_AH=m
CONFIG_INET_ESP=m
CONFIG_INET_IPCOMP=m
    </screen>


    <para>
        Neste capítulo nós vamos apenas usar as modificações AH e ESP, mas
        não é uma má idéia habilitar as modificações IPComp para futuras configurações do IPsec.
        Além do suporte ao protocolos IPsec você precisa compilar o suporte no kernel aos
        algoritmos de encriptação e hashing que serão utilizados
        pelo AH e ESP. O suporte para esses algoritmos (tanto como módulo ou built-in)
        pode ser habilitado nas várias opções <emphasis>CONFIG_CRYPTO</emphasis>. Não há mal nenhum
        em compilar todos algoritmos de encriptação e hashing como módulo.
    </para>

    <para>
      Se você optou por compilar o suporte ao IPsec como módulo, tenha certeza
      de que os módulos necessários foram carregados. Por exemplo, se você
      vai usar ESP para conexões IPv4, carregue o módulo <emphasis>esp4</emphasis>.
    </para>

    <para>
      Compile o kernel normalmente e inicie ele.
    </para>
  </sect1>

  <sect1>
    <title>Instalando ferramentas IPsec (IPsec-Tools)</title>

    <para>
      O próximo passo é instalar o pacote
      <ulink url="http://ipsec-tools.sourceforge.net">IPsec-Tools</ulink>.
      Essas ferramentas são ports dos utilitários IPsec em <ulink url="http://www.kame.net">KAME</ulink>.
      Faça o download do último código fonte, descompacte, configure e instale.
    </para>

    <screen>
# <command>tar jxf ipsec-tools-x.y.z.tar.bz2</command>
# <command>cd ipsec-tools-x.y.z</command>
# <command>CFLAGS="-O2 -march=i486 -mcpu=i686" \
  ./configure --prefix=/usr \
              --sysconfdir=/etc \
              --localstatedir=/var \
              --enable-hybrid \
              --enable-natt \
              --enable-dpd \
              --enable-frag \
              i486-slackware-linux</command>
# <command>make</command>
# <command>make install</command>
    </screen>

      <para>
          Altere <emphasis>x.y.z</emphasis> pela versão do código fonte que
          você baixou.
          Os parâmetros mais relevantes que foram configurados no pacote são:
      </para>

      <itemizedlist>
        <listitem>
	  <para>
	    <emphasis>--enable-dpd</emphasis>: habilita
        o dead peer detection (DPD). O DPD é um método
        para detectar se algum dos hosts associados na comunicação segura está indisponível.
        Quando isso acontece a associação desse host pode ser removida.
	  </para>
	</listitem>
	<listitem>
	  <para>
          <emphasis>--enable-natt</emphasis>: habilita o NAT transversal
          (NAT-T). Como o NAT altera o cabeçalho IP, isso pode gerar
          problemas para garantir a autenticidade de um pacote. O NAT-T é um método que ajuda
          a superar esse problema. Configurar o NAT-T está além do escopo deste artigo.
	  </para>
	</listitem>
      </itemizedlist>
  </sect1>

  <sect1>
    <title>Configurando o uso de chaves manuais no IPsec</title>

    <sect2>
      <title>Introdução</title>

      <para>
        Nós vamos usar um exemplo como guia para configurar uma conexão
        encriptada entre dois hosts. Os hosts possuem os IPs <emphasis>192.168.1.1</emphasis> e <emphasis>192.168.1.169</emphasis>.
        O modo <quote>transport mode</quote> será utilizado com AH e ESP e chaves manuais.
      </para>

    </sect2>

    <sect2>
      <title>Criando o arquivo de configuração</title>

      <para>
        O primeiro passo é criar um arquivo de configuração cujo nome será
        <filename>/etc/setkey.conf</filename>. No primeiro host
        (192.168.1.1) o seguinte arquivo de configuração <filename>/etc/setkey.conf</filename>
        será utilizado:
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

add 192.168.1.1 192.168.1.169 ah 0x200 -A hmac-md5
0xa731649644c5dee92cbd9c2e7e188ee6;
add 192.168.1.169 192.168.1.1 ah 0x300 -A hmac-md5
0x27f6d123d7077b361662fc6e451f65d8;

add 192.168.1.1 192.168.1.169 esp 0x201 -E 3des-cbc
0x656c8523255ccc23a66c1917aa0cf30991fce83532a4b224;
add 192.168.1.169 192.168.1.1 esp 0x301 -E 3des-cbc
0xc966199f24d095f3990a320d749056401e82b26570320292

spdadd 192.168.1.1 192.168.1.169 any -P out ipsec
           esp/transport//require
           ah/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P in ipsec
           esp/transport//require
           ah/transport//require;
      </screen>

      <para>
        A primeira linha (uma linha termina com um <quote>;</quote>) adiciona
        uma chave para a verificação (checksumming) de cabeçalho
        para os pacotes do 192.168.1.1 que vão para 192.168.169. A segunda linha faz a
        mesma coisa com os pacotes de 192.168.1.169 que vão para 192.168.1.1.
        A terceira e quarta linha definem as chaves para encriptação de dados
        seguindo a mesma lógica da primeira e segunda linha.
        Por fim, as linhas <quote>spadd</quote> definem duas políticas, que são, primeiramente:
        pacotes que saem de 192.168.1.1 para 192.168.1.169 deveriam (<emphasis>require</emphasis>) ser
        codificados (<emphasis>esp</emphasis>) e assinados com o cabeçalho de autorização. A segunda
        política é para pacotes recebidos e a lógica da configuração é a mesma dos pacotes que estão saindo.
      </para>

      <para>
        Tenha em mente que você não deve utilizar as chaves mostradas acima e sim
        criar/manter secretamente suas próprias chaves.
        Você pode gerar as chaves usando o device: <filename>/dev/random</filename>:
      </para>

      <screen>
# <command>dd if=/dev/random count=16 bs=1 | xxd -ps</command>
      </screen>

      <para>
        O comando acima usa o dd para retornar 16 bytes do <filename>/dev/random</filename>.
        Não se esqueça de adicionar o <quote>0x</quote> no início da linha em seu arquivo de configuração.
        Você pode usar 16 bytes (128 bits) para o algoritmo hmac-md5 que é usado para o AH.
        O algoritmo 3des-cbc que é usado no exemplo para o ESP deve ser preenchido com uma chave de 24 bytes (192 bits).
        Essa chave pode ser gerada com:
      </para>

      <screen>
# <command>dd if=/dev/random count=24 bs=1 | xxd -ps</command>
      </screen>

      <para>
          Tenha certeza de que o arquivo <filename>/etc/setkey.conf</filename> possa ser lido apenas pelo usuário root.
          Se usuários normais puderem ler a chave, significa que o IPsec não está fornecendo nenhuma segurança.
          Você configura isso com:
      </para>

      <screen>
# <command>chmod 600 /etc/setkey.conf</command>
      </screen>

      <para>
          O mesmo arquivo <filename>/etc/setkey.conf</filename> pode ser criado no host
          192.168.1.169, mas invertendo as opções <parameter class="command">-P
          in</parameter> e <parameter class="command">-P out</parameter>.
          O arquivo <filename>/etc/setkey.conf</filename> ficará assim:
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

add 192.168.1.1 192.168.1.169 ah 0x200 -A hmac-md5
0xa731649644c5dee92cbd9c2e7e188ee6;
add 192.168.1.169 192.168.1.1 ah 0x300 -A hmac-md5
0x27f6d123d7077b361662fc6e451f65d8;

add 192.168.1.1 192.168.1.169 esp 0x201 -E 3des-cbc
0x656c8523255ccc23a66c1917aa0cf30991fce83532a4b224;
add 192.168.1.169 192.168.1.1 esp 0x301 -E 3des-cbc
0xc966199f24d095f3990a320d749056401e82b26570320292

spdadd 192.168.1.1 192.168.1.169 any -P in ipsec
           esp/transport//require
           ah/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P out ipsec
           esp/transport//require
           ah/transport//require;
      </screen>
    </sect2>

    <sect2>
      <title>Ativando o IPsec</title>

      <para>
        O IPsec pode ser ativado com o comando <command>setkey</command>:
      </para>

      <screen>
# <command>setkey -f /etc/setkey.conf</command>
      </screen>

      <para>
        Se você quer habilitar o IPsec de forma permanente, você pode adicionar a seguinte linha
        no arquivo <filename>/etc/rc.d/rc.local</filename> de ambos os hosts:
      </para>

      <screen>
/usr/sbin/setkey -f /etc/setkey.conf
      </screen>

      <para>
          Após configurar o IPsec você está apto a testar a conexão rodando o comando <command>tcpdump</command>
          e simultaneamente pingando o outro host.
        Você pode conferir se o AH e o ESP estão mesmo sendo utilizados analisando a saída do comando <command>tcpdump</command>:
      </para>

      <screen>
# <command>tcpdump -i eth0</command>
tcpdump: listening on eth0
11:29:58.869988 terrapin.taickim.net > 192.168.1.169: AH(spi=0x00000200,seq=0x40f): ESP(spi=0x00000201,seq=0x40f) (DF)
11:29:58.870786 192.168.1.169 > terrapin.taickim.net: AH(spi=0x00000300,seq=0x33d7): ESP(spi=0x00000301,seq=0x33d7)
      </screen>

    </sect2>

  </sect1>

  <sect1>
    <title>Configurando o IPsec para fazer troca automática de chaves</title>

    <sect2>
      <title>Introdução</title>

      <para>
        A troca automática de chaves já foi brevemente citada no início deste capítulo.
        Basicamente o IPsec com IKE funciona da seguinte maneira.
      </para>

      <orderedlist>
        <listitem>
	  <para>
        Algum processo em um host deseja se conectar a outro host. O kernel então verifica
        se existe uma política de segurança para o outro host. Se já existe uma associação segura
        correspondente à política, a conexão pode ser feita e será autenticada, encriptada e/ou comprimida
        conforme tenha sido definido na associação segura.
        Se não existe uma associação segura, o kernel vai então requisitar ao daemon IKE (que roda em modo usuário)
        que configure a associação segura necessária.
	  </para>
	</listitem>
	<listitem>
	  <para>
        Durante a primeira fase de troca de chave o daemon IKE tentará verificar
        a autenticidade do outro host. Isso é normalmente feito com uma chave ou certificado
        pré-compartilhado.
        Se houver êxito nesse verificação, um canal seguro será criado entre os dois hosts, normalmente
        chamado de associação segura IKE, e a troca de chaves continuará entre os dois hosts.
	  </para>
	</listitem>
	<listitem>
	  <para>
        Durante a segunda fazer de troca de chave, é criada a associação segura para a comunicação
        com o outro host. Isso envolve a escolha do algoritmo de encriptação que será utilizado e a
        geração de chaves que serão usadas para encriptar a comunicação.
	  </para>
	</listitem>
	<listitem>
	  <para>
        Neste ponto a primeira fase é executada novamente, mas como
        agora existem associações seguras, a comunicação pode continuar normalmente.
	  </para>
	</listitem>
      </orderedlist>

      <para>
          O daemon IKE <command>racoon</command> está disponível no pacote KAME IPsec Tools.
          Esta seção vai explicar como configurar o racoon.
      </para>
    </sect2>

    <sect2>
      <title>Usando o racoon com uma chave pré-compartilhada</title>

      <para>
        Como sempre, o primeiro passo para configurar o IPsec é definir as políticas de segurança.
        Diferentemente do exemplo que utiliza chaves manuais, você não deve configurar uma associação segura pois
        o racoon vai fazer isso por você. Nós vamos aqui usar os mesmos IPs do exemplo anterior.
        As regras de política de segurança são como:
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

spdadd 192.168.1.1 192.168.1.169 any -P out ipsec
	esp/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P in ipsec
	esp/transport//require;
      </screen>

      <para>
        Almas cautelosas provavelmente notaram que estão faltando políticas AH no exemplo.
        Na maioria das situações isso não é um problema, o ESP pode prover a autenticação. Mas
        você deve ter em mente que a autenticação é mais limitada; não protege informações fora
        do cabeçalho ESP. Mas isso é mais eficiente do que encapsular pacotes ESP no AH.
      </para>

      <para>
        Com as políticas de segurança já configuradas você pode então configurar o <command>racoon</command>.
        Já que informações específicas de conexão, como o método de autenticação, foram especificadas
        na fase um da configuração, nós podemos, de um modo geral, usar a fase dois da configuração.
        Também é possível fazer a configuração da fase especificamente para alguns hosts. Mas de um modo geral
        uma configuração genérica é suficiente para um cenário simples. Nós também vamos adicionar caminhos para
        o arquivo de chave pré-compartilhada e diretório de certificado.
        Segue abaixo um exemplo do <filename>/etc/racoon.conf</filename> com os caminhos e uma configuração (de fase dois) genérica de políticas:
      </para>

      <screen>
path pre_shared_key "/etc/racoon/psk.txt";
path certificate "/etc/racoon/certs";

sainfo anonymous {
{
	pfs_group 2;
	lifetime time 1 hour;
	encryption_algorithm 3des, blowfish 448, rijndael;
	authentication_algorithm hmac_sha1, hmac_md5;
	compression_algorithm deflate;
}
      </screen>

      <para>
        O identificador <parameter>sainfo</parameter> é usado para criar um
        bloco de configurações para uma associação de segurança específica.
        Ao invés de configurar isto para um host específico, o parâmetro <parameter>anonymous</parameter>
        é usado para especificar que as configurações devem se usadas por todos os hosts
        que não possuem sua própria configuração particular.
        O parâmetro <parameter>pfs_group</parameter> qual grupo de exponenciação Diffie-Hellman deve ser usado.
        Grupos diferente provêem diferentes tamanhos de números primos base que são usados no
        processo de autenticação.
        Grupo 2 provê um tamanho de 1024 bits. Se você quiser usar um tamanho maior, para aumentar a segurança,
        pode usar outro grupo (como o 14 para 2048 bits). O parâmetro <parameter>encryption_algorithm</parameter>
        especifica qual algoritmo de encriptação este host se dispõe a usar na encriptação ESP.
        O parâmetro <parameter>authentication_algorithm</parameter> especifica que o algoritmo
        que será usado pela autenticação ESP ou AH. Por fim, o parâmetro <parameter>compression_algorithm</parameter>
        é usado para especifica qual algoritmo de compressão deve ser usado quando o IPcomp é especificado em uma associação segura.
      </para>

      <para>
          O próximo passo é adicionar no arquivo de configuração <filename>racoon.conf</filename> a fase um de configuração para a troca de
          chaves com outro host.
          Por exemplo:
      </para>

      <screen>
remote 192.168.1.169
{
	exchange_mode aggressive, main;
	my_identifier address;
	proposal {
		encryption_algorithm 3des;
		hash_algorithm sha1;
		authentication_method pre_shared_key;
		dh_group 2;
	}
}
      </screen>

      <para>
          O bloco <parameter>remote</parameter> especifica a configuração da fase um.
          O parâmetro <parameter>exchange_mode</parameter> é usado para configurar qual modo
          de troca deve ser usado nesta fase.
          Você pode especificar mais de um modo de troca, mas o primeiro método será usado
          se o host é quem inicia a troca de chaves.
          O parâmetro <parameter>my_identifier</parameter> especifica qual identificador
          deve ser enviado para o host remoto. Se a opção <parameter>address</parameter> for usada para o parâmetro
          <parameter>my_identifier</parameter>, então o endereço IP será a identificação utilizada.
          O bloco <parameter>proposal</parameter> especifica parâmetros que serão propostos
          para o outro host durante a fase de autenticação.
          Os parâmetros <parameter>encryption_algorithm</parameter> e <parameter>dh_group</parameter> foram explicados anteriormente.
          O parâmetro <parameter>hash_algorithm</parameter> é obrigatório e configura o algoritmo de hash que será utilizado. Os valores podem
          ser <parameter>md5</parameter> ou <parameter>sha1</parameter>.
          O parâmetro <parameter>authentication_method</parameter> é crucial para a configuração já que especifica
          que uma chave pré-compartilhada deverá ser usada (como foi assinalado com <parameter>pre_shared_key</parameter>).
      </para>

      <para>
        Como o racoon configurado falta apenas uma coisa para fazer: a chave pré-compartilhada
        deve ser adicionada ao arquivo <filename>/etc/racoon/psk.txt</filename>.
        A sintaxe é muito simples, cada linha contém um endereço IP e uma chave. Estes parâmetros
        são separados com um caractere de tabulação.
        Por exemplo:
      </para>

      <screen>
192.168.1.169	somekey
      </screen>
    </sect2>

    <sect2>
      <title>Ativando a configuração do IPsec</title>

      <para>
          Neste ponto as configurações de políticas de segurança e do racoon estão prontas. Você pode portanto
          iniciar o teste das configurações. É uma boa idéia iniciar o <command>racoon</command> como parâmetro
          <parameter class="command">-F</parameter>. Isto fará o racoon executar em primeiro
          plano, o que tornará mais fácil capturar mensagens de erro.
          Para encerrar a história:
      </para>

      <screen>
# <command>setkey -f /etc/setkey.conf</command>
# <command>racoon -F</command>
      </screen>

      <para>
        Agora que você adicionou as políticas de segurança ao banco de dados de políticas de segurança, e iniciou
        o <command>racoon</command>, você pode testar o funcionamento da sua configuração do IPsec.
        Neste momento você pode pingar o outro host para iniciar o teste.
        Vai ocorrer uma falha na primeira vez em que você pingar o outro host:
      </para>

      <screen>
$ <command>ping 192.168.1.169</command>
connect: Resource temporarily unavailable
      </screen>

      <para>
        O motivo disto é que a associação de segurança ainda precisa ser estabelecida. Ma o pacote
        ICMP vai disparar a troca de chave.
        Você pode ver se houve êxito na troca dando uma olhada nas mensagens de log do <command>racoon</command>
        no arquivo <filename>/var/log/messages</filename>, ou no própria tela do terminal
        caso você tenha inciado o <command>racoon</command> em primeiro plano.
        Uma troca de chave com êxito se parece com o seguinte:
      </para>

      <screen>
 Apr  4 17:14:58 terrapin racoon: INFO: IPsec-SA request for 192.168.1.169 queued due to no phase1 found.
 Apr  4 17:14:58 terrapin racoon: INFO: initiate new phase 1 negotiation: 192.168.1.1[500]&lt;=&gt;192.168.1.169[500]
 Apr  4 17:14:58 terrapin racoon: INFO: begin Aggressive mode.
 Apr  4 17:14:58 terrapin racoon: INFO: received Vendor ID: DPD
 Apr  4 17:14:58 terrapin racoon: NOTIFY: couldn't find the proper pskey, try to get one by the peer's address.
 Apr  4 17:14:58 terrapin racoon: INFO: ISAKMP-SA established 192.168.1.1[500]-192.168.1.169[500] spi:58c4669f762abf10:60593eb9e3dd7406
 Apr  4 17:14:59 terrapin racoon: INFO: initiate new phase 2 negotiation: 192.168.1.1[0]&lt;=&gt;192.168.1.169[0]
 Apr  4 17:14:59 terrapin racoon: INFO: IPsec-SA established: ESP/Transport 192.168.1.169-&gt;host1ip; spi=232781799(0xddff7e7)
 Apr  4 17:14:59 terrapin racoon: INFO: IPsec-SA established: ESP/Transport 192.168.1.1-&gt;192.168.1.169 spi=93933800(0x59950e8)
      </screen>

      <para>
          Após a troca de chave, você pode verificar se a configuração do IPsec foi executada corretamente
          analisando com o <command>tcpdump</command> os pacotes que entram e saem.
          O <command>tcpdump</command> está disponível no grupo <emphasis>n</emphasis> da mídia de instalação do Slackware.
          Supondo que uma conexão com outro hosts se dê através da interface <emphasis>eth0</emphasis>,
          você pode então analisar os pacotes com <command>tcpdump -i eth0</command>. Se os pacotes
          estão encriptados com ESP você poderá conferir isto pelo o que é mostrado do <command>tcpdump</command>.
          Por exemplo:
      </para>

      <screen>
# <command>tcpdump -i eth0</command>
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
17:27:50.241067 IP terrapin.taickim.net &gt; 192.168.1.169: ESP(spi=0x059950e8,seq=0x9)
17:27:50.241221 IP 192.168.1.169 &gt; terrapin.taickim.net: ESP(spi=0x0ddff7e7,seq=0x9)
      </screen>

    </sect2>

  </sect1>

</chapter>
