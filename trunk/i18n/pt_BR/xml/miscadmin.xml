<!-- $Id: miscadmin.xml 283 2007-09-18 20:14:31Z danieldk $ -->

<chapter id="sysadmin-misc"> <?dbhtml filename="miscadmin.html"?>
  <title>Miscelânea</title>

  <sect1 id="sysadmin-misc-cron">
    <sect1info>
    <authorgroup>
      <author>
        <firstname>Murray</firstname>
    <surname>Stokely</surname>
    <contrib>Escrito por</contrib>
      </author>
    </authorgroup>

    <!-- You can modify the stylesheet to not display the above in
         print or HTML output.  It's just a way to keep things clear
     in the source document. -->

    </sect1info>

    <title>Agendando tarefas com o cron</title>

    <indexterm><primary>cron</primary></indexterm>
    <indexterm><primary>arquivo crontab</primary></indexterm>
    <indexterm><primary>agendamento</primary><secondary>tarefas</secondary></indexterm>

    <para>O Slackware Linux inclui uma implementação do clássico daemon
      cron do UNIX que permite aos usuários agendar tarefas para
      execução em intervalos regulares.  Cada usuário pode criar,
      remover, ou modificar um arquivo individual crontab.  Este arquivo
      contrab especifica comandos ou scripts a serem executados em
      intervalos regulares de tempo.  Linhas em branco no crontab ou
      linhas que comecem com um sinal de cerquilha
      (<quote><literal>#</literal></quote>) são ignoradas.</para>

    <para>Cada entrada no arquivo contrab deve conter 6 campos separados
      por espaços.  Estes campos são o minuto, hora, dia, mês, dia da
      semana, e comando.  Cada um dos primeiros campos podem contar um
      horário ou um coringa <quote><literal>*</literal></quote> que
      corresponde a todos os valores de horários para aquele campo.  Por
      exemplo, para ter o comando <command>date</command> executando
      todos os dias às 6:10 da manhã, a seguinte entrada poderia ser
      usada.</para>

    <programlisting>10 6 * * * date</programlisting>

    <para>Um crontab de usuário pode ser visualizado com o comando
    <command>crontab -l</command>.  Para uma introdução mais aprofundada
    sobre a sintaxe de um arquivo crontab, deixe-nos examinar o crontab
    padrão do superusuário <emphasis>root</emphasis>.</para>

    <screen># <userinput>crontab -l</userinput>
# If you don't want the output of a cron job mailed to you, you have to direct
# any output to /dev/null.  We'll do this here since these jobs should run
# properly on a newly installed system, but if they don't the average newbie
# might get quite perplexed about getting strange mail every 5 minutes. :^)
#
# Run the hourly, daily, weekly, and monthly cron jobs.
# Jobs that need different timing may be entered into the crontab as before,
# but most really don't need greater granularity than this.  If the exact
# times of the hourly, daily, weekly, and monthly cron jobs do not suit your
# needs, feel free to adjust them.
#
# Run hourly cron jobs at 47 minutes after the hour:
47<co id="co-crontab-1" /> *<co id="co-crontab-2" /> *<co id="co-crontab-3" /> *<co id="co-crontab-4" /> *<co id="co-crontab-5" /> /usr/bin/run-parts /etc/cron.hourly 1&gt; /dev/null<co id="co-crontab-6" />
#
# Run daily cron jobs at 4:40 every day:
40 4 * * * /usr/bin/run-parts /etc/cron.daily 1> /dev/null
#
# Run weekly cron jobs at 4:30 on the first day of the week:
30 4 * * 0 /usr/bin/run-parts /etc/cron.weekly 1> /dev/null
#
# Run monthly cron jobs at 4:20 on the first day of the month:
20 4 1 * * /usr/bin/run-parts /etc/cron.monthly 1> /dev/null</screen>


    <calloutlist>
      <callout arearefs="co-crontab-1">
        <para>O primeiro campo, <literal>47</literal>, especifica que
          esta tarefa deve acontecer aos 47 depois após a hora.</para>
      </callout>

      <callout arearefs="co-crontab-2">
        <para>O segundo campo, <literal>*</literal>, é um coringa, então
          esta tarefa deve acontecer <emphasis>a cada</emphasis>
          hora.</para>
      </callout>

      <callout arearefs="co-crontab-3">
        <para>O terceiro campo, <literal>*</literal>, é um coringa,
          então esta tarefa deve acontecer <emphasis>a cada</emphasis>
          dia.</para>
      </callout>

      <callout arearefs="co-crontab-4">
        <para>O quarto campo, <literal>*</literal>, é um coringa, então
          esta tarefa deve acontecer <emphasis>a cada</emphasis> mês.</para>
      </callout>

      <callout arearefs="co-crontab-5">
        <para>O quinto campo, <literal>*</literal>, é um coringa, então
          esta tarefa deve acontecer <emphasis>a cada</emphasis> dia da
          semana.</para>
      </callout>

      <callout arearefs="co-crontab-6">
        <para>O sexto campo, <command>/usr/bin/run-parts
      /etc/cron.hourly 1> /dev/null</command>, especifica o comando que
      deve ser executado no horário especificado nos primeiros cinco
      campos.</para>
      </callout>
    </calloutlist>

    <indexterm><primary>scripts periódicos</primary></indexterm>
    <indexterm><primary>slocate</primary></indexterm>

    <para>O crontab padrão do superusuário é configurado para executar
      os scripts <filename>/etc/cron.monthly</filename> mensalmente, os
      scripts em <filename>/etc/cron.weekly</filename> semanalmente, os
      scripts em <filename>/etc/cron.daily</filename> diariamente, e os
      scripts em <filename>/etc/cron.hourly</filename> a cada hora.  Por
      este motivo, não é estritamente necessário para um administrador
      entender as minúcias internas do cron como um todo.  Com o
      Slackware Linux você pode simplesmente adicionar um novo script a
      um dos diretórios acima para agendar uma nova tarefa periódica.
      Na verdade, examinar esses diretórios lhe dará uma boa idéia do
      trabalho que o Slackware Linux faz nos bastidores, regularmente,
      para manter as coisas como a base de dados do
      <command>slocate</command> atualizada.</para>

  </sect1>

  <sect1 id="sysadmin-misc-hdparm">
    <title>Parâmetros de disco rígido</title>

    <indexterm><primary>hdparm</primary></indexterm>
    <indexterm><primary>DMA</primary><secondary>alterando</secondary></indexterm>

    <para>
      Muitos discos modernos oferecem diversos recursos para aumento da
      performance e melhoria de integridade.  Muitos desses recursos
      podem ser ajustados com o comando <command>hdparm</command>.  Seja
      cuidadoso ao modificar configurações de disco com este utilitário,
      pois algumas modificações podem danificar os dados em seu disco.
    </para>

    <para>
      Você pode obter uma visão geral das configurações ativas para um
      disco informando o nó do dispositivo de um disco como parâmetro
      para o <command>hdparm</command>:
    </para>

    <screen>
# <command>hdparm /dev/hda</command>

/dev/hda:
 multcount    =  0 (off)
 IO_support   =  1 (32-bit)
 unmaskirq    =  1 (on)
 using_dma    =  1 (on)
 keepsettings =  0 (off)
 readonly     =  0 (off)
 readahead    = 256 (on)
 geometry     = 65535/16/63, sectors = 78165360, start = 0
    </screen>

    <para>
      Uma causa comum para má performance de disco é que o DMA não tenha
      sido automaticamente usado pelo kernel para o disco.  DMA irá
      agilizar operações de E/S e minimizar a utilização da CPU,
      tornando possível que o disco transfira dados diretamente para a
      memória do sistema.  Se o DMA for desativado, uma visão geral da
      configuração deverá mostrar esta linha:
    </para>

    <screen>
using_dma    =  0 (off)
    </screen>

    <para>
      Você pode facilmente ativar o DMA para este disco com o parâmetro
      <parameter class="command">-d</parameter> do
      <command>hdparm</command>:
    </para>

    <screen>
# <command>hdparm -d 1 /dev/hda</command>

/dev/hda:
 setting using_dma to 1 (on)
 using_dma    =  1 (on)
    </screen>

    <para>
      Você pode fazer isso a cada inicialização adicionando o comando
      hdparm ao <filename>/etc/rc.d/rc.local</filename>.
    </para>

    <para>
      O parâmetro <parameter class="command">-i</parameter> do
      <command>hdparm</command> também é muito útil, pois dá uma
      informação detalhada sobre um disco:
    </para>

    <screen>
# <command>hdparm -i /dev/hda</command>
/dev/hda:

 Model=WDC WD400EB-00CPF0, FwRev=06.04G06, SerialNo=WD-WCAAT6022342
 Config={ HardSect NotMFM HdSw>15uSec SpinMotCtl Fixed DTR>5Mbs FmtGapReq }
 RawCHS=16383/16/63, TrkSize=57600, SectSize=600, ECCbytes=40
 BuffType=DualPortCache, BuffSize=2048kB, MaxMultSect=16, MultSect=off
 CurCHS=16383/16/63, CurSects=16514064, LBA=yes, LBAsects=78163247
 IORDY=on/off, tPIO={min:120,w/IORDY:120}, tDMA={min:120,rec:120}
 PIO modes:  pio0 pio1 pio2 pio3 pio4
 DMA modes:  mdma0 mdma1 mdma2
 UDMA modes: udma0 udma1 udma2 udma3 udma4 *udma5
 AdvancedPM=no WriteCache=enabled
 Drive conforms to: device does not report version:

 * signifies the current active mode
    </screen>
  </sect1>

  <sect1 id="sysadmin-memory-hdparm">
    <title>Monitorando a utilização de memória</title>

    <para>
      Em algumas situações é útil diagnosticar informação sobre como a
      memória é usada.  Por exemplo, em um servidor com má performance,
      você poderia querer verificar se pouca quantidade de memória RAM
      está provocando falta de páginas no sistema, ou talvez você esteja
      configurando um serviço de rede, e queira encontrar os parâmetros
      de cache ótimos.  O Slackware Linux dispõe de algumas ferramentas
      que lhe ajudam a analisar como a memória é usada.
    </para>

    <sect2 id="sysadmin-misc-memory-vmstat">
      <title>vmstat</title>

      <para>
        O <command>vmstat</command> é um comando que pode prover
	estatísticas sobre várias partes do sistema de memória virtual.
	Sem nenhum parâmetro extra, o <command>vmstat</command> produz
	um sumário de algumas estatísticas relevantes:
      </para>

      <screen>
# <command>vmstat</command>
procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 0  0      0 286804   7912  98632    0    0   198     9 1189   783  5  1 93  1
      </screen>

      <para>
        Uma vez que, nesta seção, você está apenas interessado em
	utilização de memória, vamos dar uma olhada apenas nos campos
        <emphasis>memory</emphasis> e <emphasis>swap</emphasis>.
      </para>

      <itemizedlist>
        <listitem>
          <para>
            <emphasis>swpd</emphasis>: O total de memória virtual sendo
	    usada.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>free</emphasis>: O total de memória que não está
	    sendo usada no momento.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>buff</emphasis>: O total de memória usada como
            buffers.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>cache</emphasis>: O total de memória que é usada
	    para cache.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>si</emphasis>: O total de memória que é trazida
	    (swapped) a partir do disco
	    por segundo.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis>so</emphasis>: O total de memória que é levada
	    para o disco por segundo.
          </para>
        </listitem>
      </itemizedlist>

      <para>
        Frequentemente é útil ver como a utilização de memória se alteram ao
        longo do tempo.  Você pode adicionar um intervalo como parâmetro para o
        <command>vmstat</command>, para executá-lo continuamente, exibindo as
        estatísticas no momento atual.  Este intervalo é dado em segundos.
        Então, se você quiser ter estatísticas atualizadas a cada segundo, você
        pode executar:
      </para>

      <screen>
# <command>vmstat 1</command>
procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 2  0      0 315132   8832  99324    0    0   189    10 1185   767  5  1 93  1
 1  0      0 304812   8832  99324    0    0     0     0 1222  6881 24  8 68  0
 0  0      0 299948   8836  99312    0    0     0     0 1171  1824 41  9 49  0
 [...]
      </screen>

      <para>
        Adicionalmente, você pode dizer ao <command>vmstat</command> quantas
        vezes ele deveria mostrar estas estatísticas (ao invés de ficar fazendo
        isso indefinidamente).  Por exemplo, se você quiser exibir estatísticas
        a cada dois segundos, e cinco vezes no total, você poderia executar o
        <command>vmstat</command> da seguinte maneira:
      </para>

      <screen>
# <command>vmstat 2 5</command>
procs -----------memory---------- ---swap-- -----io---- --system-- ----cpu----
 r  b   swpd   free   buff  cache   si   so    bi    bo   in    cs us sy id wa
 2  0      0 300996   9172  99360    0    0   186    10 1184   756  5  1 93  1
 0  1      0 299012   9848  99368    0    0   336     0 1293  8167 20  8 21 51
 1  0      0 294788  11976  99368    0    0  1054     0 1341 12749 14 11  0 76
 2  0      0 289996  13916  99368    0    0   960   176 1320 17636 22 14  0 64
 2  0      0 284620  16112  99368    0    0  1086   426 1351 21217 25 18  0 58
      </screen>
    </sect2>

  </sect1>

</chapter>
