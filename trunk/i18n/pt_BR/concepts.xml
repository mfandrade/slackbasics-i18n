<!-- $Id: concepts.xml 333 2007-10-21 17:20:54Z danieldk $ -->

<chapter id="concepts"> <?dbhtml filename="concepts.html"?>
  <title>Conteitos gerais</title>

  <para>
    Este capítulo introduz alguns conceitos gerais sobre UNIX e GNU/Linux. 
    É importante ler este capítulo cuidadosamente se você não tem nenhuma 
    experiência com estes sistemas. Muitos conceitos vistos aqui são usados 
    neste livro e no GNU/Linux.
  </para>

  <sect1 id="concepts-multitasking">
    <title>Multitarefa</title>

    <sect2 id="concepts-multitasking-intro">
      <title>Introdução</title>

      <para>
        Uma das principais vantagens dos sistemas UNIX é a multitarefa. 
        Multitarefa quer dizer que vários programas podem rodar ao mesmo 
        tempo. Talvez você não saiba o quão isto é importante, porque a 
        maioria das pessoas usam apenas uma aplicação por vez. A multitarefa 
        é uma necessidade vital para sistemas UNIX e derivados. Mesmo que 
        você não tenha iniciado nenhuma aplicação, existem programas que 
        rodam em segundo plano. Por exemplo, alguns programas provêm serviços 
        de rede, enquanto outros mostram a tela de autenticação e esperam até que 
        o usuário se autentique em um terminal (virtual). Programas que 
        rodam em segundo plano muitas vezes são chamados de 
        <emphasis>daemon</emphasis>
        <footnote>
          <para>
	    A palavra <emphasis>daemon</emphasis> não deve ser confundida com 
	    a palavra <emphasis>demon</emphasis>, a palavra <emphasis>daemon</emphasis> 
	    refere-se à seres sobrenaturais da mitologia grega.
          </para>
        </footnote>.
      </para>
    </sect2>

    <sect2 id="concepts-multitasking-procsthreads">
      <title>Processos e threads</title>

      <para>
        Depois que o programa é carregado da mídia de armazenamento, 
        uma instância do programa é iniciado. Esta instância é 
        chamada de <emphasis>process</emphasis>. Um processo tem 
        A process has its own protected
        memory, named the <emphasis>process address space</emphasis>.
        The process address space has two important areas: the
        <emphasis>text</emphasis> area and the
        <emphasis>data</emphasis> area. The <emphasis>text</emphasis>
        area is the actual program code; it is used to tell the system
        what to do. The <emphasis>data</emphasis> area is used to
        store constant and runtime data. The operating system gives
        every process time to execute. On single processor systems
        processes are not really running simultaneously. In reality a
        smart scheduler in the kernel divides CPU time among
        processes, giving the illusion that processes run
        simultaneously. This process is called
        <emphasis>time-sharing</emphasis>. On systems with more than
        one CPU or CPU cores, more than one process can run
        simultaneously, but time-sharing is still used to divide the
        available CPU time among processes.
      </para>

      <para>
        New processes are created by duplicating a running process
        with the <command>fork</command> system call. <xref
        linkend="fork" /> shows a fork() call in action
        schematically. The parent process issues a fork() call. The
        kernel will respond to this call by duplicating the process,
        and naming one process the <emphasis>parent</emphasis>, and
        the other process the <emphasis>child</emphasis>.
      </para>

      <figure id="fork">
        <title>Forking of a process</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/fork.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>
        Forking can be used by a program to create two processes that
        can run simultaneously on multiprocessor machines. However,
        this is often not ideal, because both processes will have
        their own process address space.  The initial duplication of
        the process memory takes relatively much time, and it is
        difficult to share data between two processes. This problem is
        solved by a concept named
        <emphasis>multithreading</emphasis>. Multithreading means that
        multiple instances of the text area can run at the same time,
        sharing the data area. These instances, named threads, can be
        executed in parallel on multiple CPUs.
      </para>
    </sect2>
  </sect1>

  <sect1 id="concepts-fshierarchy">
    <title>Filesystem hierarchy</title>

    <sect2 id="concepts-fshierarchy-structure">
      <title>Structure</title>

      <para>
        Operating systems store data in filesystems. A filesystem is
        basically a tree-like structure of directories that hold
        files, like the operating system, user programs and user
        data. Most filesystems can also store various metadata about
        files and directories, for instance access and modification
        times. In GNU/Linux there is only one filesystem hierarchy, this
        means GNU/Linux does not have drive letters (e.g. A:, C:, D:) for
        different filesystems, like DOS and Windows. The filesystem
        looks like a tree, with a root directory (which has no parent
        directory), branches, and leaves (directories with no
        subdirectories). The root directory is alway denoted with a
        slash (<quote>/</quote>). Directories are separated by the
        same character.
      </para>

      <figure id="filesystem-structure">
        <title>The filesystem structure</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../images/fs-structure.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>
        <xref linkend="filesystem-structure"/> shows the structure of
        a filesystem.  You can see that the root directory
        <filename>/</filename> has two child directories:
        <filename>bin</filename> and <filename>home</filename>. The
        <filename>home</filename> directory has two child directories,
        <filename>joe</filename> and <filename>jack</filename>. The
        diagram shows the full pathname of each directory.  The same
        notation is used for files. Suppose that there is a file named
        <filename>memo.txt</filename> in the
        <filename>/home/jack</filename> directory, the full path of
        the file is <filename>/home/jack/memo.txt</filename>.
      </para>

      <para>
        Each directory has two special entries,
        <quote><filename>.</filename></quote>, and
        <quote><filename>..</filename></quote>.  The first refers to
        the directory itself, the second to the parent
        directory. These entries can be used for making relative
        paths. If you are working in the <filename>jack</filename>
        directory, you can refer to the the
        <filename>/home/joe</filename> directory with
        <filename>../joe</filename>.
      </para>
    </sect2>

    <sect2 id="concepts-fshierarchy-mounting">
      <title>Mounting</title>

      <para>
        You might wonder how it is possible to access other devices
        or partitions than the hard disk partition which holds the
        root filesystem. Linux uses the same approach as UNIX for
        accessing other filesystems. Linux allows the system
        administrator to connect a device to any directory in the
        filesystem structure. This process is named
        <emphasis>mounting</emphasis>.  For example, one could mount
        the CD-ROM drive to the <filename>/cdrom</filename>
        directory. If the mount is correct, the files on the CD-ROM
        can be accessed through this directory. The mounting process
        is described in detail in <xref
        linkend="basics-filesystem-mounting"/>.
      </para>
    </sect2>

    <sect2 id="concepts-fshierarchy-commondirs">
      <title>Common directories</title>

      <para>
        The Filesystem Hierarchy Standard Group has attempted to
        create a standard that describes which directories should
        be available on a GNU/Linux system. Currently, most major
        distributions use the Filesystem Hierarchy Standard (FHS)
        as a guideline. This section describes some mandatory
        directories on GNU/Linux systems.
      </para>

      <para>
        Please note that GNU/Linux does not have a separate directory
        for each application (like Windows). Instead, files are ordered by
        function and type. For example, the binaries for most
        common user programs are stored in
        <filename>/usr/bin</filename>, and their libraries in
        <filename>/usr/lib</filename>. This is a short overview of
        the important directories on a Slackware Linux system:
      </para>


      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">/bin</emphasis>: essential
            user binaries that should still be available in case the 
            <filename>/usr</filename> is not mounted.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/dev</emphasis>: device files.
            These are special files used to access certain devices.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/etc</emphasis>: the
            <filename>/etc</filename> directory contains all important
            configuration files.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/home</emphasis>: contains home
            directories for individual users.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/lib</emphasis>: essential system
            libraries (like glibc),
            and kernel modules.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/root</emphasis>: home directory for the 
            <emphasis>root</emphasis> user.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/sbin</emphasis>: essential binaries
            that are used for system administration.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/tmp</emphasis>: a world-writable
            directory for temporary files.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/bin</emphasis>: stores the majority
            of the user binaries.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/lib</emphasis>: libraries that are
            not essential for the system to boot.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/sbin</emphasis>: nonessential
            system administration binaries.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/var</emphasis>: variable data files,
            like logs.
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="concepts-devices">
    <title>Devices</title>

    <sect2 id="concepts-devices-intro">
      <title>Introduction</title>

      <para>
        In GNU/Linux virtually everything is represented as a file, including
        devices. Every GNU/Linux system has a directory with special files, named
        <filename>/dev</filename>. Each file in the <filename>/dev</filename>
        directory represents a device or pseudo-device. A device file
        has two special numbers associated with it, the
        <emphasis>major</emphasis> and the <emphasis>minor</emphasis>
        device number. The kernel knows which device a device
        file represents by these device numbers. The following example shows
        the device numbers for the <filename>/dev/zero</filename> device file:
      </para>

      <screen>
$ <command>file /dev/zero</command>
/dev/zero: character special (1/5)
      </screen>

      <para>
        The <command>file</command> command can be used to determine the
        type of a file. This particular file is recognized as a device file
        that has <emphasis>1</emphasis> as the major device number,
        and <emphasis>5</emphasis> as the minor device number.
      </para>

      <para>
        If you have installed the kernel source package, you can find
        a comprehensive list of all major devices with their minor and
        major numbers in
        <filename>/usr/src/linux/Documentation/devices.txt</filename>. An
        up-to-date list is also available on-line through the Linux
        Kernel Archives<footnote>
          <para>
            <ulink url="ftp://ftp.kernel.org/pub/linux/docs/device-list/" />
          </para>
        </footnote>.
      </para>

      <para>
        The Linux kernel handles two types of devices:
        <emphasis>character</emphasis> and <emphasis>block</emphasis>
        devices. Character devices can be read byte by byte,
        block devices can not. Block devices are read per block (for example
        4096 bytes at a time). Whether a device is a character or block device
        is determined by the nature of the device. For example, most storage
        media are block devices, and most input devices are character devices.
        Block devices have one distinctive advantage, namely that they can be
        cached. This means that commonly read or written blocks are stored in
        a special area of the system memory, named the cache. Memory is much
        faster than most storage media, so much performance can be gained
        by performing common block read and write operations in memory.
        Of course, eventually changes have to be written to the storage
        media to reflect the changes that were made in the cache.
      </para>
    </sect2>

    <sect2 id="concepts-devices-atascsi">
      <title>ATA and SCSI devices</title>

      <para>
        There are two kinds of block devices that we are going to look into
        in detail, because understanding the naming of these devices is
        crucial for  partitioning a hard disk and mounting. Almost all modern
        computers with an x86 architecture use ATA hard disks and CD-ROMs.
        Under Linux these devices are named in the following manner:
      </para>

      <screen>
/dev/hda - master device on the first ATA channel
/dev/hdb - slave device on the first ATA channel
/dev/hdc - master device on the second ATA channel
/dev/hdd - slave device on the second ATA channel
      </screen>

      <para>
        On most computers with a single hard disk, the hard disk is the master
        device on the first ATA channel (<filename>/dev/hda</filename>), and
        the CD-ROM is the master device on the second ATA channel. Hard disk
        partitions are named after the disk that holds them plus a number.
        For example, <filename>/dev/hda1</filename> is the first partition
        of the disk represented by the <filename>/dev/hda</filename>
        device file.
      </para>

      <para>
        SCSI hard disks and CD-ROM drives follow an other naming convention.
        SCSI is not commonly used in most low-end machines, but USB drives
        and Serial ATA (SATA) drives are also represented as SCSI disks. The
        following device notation is used for SCSI drives:
      </para>

      <screen>
/dev/sda - First SCSI disk
/dev/sdb - Second SCSI disk
/dev/sdc - Third SCSI disk
/dev/scd0 - First CD-ROM
/dev/scd1 - Second CD-ROM
/dev/scd2 - Third CD-ROM
      </screen>

      <para>
        Partitions names are constructed in the same way as ATA disks;
        <filename>/dev/sda1</filename> is the first partition on the first
        SCSI disk.
      </para>

      <para>
        If you use the software RAID implementation of the Linux kernel, RAID
        volumes are available as <filename>/dev/mdn</filename>, in which
        <emphasis>n</emphasis> is the volume number starting at 0.
      </para>
    </sect2>
  </sect1>
</chapter>
