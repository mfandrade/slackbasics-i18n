<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xml:id="chap-shell">
  <title>O shell</title>

  <sect1 xml:id="chap-shell-intro">
    <title>Introdução</title>

    <para>
      Neste capítulo iremos ver um ambiente tradicional em sistemas 
      UNIX: o shell. O shell é um interpretador que pode ser usado 
      interativamente e não-interativamente. Quando o shell é usado 
      não-interativamente, ele funciona como uma simples, porém 
      poderosa linguagem de script.
    </para>

    <para>
      O procedimento para começar com o shell depende se você loga 
      no sistema em modo gráfico ou em modo texto. Se você utiliza 
      o modo texto, o shell é imediatamente iniciado depois que você 
      digita a senha corretamente. Se você usa um gerenciador gráfico 
      de login como o KDM, faça o login como você faz normalmente e 
      procure no menu do seu gerenciador de janelas por um item 
      chamado <quote>XTerm</quote>, <quote>Terminal</quote> ou 
      <quote>Konsole</quote>. XTerm é um emulador de terminal que após 
      iniciado abre o shell.
    </para>

    <para>
      Antes de irmos adiante, temos que alertar você que o Slackware 
      Linux dispõe de mais de um shell. Há dois sabores de shell que 
      se tornaram populares ao longo do tempo, o Bourne shell e o 
      C shell. Neste capítulo iremos tratar do Bourne shells que 
      seguem o padrão IEEE 1003.1. Os shells Bash (Bourne Again Shell) 
      e ksh (Korn Shell) seguem bem este padrão. Então é uma boa idéia 
      utilizar um destes dois. Você pode facilmente ver qual o shell o 
      seu sistema está utilizando executando 
      <command>echo $SHELL</command>. Isto é o que um shell Bash irá 
      mostrar:
    </para>

    <screen>
$ <userinput>echo $SHELL</userinput>
/bin/bash
    </screen>
		
    <para>
      Se você está usando um shell diferente, você pode alterar o seu 
      shell padrão. Antes de mudar, você tem que saber o caminho 
      completo para o shell. Você pode fazer isso com o comando 
      <command>which</command>. Por exemplo:
    </para>

    <screen>
$ <userinput>which bash</userinput>
/bin/bash
$ <userinput>which ksh</userinput>
/bin/ksh
    </screen>

    <para>
      Neste sistema Slackware, o caminho completo do shell bash é 
      <filename>/bin/bash</filename>, e do shell ksh é 
      <filename>/bin/ksh</filename>. Com esta informação e o comando 
      <command>chsh</command> você pode mudar o seu shell padrão. O 
      exemplo seguinte irá definir o bash como shell padrão:
    </para>

    <screen>
$ <userinput>chsh -s /bin/bash</userinput>
Changing shell for daniel.
Password:
Shell changed.
    </screen>

    <para>
      O novo shell irá ser ativado após fechar a sessão do shell 
      atual (com <command>logout</command> ou <command>exit</command>), 
      ou abrindo outra janela de terminal se você estiver rodando o X11.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-executing">
    <title>Executando comandos</title>

    <para>
      Um shell interativo é usado para iniciar programas executando 
      um comando. Há dois tipos de comando que o shell pode iniciar:
    </para>

    <itemizedlist>
      <listitem>
	<para>
      <emphasis>Comandos embutidos:</emphasis> comandos embutidos 
      são integrados ao shell. Os mais comuns são:
	  <command>cd</command>, <command>fg</command>,
	  <command>bg</command>, e <command>jobs</command>.
	</para>
      </listitem>
      <listitem>
	<para>
      <emphasis>Comandos externos:</emphasis> comandos externos 
      são programas que não fazem parte do shell, e são guardados 
      em diretórios separados. Os mais comuns são:
	  <command>ls</command>, <command>cat</command>,
	  <command>rm</command>, e <command>mkdir</command>.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      Todos os comandos shell são executados utilizando a mesma sintaxe:
    </para>
		
    <screen>
<command>nomedocomando [argumento1 argumento2 ... argumenton]</command>
    </screen>

    <para>
      O número de argumentos é arbitrário e sempre são passados para o 
      comando. O comando decide o que fazer com eles.
    </para>

    <para>
      Todos os comandos embutidos podem ser executados, porque eles 
      fazem parte do shell. Comando externos podem ser executados pelo 
      nome quando o programa está em um caminho que o shell procura. 
      Este caminho é armazenado em uma variável chamada 
      <emphasis>PATH</emphasis>. Uma variável é uma parte da memória 
      que possui um nome, e seu conteúdo pode ser alterado. Nós podemos 
      ver o conteúdo da variável PATH da seguinte maneira:
    </para>

    <screen>
$ <userinput>echo $PATH</userinput>
/usr/kerberos/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/daniel/bin
    </screen>

    <para>
      Os caminhos dos diretórios na variável <emphasis>PATH</emphasis> 
      são separados pelo caracter dois-pontos (<emphasis>:</emphasis>).
      Você pode usar o comando <commando>which</command> para verificar 
      se um comando está no caminho de pesquisa do shell atual. Você 
      pode fazer isto passando um argumento para o 
      <command>which</command>. Por exemplo:
    </para>

    <screen>
$ <userinput>which pwd</userinput>
/bin/pwd
$ <userinput>which sysstat</userinput>
/usr/bin/which: no sysstat in (/usr/kerberos/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/daniel/bin)
    </screen>

    <para>
      Se o programa não está no caminho de pesquisa, você pode 
      digitar o seu caminho absoluto ou relativo.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-moving">
    <title>Movimentando-se</title>

    <para>
      Muitas vezes, é necessário saltar por várias partes de uma linha, 
      e então alterá-la, quando você está editando comandos longos. 
      Ambos <command>bash</command> and <command>ksh</command> possuem 
      atalhos para operações comuns. Há dois modos no shell, em que os 
      atalhos diferem. Estes modos correspondem em seu comportamento à 
      dois populares editores do UNIX. Os editores são o <command>vi</command> 
      e o <command>emacs</command>. Neste livro nós iremos apenas ver 
      os atalhos correspondentes ao modo EMACS. Você pode ver qual o 
      modo que o seu shell está rodando imprimindo a variável 
      <emphasis>SHELLOPTS</emphasis>. Neste primeiro exemplo o shell 
      é utilizado no modo <emphasis>emacs</emphasis>, e no segundo 
      é utilizado o modo <emphasis>vi</emphasis>. Você pode verificar 
      o modo utilizado procurando por <emphasis>emacs</emphasis> ou 
      <emphasis>vi</emphasis> no conteúdo da variável.
    </para>

    <screen>
$ <userinput>echo $SHELLOPTS</userinput>
braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor
    </screen>

    <screen>
$ <userinput>echo $SHELLOPTS</userinput>
braceexpand:hashall:histexpand:history:interactive-comments:monitor:vi
    </screen>

    <para>
      Se o seu shell estiver utilizando o modo <emphasis>vi</emphasis>, 
      você pode mudar para o modo <emphasis>emacs</emphasis> setando a 
      opção <emphasis>emacs</emphasis>:
    </para>

    <screen>
$ <userinput>set -o emacs</userinput>
    </screen>

    <para>
      Com o modo de edição <emphasis>emacs</emphasis> habilitado, você pode
      começar a usar atalhos.  Vamos ver aqui três tipos de atalhos: atalhos
      edição de caracter, atalhos de edição de palavra, e atalhos de edição de
      linha.  Posteriormente neste capítulo, vamos ver também alguns atalhos
      que são usados para obter entradas a partir do histórico de comandos.
    </para>

    <sect2 xml:id="chap-shell-moving-char">
      <title>Edição de caracter</title>

      <para>
       O primeiro grupo de atalhos usam caracteres como sua unidade lógica,
       significando que eles lhe permitem operações de edição de caracteres em
       linha de comando.  <xref
       linkend="chap-shell-moving-char-shortcuts-move" /> dá uma visão geral
       dos atalhos que podem ser usados para se movimentar em uma linha a
       distância de alguns caracteres.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-move">
	<title>Movimentando-se por um caracter</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry><entry>Descrição</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-b</entry>
	      <entry>Move-se um caracter para trás.</entry>
	    </row>
	    <row>
	      <entry>Ctrl-f</entry>
	      <entry>Move-se um caracter para frente.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
       Esses atalhos são simples, e não fazem nada de inesperado.  Suponha que
       você tenha digitado a seguinte linha:
      </para>

      <screen>
find ~/music -name '*.ogg' - -print<emphasis role="cursor">&#32;</emphasis>
      </screen>

      <para>
       O cursor estará ao final.  Agora você pode mover-se para o começo da linha
       segurando <emphasis>Ctrl-b</emphasis>:
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music - -name '*.ogg' -print
      </screen>

      <para>
       Da mesma forma, você também pode retornar ao final da linha segurando 
       <emphasis>Ctrl-f</emphasis>.  Há um erro nessa linha, pois há um hífen
       incorreto.  Para remover este hífem, você pode usar um dos atalhos de
       exclusão de caracter.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-delete">
	<title>Excluindo caracteres</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry><entry>Descrição</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-h</entry>
          <entry>Exclui um caracter antes do cursor.  Isto tem o mesmo efeito
             de se usar a tecla Backspace na maioria dos computadores
             pessoais.</entry>
	    </row>
	    <row>
	      <entry>Ctrl-d</entry>
	      <entry>Exclui o caracter que está sob o cursor.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
       Você pode excluir o hífem de duas maneiras.  A primeira é mover o cursor
       até o hífen:
      </para>

      <screen>
find ~/music <emphasis role="cursor">-</emphasis> -name '*.ogg' -print
      </screen>

      <para>
       e então pressionar <emphasis>Ctrl-d</emphasis> duas vezes.  Isto irá
       excluir o caracter hífem e o espaço logo após ele:
      </para>

      <screen>
find ~/music <emphasis role="cursor">-</emphasis>name '*.ogg' -print
      </screen>

      <para>
       Olhando para o fragmento original, a outra maneira de fazer a mesma coisa é
       posicionar o cursor no espaço após o hífem:
      </para>

      <screen>
find ~/music -<emphasis role="cursor">&#32;</emphasis> -name '*.ogg' -print
      </screen>

      <para>
       e então pressionar <emphasis>Ctrl-h</emphasis> duas vezes para excluir os
       dois caracteres anteriores, o hífem em si e o espaço imediatamente
       anterior.  O resultado será o mesmo, exceto pela movimentação do cursor:
      </para>

      <screen>
find ~/music<emphasis role="cursor">&#32;</emphasis>-name '*.ogg' -print
      </screen>

      <para>
       Uma das melhores características da maioria dos shells modernos é que você
       pode transpor (trocar) caracteres.  Isso é útil se você teve um erro de
       digitação invertendo dois caracteres.  <xref
       linkend="chap-shell-moving-char-shortcuts-swap" /> lista o atalho para
       transposição de caracteres.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-swap">
	<title>Trocando caracteres</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry><entry>Descrição</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-t</entry>
          <entry>Troca (transpõe) o caracter que está sob o cursor, e o
          caracter imediatamente antes do cursor.  Isso é útil para corrigir
          erros de digitação rapidamente.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
       Suponha que você tenha digitado o seguinte comando:
      </para>

      <screen>
cat myreport.ttx
      </screen>

      <para>
       A extensão contém um erro de digitação se você pretendia executar
       <command>cat</command> <filename>myreport.txt</filename>.  Isto pode ser
       corrigido com o atalho de transposição de caracteres.  Primeiro, mova-se
       para o segundo caracter dos dois que estão trocados:
      </para>

      <screen>
cat myreport.tt<emphasis role="cursor">x</emphasis>
      </screen>

      <para>
       Agora você pode pressionar <emphasis>Ctrl-t</emphasis>.  Os caracteres
       serão trocados, e o cursor se posicionará após os caracteres que foram
       trocados:
      </para>

      <screen>
cat myreport.txt<emphasis role="cursor">&#32;</emphasis>
      </screen>
    </sect2>

    <sect2 xml:id="chap-shell-moving-word">
      <title>Edição de palavra</title>

      <para>
       Na maioria das vezes é muito tedioso se mover em nível de caracter.
       Felizmente os shell Korn e Bash também permitem movimentações em nível
       de palavras.  Palavras são sequências de caracteres separadas por um
       caracter especial, como um espaço em branco.  <xref
       linkend="chap-shell-moving-word-shortcuts-move" /> resume os atalhos que
       podem ser usados para mover-se pelas palavras de uma linha.
      </para>

      <table xml:id="chap-shell-moving-word-shortcuts-move">
	<title>Movendo-se uma palavra</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry>
	      <entry>Descrição</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Esc b</entry>
	      <entry>
		Move-se de volta para o começo da palavra atual ou da anterior.
	      </entry>
	    </row>
	    <row>
	      <entry>Esc f</entry>
	      <entry>
		Avança para o último caracter da palavra atual ou da próxima palavra.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
       Como você pode ver, as letras nesses atalhos são iguais àquelas da
       movimentação para frente e para trás em nível de caracter.  A lógica de
       movimentação é um pouco curiosa.  Mover-se para frente coloca o cursor
       ao final da palavra atual, e não no primeiro caracter da próxima palavra
       como você poderia supor.  Vamos ver um breve exemplo.  No início, o
       cursor está no primeiro caracter da linha.
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music -name '*.ogg' -print
      </screen>

      <para>
       Digitar <emphasis>Esc f</emphasis> irá mover o cursor para depois do
       último caracter da primeira palavra, que neste caso é
       <emphasis>find</emphasis>:
      </para>

      <screen>
find<emphasis role="cursor">&#32;</emphasis>~/music -name '*.ogg' -print
      </screen>

      <para>
       Avançar mais uma vez irá posicionar o cursor depois de
       <emphasis>~/music</emphasis>:
      </para>

      <screen>
find ~/music<emphasis role="cursor">&#32;</emphasis>-name '*.ogg' -print
      </screen>

      <para>
       Um movimento para trás pôe o cursor no primeiro caracter da palavra
       atual, ou no primeiro caracter da palavra anterior se no momento o
       cursor estiver no primeiro caracter da palavra.  Então, mover-se uma
       palavra para trás no exemplo anterior irá pôr o cursor na primeira letra
       de <quote>music</quote>:
      </para>

      <screen>
find ~/<emphasis role="cursor">m</emphasis>usic -name '*.ogg' -print
      </screen>

      <para>
       Excluir palavras funciona da mesma forma que se mover pelas palavras,
       sendo que os caracteres que são encontrados são excluídos.  <xref
       linkend="chap-shell-moving-word-shortcuts-delete" /> lista os atalhos
       usados para excluir palavras.
      </para>

      <table  xml:id="chap-shell-moving-word-shortcuts-delete">
	<title>Excluindo palavras</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry>
	      <entry>Descrição</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>
		Alt-d
	      </entry>
	      <entry>
		Exclui a palavra, a partir da posição atual do cursor.
	      </entry>
	    </row>
	    <row>
	      <entry>
		Alt-Backspace
	      </entry>
	      <entry>
		Exclui cada caracter a partir da posição atual do cursor até o primeiro
		caracter que é encontrado na palavra.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
       Finalmente, há alguns atalhos que são úteis para manipular palavras.
       Esses atalhos estão listados em <xref
       linkend="chap-shell-moving-word-shortcuts-modify" />.
      </para>

      <table  xml:id="chap-shell-moving-word-shortcuts-modify">
	<title>Modificando palavras</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry>
	      <entry>Descrição</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Alt-t</entry>
	      <entry>
		Troca (transpôe) a palavra atual pela palavra anterior.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-u</entry>
	      <entry>
		Converte a palavra para maiúsculas, a partir da posição atual do 
		cursor.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-l</entry>
	      <entry>
		Converte a palavra para minúsculas, a partir da posição atual do
		cursor.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-c</entry>
	      <entry>
		Capitaliza (deixa a inicial em caixa alta) a palavra atual ou o próximo
		caracter encontrado na palavra.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
       Transposição é uma troca de palavras.  Se palavras normais são usadas, é
       um comportamento predizível.  Por exemplo, se tivermos a linha a seguir
       com o cursor em <quote>two</quote>
      </para>

      <screen>
one <emphasis role="cursor">t</emphasis>wo three
      </screen>

      <para>
       A transposição irá permutar as palavras <quote>two</quote> e
       <quote>one</quote>:
      </para>

      <screen>
two one three
      </screen>

      <para>
       Mas se houver caracteres não-alfabéticos, o shell irá trocar a palavra
       com sua anterior preservando a ordem dos caracteres não-alfabéticos.
       Isso é muito adequado para editar argumentos para comandos.  Suponha que
       você tenha se enganado, trocando a extensão do arquivo que você queria
       procurar e o parâmetro <emphasis>print</emphasis>:
      </para>

      <screen>
find ~/music -name '*.print' -ogg
      </screen>

      <para>
       Você pode corrigir isto colocando o cursor na segunda palavra
       problemática (neste caso, <quote>ogg</quote>) e transpondo as duas
       palavras.  Isto irá resultar no que efetivamente queríamos:
      </para>

      <screen>
find ~/music -name '*.ogg' -print
      </screen>

      <para>
       Finalmente, há alguns atalhos que trocam a capitalização de palavras.  O
       atalho Alt-u deixa todos os caracteres em maiúsculas, desde a posição
       atual do cursor até o final da palavra.  Então, se nós tivermos o nome
       <quote>alice</quote> em minúsculas, deixar o nome em maiúsculas, com o
       cursor em <quote>i</quote> resultará em <quote>alICE</quote>.  Alt-l tem
       o mesmo comportamento, mas troca as letras para minúsculas.  Então,
       usar Alt-l em <quote>alICE</quote> com o cursor em <quote>I</quote> irá
       resultar na string <quote>alice</quote>.  Alt-c troca apenas o caracter
       no qual o cursor estiver, ou o caracter inicial da próxima palavra
       encontrada para maiúsculas.  Por exemplo, pressionando-se Alt-c com o
       cursor no <quote>a</quote> de <quote>alice</quote> irá resultar em
       <quote>Alice</quote>.
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-moving-line">
      <title>Edição de linha</title>

      <para>
       O nível mais alto de edição que podemos ter é editar a própria linha de
       comando em si.  <xref linkend="chap-shell-moving-line-shortcuts-move" />
       relaciona os dois atalhos para movimentação em nível de linha.
      </para>

      <table xml:id="chap-shell-moving-line-shortcuts-move">
	<title>Movendo-se por linhas</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry>
	      <entry>Descrição</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-a</entry>
	      <entry>
		Move-se para o começo da linha atual.
	      </entry>
	    </row>
	    <row>
	      <entry>Ctrl-e</entry>
	      <entry>
		Move-se para o final da linha atual.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
       Suponha que o cursor esteja em algum lugar no meio de uma linha de
       comando:
      </para>

      <screen>
find ~/music -name<emphasis role="cursor">&#32;</emphasis>'*.ogg' -print
      </screen>

      <para>
       Pressionando-se Ctrl-e uma vez irá mover o cursor para o final da linha
       de comando:
      </para>

      <screen>
find ~/music -name '*.ogg' -print<emphasis role="cursor">&#32;</emphasis>
      </screen>

      <para>
       Pressionar Ctrl-a irá mover o cursor para o começo da linha:
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music -name '*.ogg' -print
      </screen>

      <para>
       Você também pode excluir caracteres em nível de linha.  Os atalhos estão
       listados em <xref linkend="chap-shell-moving-line-shortcuts-delete" />.
       Esses atalhos funcionam como os de movimentação, mas excluem todos os
       caracteres que forem encontrados.  Ctrl-k irá excluir o caracter sob o
       cursor, mas Ctrl-x Backspace não.  Mover-se para o começo da linha com
       Ctrl-a, seguido de um Ctrl-k, é um truque rápido para remover a linha
       completamente.
      </para>

      <table xml:id="chap-shell-moving-line-shortcuts-delete">
	<title>Excluindo linhas</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Teclas</entry>
	      <entry>Descrição</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-k</entry>
	      <entry>
		Exclui todos os caracteres na linha, a partir da posição do cursor.
	      </entry>
	    </row>
	    <row>
	      <entry>Ctrl-x Backspace</entry>
	      <entry>
		Exclui todos os caractres na linha até a posição atual do cursor.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-shell-history">
    <title>Histórico de comandos</title>

    <para>
      É muito comum você ter que executar comandos que já tinha executado
      anteriormente.  Felizmente, você não precisa digitá-los todos de novo.
      Você sempre pode navegar pelo histórico de comandos executados com as
      teclas de seta para cima e seta para baixo.  Além disso, também é
      possível procurar por um comando.  Pressione Control-r e comece a digitar
      o comando que você quer executar.  Você irá perceber que o bash irá
      mostrar a primeira correspondência que puder encontrar no histórico de
      comandos.  Se isso não resultar no comando que você estava procurando
      você pode continuar digitando o comando (até que um resultado único
      apareça), ou pressionar Control-r mais uma vez para obter a próxima
      ocorrência.  Quando você tiver encontrado o comando pelo qual estava
      procurando, você pode executá-lo pressionando &lt;Enter&gt;.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-completion">
    <title>Completação de comandos</title>

    <para>
      Completação é uma das funcionalidade mais úteis dos shells em sistemas
      UNIX-like.  Suponha que você tenha um diretório com dois arquivos
      chamados <filename>websites</filename> e <filename>recipe</filename>. E
      suponha que você queira executar um <command>cat</command> no arquivo
      <filename>websites</filename> (o comando <command>cat</command> exibe o
      conteúdo de um arquivo), especificando <filename>websites</filename> como
      um parâmetro para o cat.  Normalmente você deveria digitar <quote>cat
      websites</quote>, e executar o comando.  Mas experimente digitar
      <quote>cat w</quote>, e teclar &lt;Tab&gt;.  O Bash irá automaticamente
      expandir o que você digitou para <quote>cat websites</quote>.
    </para>

    <para>
      Mas e se você tiver mais de um arquivo começando com a mesma letra?
      Suponha que você tenha os arquivos <filename>recipe1.txt</filename> e 
      <filename>recipe2.txt</filename>.  Ao digitar <quote>cat r</quote> e
      teclar &lt;Tab&gt;, o Bash irá completar o nome do arquivo conforme você
      digitar.  O Bash deve deixar você com <quote>cat recipe</quote>.
      Experimente teclar &lt;Tab&gt; outra vez e o Bash irá lhe mostrar uma
      lista dos nomes de arquivos que iniciam com <quote>recipe</quote>, no
      caso, os dois arquivos recipe.  Neste ponto, você tem que ajudar o Bash
      digitando o próximo caracter do arquivo que você quer.  Suponha que você
      queira executar <command>cat</command> <filename>recipe2</filename>, você
      pode então digitar a tecla &lt;2&gt;.  Depois disso, então, você não terá
      problemas para completar o nome do arquivo, e teclar &lt;Tab&gt;
      novamente completará o comando para <quote>cat recipe2.txt</quote>.
    </para>

    <para>
      É interessante notar que essa completação também funciona para comandos.
      Muitos comandos do GNU/Linux já são bem curtos, então eles não vão tomar
      muito de seu tempo na maioria das vezes.
    </para>

    <para>
      É uma boa idéia praticar um pouco a completação, pois é possível
      economizar diversos toques no teclado se você souber usar bem este
      recurso.  Você pode criar alguns arquivos vazios com os quais praticar
      usando o comando <command>touch</command>.  Por exemplo, para criar um
      arquivo chamado <filename>recipe3.txt</filename>, apenas execute
      <command>touch recipe3.txt</command>.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-wildcards">
    <title>Caracteres coringa</title>

    <para>
      A maioria dos shells, incluindo Bash e o ksh, dão suporte a caractres
      coringa.  Coringas são caracteres especiais que podem ser usados para
      fazer casamento de padrões.  A tabela listada abaixo mostra alguns dos
      coringas mais comumente utilizados.  Vamos dar uma olhada em alguns
      exemplos para ter uma idéia geral de como os caracteres coringa
      funcionam.
    </para>

    <table xml:id="chap-shell-wildcards-thewildcards">
      <title>Coringas do shell Bash</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
	<thead>
	  <row>
	    <entry>Coringa</entry> <entry>Corresponde a</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>*</entry>
	    <entry>Uma string de caracteres</entry>
	  </row>
	  <row>
	    <entry>?</entry>
	    <entry>Um único caracter</entry>
	  </row>
	  <row>
	    <entry>[]</entry>
	    <entry>Um caracter dentro de um conjunto de caracteres</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 xml:id="chap-shell-wildcards-string">
      <title>Correspondência com uma string de caracteres</title>

      <para>
       Como você pode ver na tabela acima, o caracter <quote>*</quote> irá
       corresponder com uma string de caracteres.  Por exemplo, o padrão
       <emphasis>*.html</emphasis> corresponde com tudo o que termine com
       <emphasis>.html</emphasis>, já <emphasis>d*.html</emphasis> corresponde
       com tudo aquilo que comece com um <emphasis>d</emphasis> e termine com
       <emphasis>.html</emphasis>.
      </para>

      <para>
       Suponha que você gostaria de listar todos os arquivos com a extensão
       <emphasis>.html</emphasis> que estejam no diretório atual.  O seguinte
       comando fará esta tarefa:
      </para>

      <screen>
$ <userinput>ls *.html</userinput>
book.html        installation.html     pkgmgmt.html  usermgmt.html
filesystem.html  internet.html         printer.html  xfree86.html
gfdl.html        introduction.html     proc.html
help.html        slackware-basics.html shell.html
      </screen>

      <para>
       Dessa forma, nós poderíamos remover todos os arquivos que contenham 
       <emphasis>in</emphasis>:
      </para>

      <screen>
$ <userinput>rm in*</userinput>
      </screen>
    </sect2>

    <sect2 xml:id="chap-shell-wildcards-single">
      <title>Correspondência com um único caractere</title>

      <para>
       O caracter <quote>?</quote> funciona da mesma forma que o
       <quote>*</quote>, mas corresponde a apenas um único caracter.  Suponha
       que nós tenhamos três arquivos, <filename>file1.txt</filename>,
       <filename>file2.txt</filename> e <filename>file3.txt</filename>.  A
       string <emphasis>file?.txt</emphasis> corresponde a todos estes três
       arquivos, mas não corresponde a <filename>file10.txt</filename> (já que
       <quote>10</quote> são dois caracteres).
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-wildcards-set">
      <title>Correspondência com conjuntos de caracteres</title>

      <para>
       <quote>[]</quote> é um coringa que corresponde a cada caracter que
       esteja entre os colchetes.  Suponha que tenhamos os arquivos do exemplo
       anterior, <filename>file1.txt</filename>, <filename>file2.txt</filename>
       e <filename>file3.txt</filename>.  A string
       <emphasis>file[23].txt</emphasis> faz correspondência com os arquivos 
       <filename>file2.txt</filename> e <filename>file3.txt</filename>, mas não
       com <filename>file1.txt</filename>.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-shell-inout">
    <title>Redirecionamentos e dutos</title>

    <para>
      Uns dos principais recursos dos shells UNIX-like são os redirecionamentos
      e os dutos.  Antes de começarmos a ver ambas estas técnicas, temos que
      ver como a maioria dos comandos UNIX-like funcionam.  Quando um comando
      não está obtendo dados a partir de um arquivo, ele abre um pseudo-arquivo
      especial chamado <emphasis>stdin</emphasis>, e espera que os dados surjam
      a partir dele.  O mesmo princípio pode ser aplicado para a saída de um
      comando.  Quando não houver uma razão explícita para salvar a saída para
      um arquivo, o pseudo-arquivo <emphasis>stdout</emphasis> será aberto para
      saída de dados.  Este princípio é mostrado esquematicamente em <xref
      linkend="fig-shell-inout" />
    </para>

    <figure xml:id="fig-shell-inout">
      <title>Saída e entrada padrão</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="../images/shell-inout.png" format="PNG"/>
	</imageobject>
      </mediaobject>
    </figure>

    <para>
      Você pode ver <emphasis>stdin</emphasis> e <emphasis>stdout</emphasis> em
      ação com o comando <command>cat</command>.  Se o cat for iniciado sem
      quaiquer parâmetros ele irá apenas arguardar pela entrada em
      <emphasis>stdin</emphasis> e dar saída nos mesmos dados em 
      <emphasis>stdout</emphasis>.  Se nenhum redirecionamento for usado, a
      entrada do teclado será usada como <emphasis>stdin</emphasis>, e a saída
      obtida de <emphasis>stdout</emphasis> será exibida no terminal:
    </para>

    <screen>
$ <userinput>cat</userinput>
<command>Hello world!</command>
Hello world!
    </screen>

    <para>
      Como você pode ver, o cat irá exibir os dados em
      <emphasis>stdout</emphasis> depois de ler dados de entrada em 
      <emphasis>stdin</emphasis> a partir do teclado.
    </para>

    <sect2 xml:id="chap-shell-inout-redir">
      <title>Redirecionamento</title>

      <para>
       O shell permite que você faça uso de <emphasis>stdin</emphasis> e
       <emphasis>stdout</emphasis> usando <quote>&lt;</quote> e
       <quote>&gt;</quote>.  Os dados são redirecionados no sentido apontado
       pelas chaves angulares.  No exemplo a seguir, vamos redirecionar as
       somas md5 calculadas para um conjunto de arquivos, armazenando-as em um
       arquivo chamado <filename>md5sums</filename>:
      </para>

      <screen>
$ <userinput>md5sum * &gt; md5sums</userinput>
$ <userinput>cat md5sums</userinput> 
6be249ef5cacb10014740f61793734a8  test1
220d2cc4d5d5fed2aa52f0f48da38ebe  test2
631172a1cfca3c7cf9e8d0a16e6e8cfe  test3
      </screen>

      <para>
       Como podemos ver pela saída do comando <command>cat</command>, a saída
       do comando <command>md5sum *</command> foi redirecionada para o arquivo
       <filename>md5sums</filename>.  Nós também podemos usar o
       redirecionamento para fornecer entrada para um comando:
      </para>

      <screen>
$ <userinput>md5sum &lt; test1</userinput>
6be249ef5cacb10014740f61793734a8  -
      </screen>

      <para>
       Isto alimenta o <command>md5sum</command> com o conteúdo do arquivo
       <filename>test1</filename>.
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-inout-pipes">
      <title>Dutos</title>

      <para>
       Você também pode conectar a entrada e a saída de comando usando os assim
       chamados <emphasis>dutos</emphasis> (em inglês,
       <foreignphrase>pipes</foreignphrase>).  Um duto entre comandos pode ser
       feito com o caractere <quote>|</quote>.  A combinação de dois ou mais
       comandos é chamada de
       <emphasis>canalização</emphasis> (ou
       <foreignphrase>pipeline</foreignphrase>, em inglês).   <xref
       linkend="fig-shell-pipeline" /> exibe uma visão geral como um diagrama
       de uma canalização de dois comandos.
      </para>

      <figure xml:id="fig-shell-pipeline">
	<title>Uma canalização</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="../images/shell-pipeline.png" format="PNG"/>
	  </imageobject>
	</mediaobject>
      </figure>

      <para>
       A <quote>sintaxe</quote> de uma canalização é: <command>command1 | command2
       ... | commandn</command>.  Se você sabe como os mais básicos dos comandos
       UNIX-like funcionam, você agora pode deixar esses comandos trabalhando
       juntos.  Vamos ver um exemplo rápido:
      </para>

      <screen>
$ <userinput>cat /usr/share/dict/american-english | grep "aba" | wc -l</userinput>
123
      </screen>

      <para>
       O primeiro comando, <command>cat</command>, lê o arquivo de dicionário 
       <filename>/usr/share/dict/american-english</filename>.  A saída do
       comando <command>cat</command> é canalizada até o
       <command>grep</command>, o qual exibe todos os arquivos contendo a frase
       <quote>aba</quote>.  Por sua vez, a saída do <quote>grep</quote> é
       canalizada para o <command>wc -l</command>, que conta o número de linhas
       que recebe a partir de <emphasis>stdin</emphasis>.  Finalmente, quando o
       fluxo terminar, o <command>wc</command> exibe o número de linha que
       contou.  Então, os três comandos combinados contam o número de palavras
       que contém a frase <quote>aba</quote> neste dicionário em particular.
      </para>

      <para>
       Há centenas de pequenos utilitários relacionados a tarefas específicas.
       Como você pode imaginar, juntos estes comandos se tornam uma poderosa
       caixa de ferramentas através de combinações por meio de dutos.
      </para>
    </sect2>
  </sect1>
</chapter>
