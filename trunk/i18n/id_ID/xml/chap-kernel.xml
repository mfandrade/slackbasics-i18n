<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xml:lang="id" xml:id="kernel">
  <title>Membangun kernel</title>

  <sect1 xml:id="chap-kernel-intro">
    <title>Perkenalan</title>

    <para>
      Kernel Linux secara singkat dibahas pada <xref
      linkend="chap-intro-linux" />. Salah satu keunggulan dari Linux adalah ketersediaan 
      dari kode sumbernya (seperti pada sistem Slackware Linux). Hal ini berarti Anda 
      bisa mengkompilasi ulang kernel. Terdapat banyak situasi dimana mengkompilasi ulang 
      kernel menjadi berguna. Sebagai contoh:
    </para> 

    <itemizedlist>
      <listitem>
	<para>
	  <emphasis role="bold">Membuat kernel lebih ringkas</emphasis>:
	  Anda dapat menonaktifkan beberapa fungsionalitas dari kernel, untuk mengurangi 
	  ukurannya. Hal ini menjadi penting pada lingkungan dimana memori sangat terbatas.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis role="bold">Mengoptimalkan kernel</emphasis>: dimungkinkan untuk 
	  mengoptimalkan kernel. Sebagai contoh, dengan mengkompilasinya untuk jenis 
	  prosesor yang spesifik.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis role="bold">Dukungan perangkat keras</emphasis>: Dukungan untuk beberapa 
	  perangkat keras tidak diaktifkan secara default pada kernel Linux yang disediakan 
	  oleh Slackware Linux. Contoh sederhana adalah dukungan untuk sistem SMP.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis role="bold">Menggunakan perbaikan khusus</emphasis>: Terdapat banyak 
	  perbaikan tidak resmi untuk kernel Linux. Secara umum merupakan ide bagus untuk 
	  menghindari perbaikan tidak resmi. Tetapi beberapa perangkat lunak pihak ketiga, 
	  seperti <ulink
	  url="http://www.netraverse.com">Win4Lin</ulink>, memaksa Anda menginstall perbaikan 
	  kernel tambahan.
	</para>
      </listitem>
      <listitem>
	<para>
	  Membuat header dan infrastruktur pembangunan yang benar untuk membangun modul pihak ketiga.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      Bab ini berfokus pada seri kernel default yang digunakan pada Slackware Linux 12.0, Linux 2.6. 
      Mengkompilasi ulang kernel tidaklah susah, asalkan Anda membuat salinan kernel yang bisa Anda 
      gunakan ketika terjadi masalah. Kompilasi Linux melibatkan langkah-langkah berikut:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  Mengkonfigurasi kernel.
	</para>
      </listitem>
      <listitem>
	<para>
	  Membangun kernel.
	</para>
      </listitem>
      <listitem>
	<para>
	  Membangun modul-modul.
	</para>
      </listitem>
      <listitem>
	<para>
	  Menginstall kernel dan modul-modul.
	</para>
      </listitem>
      <listitem>
	<para>
	  Mengupdate konfigurasi LILO.
	</para>
      </listitem>
    </itemizedlist>
    
    <para>
      Pada bab ini, kami mengasumsikan bahwa kode sumber kernel tersedia pada 
      <filename>/usr/src/linux</filename>. Jika Anda telah menginstall paket 
      kernel-sources dari set disk <quote>k</quote>,
      kode sumber kernel tersedia pada 
      <filename>/usr/src/linux-versikernel</filename>, dan 
      <filename>/usr/src/linux</filename> adalah link simbolis pada direktori 
      kode sumber kernel yang sebenarnya. Jadi, jika Anda menggunakan paket kernel 
      standar dari Slackware Linux, Anda sudah siap.
    </para>

    <para>
      Berbeda dengan versi kernel yang lama, tidak lagi diperlukan untuk menggunakan 
      link simbolik <filename>/usr/src/linux</filename>. Jika Anda telah menguraikan 
      kode sumber kernel y ang baru pada <filename>/usr/src</filename>, Anda bisa membangun 
      kernel pada <filename>/usr/src/linux-&lt;version&gt;</filename>, dan menggunakan 
      direktori tersebut pada contoh di bab ini.
    </para>
  </sect1>

  <sect1 xml:id="chap-kernel-build">
    <title>Konfigurasi</title>

    <para>
      Seperti yang dijelaskan diatas, langkah pertama adalah mengkonfigurasi kode sumber kernel. 
      Untuk mempermudah konfigurasi kernel, merupakan ide yang bagus untuk menyalin konfigurasi 
      kernel default Slackware Linux ke kode sumber kernel. Berkas konfigurasi kernel standar 
      Slackware Linux disimpan pada media distribusi sebagai 
      <filename>kernels/&lt;namakernel&gt;/config</filename>. Misalkan Anda hendak menggunakan 
      konfigurasi kernel <filename>hugesmp.s</filename> sebagai awal (yang merupakan kernel default),
      dan Anda telah memiliki CD-ROM Slackware Linux yang sudah di-mount pada 
      <filename>/mnt/cdrom</filename>, Anda bisa menyalin konfigurasi kernel Slackware
      Linux dengan :
    </para>
    
    <screen>
# <userinput>cp /mnt/cdrom/kernels/hugesmp.s/config /usr/src/linux/.config</userinput>
    </screen>

    <para>
      Konfigurasi kernel yang berjalan juga bisa didapatkan pada <filename>/proc/config.gz</filename> 
      jika kernel dikompilasi dengan opsi <emphasis>CONFIG_IKCONFIG</emphasis> dan 
      <emphasis>CONFIG_IKCONFIG_PROC</emphasis>. Kernel default 
      Slackware Linux sudah mengaktifkan opsi tersebut. Jadi, jika Anda hendak menggunakan konfigurasi 
      dari kernel yang berjalan, Anda bisa menjalankan:
    </para>

    <screen>
# <userinput>zcat /proc/config.gz > /usr/src/linux/.config</userinput>
    </screen>

    <para>
      Jika Anda menggunakan berkas konfigurasi untuk versi kernel lain yang hendak Anda kompilasi, pada 
      biasanya kedua versi kernel tidak memiliki opsi yang sama. Opsi baru ditambahkan (misalnya driver 
      baru ditambahkan), dan terkadang beberapa komponen kernel dihapus. Anda bisa mengkonfigurasikan 
      opsi baru (dan menghapus opsi yang tidak dipakai) dengan perintah <command>make
      oldconfig</command> :
    </para>

    <para>
# <userinput>cd /usr/src/linux ; make oldconfig</userinput>
    </para>

    <para>
      Hal ini akan menanyakan Anda tentang opsi-opsi, apakah Anda hendak mengkompilasinya secara penuh 
      (<emphasis>Y</emphasis>), mengkompilasi sebagai modul
      (<emphasis>M</emphasis>), atau tidak menyertakannya
      (<emphasis>N</emphasis>). Sebagai contoh:
    </para>

    <screen>
IBM ThinkPad Laptop Extras (ACPI_IBM) [N/m/y/?] (NEW)
    </screen>

    <para>
      Seperti yang Anda lihat, opsi yang mungkin ditampilkan, dengan pilihan default dengan huruf kapital. 
      Jika Anda menekan &lt;Enter&gt;, maka opsi yang berhuruf besar akan digunakan. Jika Anda hendak 
      melihat informasi tentang sebuah opsi, Anda bisa masukkan tanda tanya (<emphasis>?</emphasis>):
    </para>

    <screen>
    IBM ThinkPad Laptop Extras (ACPI_IBM) [N/m/y/?] (NEW) <userinput>?</userinput>

This is a Linux ACPI driver for the IBM ThinkPad laptops. It adds
support for Fn-Fx key combinations, Bluetooth control, video
output switching, ThinkLight control, UltraBay eject and more.
For more information about this driver see &lt;file:Documentation/ibm-acpi.txt&gt;
and &lt;http://ibm-acpi.sf.net/&gt; .

If you have an IBM ThinkPad laptop, say Y or M here.

    IBM ThinkPad Laptop Extras (ACPI_IBM) [N/m/y/?] (NEW)
    </screen>

    <para>
      Hasil keluaran dari perintah ini bisa cukup panjang, karena opsi yang digunakan pada berkas konfigurasi, 
      dan yang tersedia pada kernel yang berjalan juga ditampilkan, tetapi konfigurasinya akan diisi sesuai dengan 
      berkas konfigurasi.
    </para>
    
    <para>
      Pada tahap ini, Anda bisa mulai mengkonfigurasi kernel secara detail. Terdapat tiga cara untuk mengkonfigurasi 
      kernel. Pertama adalah <parameter
      class="command">config</parameter>, yang hanya menanyakan kepada Anda apa yang hendak Anda lakukan untuk setiap 
      opsi kernel. Hal ini memakan waktu sangat lama. Jadi biasanya ini bukan cara yang baik untuk mengkonfigurasi kernel. 
      Cara yang lebih ramah adalah dengan <parameter
      class="command">menuconfig</parameter>, yang menggunakan sistem berbasis menu yang bisa Anda gunakan untuk mengkonfigurasi 
      kernel. Terdapat sistem berbasis X, yang bernama <parameter
      class="command">xconfig</parameter>. Anda bisa menjalankannya dengan berpindah ke direktori kode sumber kernel, dan 
      menjalankan <command>make
      &lt;tampilan&gt;</command>. Sebagai contoh, untuk mengkonfigurasi kernel dengan tampilan berbasis menu, Anda bisa 
      menggunakan perintah berikut:
    </para>
    
    <screen>
# <userinput>cd /usr/src/linux</userinput>
# <userinput>make menuconfig</userinput>
    </screen>
    
    <para>
      Tentu saja, jika Anda suka, Anda bisa mengedit berkas <filename>.config</filename> secara langsung dengan editor teks Anda.
    </para>

    <para>
      Seperti yang kita lihat sebelumnya, pada konfigurasi kernel terdapat tiga opsi untuk setiap pilihan:
      <quote>n</quote> menonaktifkan fungsionalitas, <quote>y</quote>
      mengaktifkan fungsionalitas, dan <quote>m</quote> mengkompilasi fungsionalitas sebagai modul. 
      Konfigurasi default kernel pada Slackware Linux adalah konfigurasi yang sangat bagus, ia menyertakan 
      dukungan untuk semua pengontrol disk dan sistem berkas yang umum, dan sisanya dikompilasi sebagai 
      modul. Apapun pilihan Anda, Anda harus memastikan bahwa driver untuk pengontrol disk dan dukungan 
      untuk sistem berkas yang berisi sistem berkas root Anda harus disertakan. Jika tidak, kernel tidak 
      akan bisa me-mount sistem berkas root, dan kernel akan panik karena tidak bisa menyerahkan inisialisasi pada 
      program <command>init</command>.
    </para>

    <note>
      <para>
	Selalu merupakan ide bagus untuk menyimpan kernel lama Anda, jika terjadi kesalahan pada saat konfigurasi. 
	Jika kernel yang hendak dikompilasi memiliki nomor versi yang sama dengan kernel yang berjalan, Anda harus
	dengan serius mempertimbangkan untuk memodifikasi opsi <emphasis>CONFIG_LOCALVERSION</emphasis>. String 
	yang ditentukan pada opsi ini ditambahkan pada nama versi. Sebagai contoh, jika kernel memiliki versi 
	2.6.21.6, dan 
	<emphasis>CONFIG_LOCALVERSION</emphasis> diisi dengan 
	<emphasis>"-smp-ddk"</emphasis>, versi kernel akan menjadi 
	<emphasis>2.6.21.6-smp-ddk</emphasis>.
      </para>

      <para>
	Jika Anda tidak memodifikasi versi dengan cara ini, installasi dari modul kernel baru akan menimpa modul dari 
	kernel yang berjalan. Hal ini tentunya tidak baik jika Anda harus kembali ke kernel lama.
      </para>
    </note>
  </sect1>
  
  <sect1 xml:id="chap-kernel-compile">
    <title>Kompilasi</title>

    <para>
      Kompilasi kernel dahulu terdiri dari beberapa langkah, tetapi kernel Linux 2.6 bisa dikompilasi dengan 
      menjalankan <command>make</command> pada direktori kode sumber kernel. Perintah ini akan menghitung 
      ketergantungan, membangun kernel, dan membangun dan menghubungkan modul kernel.
    </para>

    <screen>
# <userinput>cd /usr/src/linux</userinput>
# <userinput>make</userinput>
    </screen>
    
    <para>
      Setelah kompilasi selesai, pohon yang berisi modul yang sudah dikompilasi, dan citra kernel yang terkompresi bernama 
      <filename>bzImage</filename> akan berada pada 
      <filename>/usr/src/linux/arch/i386/boot</filename>. Anda bisa melanjutkan dengan installasi dari kernel dan modulnya.
    </para>
  </sect1>
  
  <sect1 xml:id="chap-kernel-install">
    <title>Installasi</title>
    
    <sect2 xml:id="chap-kernel-install-kernel">
      <title>Menginstall kernel</title>
      
      <para>
	Langkah berikutnya adalah untuk menginstall kernel dan modul kernel. Kita akan mulai dengan menginstall modul 
	kernel, karena hal ini bisa dilakukan dengan satu perintah dari pohon kode sumber kernel:
      </para>
      
      <screen>
# <userinput>make modules_install</userinput>
      </screen>
      
      <para>
	Hal ini akan menginstall modul pada 
	<filename>/lib/modules/&lt;versikernel&gt;</filename>. Jika Anda mengganti kernel dengan nomor versi yang 
	sama, maka merupakan ide bagus untuk menghapus modul lama sebelum menginstall yang baru. Misalnya:
      </para>
	
      <screen>
# <userinput>rm -rf /lib/modules/2.6.21.5-smp</userinput>
      </screen>
      
      <para>
	Anda bisa <quote>menginstall</quote> kernel dengan menyalinnya pada direktori 
	<filename>/boot</filename>. Anda bisa memberikan nama sesuai selera Anda, tetapi alangkah baiknya menggunakan 
	konvensi nama. Misalnya <filename>vmlinuz-versi</filename>. Sebagai contoh, jika Anda menamainya
	<filename>vmlinuz-2.6.21.5-smp-ddk</filename>, Anda bisa menyalinnya dari pohon kode sumber kernel dengan:
      </para>
      
      <screen>
# <userinput>cp arch/i386/boot/bzImage /boot/vmlinuz-2.6.21.5-smp-ddk</userinput>
      </screen>
      
      <para>
	Pada tahap ini, Anda sudah hampir selesai. Langkah terakhir adalah menambahkan kernel baru pada konfigurasi 
	Linux boot loader (LILO).
      </para>
    </sect2>
    
    <sect2 xml:id="chap-kernel-install-lilo">
      <title>Configuring LILO</title>
      
      <para>
        <acronym>LILO</acronym> (Linux Loader) adalah boot loader default yang digunakan Slackware Linux. Konfigurasi 
	dari LILO bekerja dalam dua langkah; langkah pertama adalah mengubah konfigurasi LILO pada 
	<filename>/etc/lilo.conf</filename>. Langkah kedua adalah menjalankan <command>lilo</command>, yang akan menulis 
	konfigurasi LILO pada boot loader. Konfigurasi LILO sudah memiliki informasi untuk kernel aktual yang Anda gunakan. 
	Merupakan ide bagus untuk mempertahankan informasi ini, sebagai opsi kembali jika kernel baru Anda tidak bekerja.
	Jika Anda melihat akhir dari 
        <filename>/etc/lilo.conf</filename> Anda akan melihat informasi yang serupa dengan ini:
      </para>
      
      <screen>
# Linux bootable partition config begins
image = /boot/vmlinuz
  root = /dev/hda5
  label = Slack
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking
# Linux bootable partition config ends
      </screen>
      
      <para>
        Cara termudah untuk menambahkan kernel baru adalah menduplikasi informasi yang ada, lalu mengedit informasi pertama, 
	mengubah opsi <parameter>image</parameter>, dan <parameter>label</parameter>. Setelah mengubah, 
	contoh diatas menjadi :
      </para>
      
      <screen>
# Linux bootable partition config begins
image = /boot/vmlinuz-2.6.21.5-smp-ddk
  root = /dev/hda5
  label = Slack
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking

image = /boot/vmlinuz
  root = /dev/hda5
  label = SlackOld
  read-only # Non-UMSDOS filesystems should be mounted read-only for checking
# Linux bootable partition config ends
      </screen>
      
      <para>
	Seperti yang Anda lihat, informasi <parameter>image</parameter> pertama mengarah pada kernel baru, dan label 
	dari informasi kedua diganti ke <quote>SlackOld</quote>. LILO akan secara otomatis boot ke yang pertama. Anda 
	sekarang bisa menginstall konfigurasi LILO baru dengan perintah <command>lilo</command> :
      </para>

      <screen>
# <userinput>lilo</userinput>
Added Slack *
Added SlackOld
      </screen>

      <para>
	Pada saat Anda boot berikutnya, kedua informasi akan tersedia, dan bagian 
	<quote>Slack</quote> akan dipakai sebagai default.
      </para>
      
      <note>
	<para>
	  Jika Anda hendak LILO menampilkan menu dengan informasi yang dikonfigurasikan pada <filename>lilo.conf</filename> 
	  pada setiap kali boot, pastikan Anda menambahkan baris yang berisi
	</para>

	<screen>
prompt
	</screen>

	<para>
	  pada <filename>lilo.conf</filename>. Jika tidak, LILO akan mem-boot informasi default yang ditentukan dengan 
          <emphasis>default=&lt;name&gt;</emphasis>,
          atau informasi pertama ketika tidak ada kernel default yang ditentukan. Anda bisa mengakses menu kapan saja dengan 
	  menekan kunci &lt;Shift&gt; ketika LILO dijalankan.
	</para>
      </note>
    </sect2>
  </sect1>
</chapter>
