<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xmlns:xl="http://www.w3.org/1999/xlink" xml:lang="id"
	 xml:id="chap-procmgmt">

  <title>Manajemen Proses</title>

  <sect1 xml:id="chap-procmgmt-theory">
    <title>Teori</title>

    <sect2 xml:id="chap-procmgmt-theory-proc">
      <title>Proses</title>

      <para>
	Sebuah instansiasi dari program yang berjalan disebut 
	<emphasis>proses</emphasis>. Setiap proses memiliki memori terproteksinya
	masing-masing, yang disebut <emphasis>alamat ruang proses</emphasis>. 
	Alamat ini berisi dua area: <emphasis>area teks</emphasis> dan <emphasis>area data</emphasis>. 
	Area teks berisi kode program sebenarnya, dan memberitahukan kepada sistem apa yang harus 
	dilakukan. Area data menyimpan konstanta dan data runtime dari sebuah proses. Karena terdapat 
	banyak proses pada sebuah sistem, dan hanya satu atau beberapa prosessor, kernel sistem 
	operasi membagi waktu prosesor diantara proses. Proses ini disebut dengan 
	<emphasis>time-sharing</emphasis>.
      </para>

      <table xml:id="chap-procmgmt-theory-proc-struct">
	<title>Struktur sebuah proses</title>

	<tgroup cols="2">
	  <thead>
	    <row><entry>Kolom</entry><entry>Deskripsi</entry></row>
	  </thead>

	  <tbody>
	    <row>
	      <entry>pid</entry><entry>Penanda numerik proses</entry>
	    </row>
	    <row>
	      <entry>ppid</entry><entry>Penanda proses untuk proses induk</entry>
	    </row>
	    <row>
	      <entry>euid</entry><entry>ID pengguna efektif dari proses</entry>
	    </row>
	    <row>
	      <entry>ruid</entry><entry>ID pengguna sebenarnya dari proses</entry>
	    </row>
	    <row>
	      <entry>egid</entry><entry>ID grup dari proses</entry>
	    </row>
	    <row>
	      <entry>rgid</entry><entry>ID grup sebenarnya dari proses</entry>
	    </row>
	    <row>
	      <entry>fd</entry><entry>Penunjuk ke daftar file descriptor yang dipakai</entry>
	    </row>
	    <row>
	      <entry>vmspace</entry><entry>Penunjuk ke alamat ruang proses</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	<xref linkend="chap-procmgmt-theory-proc-struct" /> menampilkan kolom informasi yang paling penting 
	yang disimpan oleh kernel tentang sebuah proses. Setiap proses dapat diidentifikasi secara unik 
	dengan <emphasis>PID</emphasis> (identifier proses), yang merupakan sebuah angka tidak bertanda. 
	Seperti yang akan kita lihat nanti, seorang pengguna dapat dengan mudah mendapatkan 
	PID dari sebuah proses. Setiap proses dihubungkan dengan sebuah <emphasis>UID</emphasis> (ID pengguna) 
	dan <emphasis>GID</emphasis> (ID grup) pada sistem. Setiap proses memiliki <emphasis>real UID</emphasis>, 
	yang merupakan UID yang digunakan ketika proses dijalankan, dan <emphasis>effective
	UID</emphasis>, yang merupakan UID yang digunakan untuk menjalankan proses. Biasanya, effective UID sama 
	dengan UID, tetapi beberapa program meminta sistem untuk mengganti effective UID. Effective UID menentukan 
	kontrol akses. Hal ini berarti bahwa jika seorang pengguna bernama joe menjalankan sebuah perintah, misalkan
	less, less hanya bisa membuka berkas dimana joe memiliki hak untuk membaca. Secara paralel, sebuah proses 
	juga memiliki <emphasis>real
	GID</emphasis> dan <emphasis>effective GID</emphasis>.
      </para>

      <para>
	Banyak proses akan membuka berkas, handle yang digunakan untuk beroperasi pada sebuah berkas disebut 
	<emphasis>file descriptor</emphasis>. Kernel mengelola daftar file descriptor yang dibuka untuk setiap 
	proses. Kolom <emphasis>fd</emphasis> berisi penunjuk pada daftar berkas yang dibuka. Kolom 
	<emphasis>vmspace</emphasis> menunjuk pada ruang alamat proses dari proses.
      </para>

      <figure xml:id="chap-procmgmt-theory-proc-procstates">
	<title>Status proses</title>

	<mediaobject>
	  <imageobject>
	    <imagedata format="PNG" fileref="../../images/procstates.png"/>
	  </imageobject>
	  <imageobject>
	    <imagedata format="SVG" fileref="../../images/procstates.svg"/>
	  </imageobject>
	</mediaobject>
      </figure>

      <para>
	Tidak setiap proses membutuhkan waktu CPU pada waktu tertentu. Sebagai contoh, beberapa 
	proses mungkin menunggu untuk beberapa operasi <emphasis>I/O</emphasis> (Input/Output) 
	untuk bisa selesai atau mungkin dihentikan. Status proses biasanya <emphasis>started</emphasis>,
	<emphasis>running</emphasis>, <emphasis>ready</emphasis> (untuk mulai), 
	<emphasis>blocked</emphasis> (menunggu untuk I/O), atau 
	<emphasis>terminated</emphasis>. <xref
	linkend="chap-procmgmt-theory-proc-procstates" /> menampilkan daur hidup dari sebuah 
	proses. Sebuah proses yang berada dalam status terminated, tetapi isi tabel proses tidak 
	diambil kembali sering disebut dengan <emphasis>proses zombie</emphasis>. Proses zombie 
	seringkali berguna untuk mengijinkan proses induk membaca status keluar dari proses, atau 
	menyiapkan isi tabel proses secara sementara.
      </para>
    </sect2>

    <sect2 xml:id="chap-procmgmt-theory-proc-new">
      <title>Membuat proses baru</title>

      <para>
	Proses baru dibuat dengan system call <emphasis>fork()</emphasis>. System call ini menyalin 
	ruang alamat proses dan informasi proses dari pemanggil, dan memberikan proses baru, yang disebut 
	proses anak yang memiliki ID yang berbeda. Proses anak akan melanjutkan eksekusi dari titik yang 
	sama dengan proses induk, tetapi mendapatkan nilai kembalian yang berbeda dari system call 
	<emphasis>fork()</emphasis>. Berdasarkan dari nilai kembalian ini, kode dari induk dan anak bisa 
	menentukan bagaimana melanjutkan proses eksekusi. Potongan kode C berikut menunjukan pemanggilan 
	<emphasis>fork()</emphasis> :
      </para>

      <programlisting>
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  pid_t pid = fork();
  if (pid == 0)
    printf("Hi, I am the child!\n");
  else
    printf("Hi, I am the parent, the child PID is %d!\n", pid);

  return 0;
}
      </programlisting>

      <para>
.	Program sederhana ini memanggil <emphasis>fork()</emphasis>, menyimpan nilai kembalian 
	dari 	<emphasis>fork()</emphasis> pada variabel <emphasis>pid</emphasis>. 
	<emphasis>fork()</emphasis> mengembalikan nilai kembalian <emphasis>0</emphasis> pada anak, 
	dan PID dari anak kepada induk. Pada kasus ini, kita bisa menggunakan struktur kondisional 
	sederhana untuk menguji nilai dari variabel <emphasis>pid</emphasis>, dan mencetak pesan 
	yang benar.
      </para>

      <para>
	Anda mungkin akan heran bagaimana mungkin memulai proses baru, karena pemanggilan 
	<emphasis>fork()</emphasis> menduplikasi proses yang ada. Itu merupakan pertanyaan yang bagus, 
	karena dengan <emphasis>fork()</emphasis> saja, tidak mungkin untuk menjalankan program baru. 
	Kernel UNIX juga menyediakan sekumpulan system call, dimulai dari <emphasis>exec</emphasis>, 
	yang memuat citra program pada proses aktual. Kita sudah lihat pada awal bab ini bahwa sebuah proses 
	adalah program yang berjalan -- sebuah proses dibuat pada memori dari citra program yang disimpan 
	pada media penyimpanan. Jadi, keluarga system call <emphasis>exec</emphasis> memberikan proses 
	yang berjalan sebuah fasilitas untuk mengganti kontennya dengan program yang disimpan pada 
	media tertentu. Dengan sendirinya, hal ini tidak terlalu berguna, karena setiap kali pemanggilan 
	<emphasis>exec</emphasis> selesai dilakukan, kode pemanggil sebelumnya (atau program) akan dihapus 
	dari proses. Hal itu bisa dibuktikan dari program C berikut:
      </para>

      <programlisting>
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  execve("/bin/ls", NULL, NULL);

  /* This will never be printed, unless execve() fails. */
  printf("Hello world!\n");

  return 0;
}
      </programlisting>

      <para>
	Program ini mengeksekusi <command>ls</command> dengan pemanggilan <emphasis>execve()</emphasis>. 
	Pesan yang dicetak dengan <emphasis>printf()</emphasis> tidak akan ditampilkan, karena 
	citra program yang berjalan digantikan dengan <command>ls</command>. Meski demikian, kombinasi 
	dari fungsi <emphasis>fork()</emphasis> dan <emphasis>exec</emphasis> sangatlah hebat. 
	Sebuah proses bisa melakukan fork terhadap dirinya sendiri, dan membiarkan proses anak 
	<quote>mengorbankan</quote> dirinya untuk menjalankan program lain. Program berikut mendemonstrasikan 
	pola ini:
      </para>

      <programlisting>
#include &lt;sys/types.h&gt;
#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;

int main() {
  pid_t pid = fork();
  if (pid == 0)
    execve("/bin/ls", NULL, NULL);

  printf("Hello world!");

  return 0;
}
      </programlisting>

      <para>
	Program ini melakukan form terhadap dirinya sendiri. Citra program dari proses anak akan 
	digantikan dengan <command>ls</command>,
	Sementara proses induk mencetak pesan <quote>Hello world!</quote> ke layar dan selesai.
      </para>

      <para>
	Prosedur ini diikuti dengan banyak program, termasuk shell, ketika sebuah perintah dieksekusi 
	dari prompt shell. Pada kenyataannya, semua proses pada sistem UNIX secara langsung atau 
	tidak langsung diturunkan dari proses <emphasis>init</emphasis>, yang merupakan program pertama 
	yang dijalankan pada sistem UNIX.
      </para>

    </sect2>

    <sect2 xml:id="chap-procmgmt-theory-proc-threads">
      <title>Thread</title>

      <para>
	Meskipun fork sangat berguna untuk membangun paralelisme<footnote><para>Misalnya, web server bisa 
	melakukan form banyak proses anak untuk menangani permintaan</para></footnote>, hal ini bisa 
	menjadi mahal untuk beberapa tujuan. Menyalin seluruh proses membutuhkan waktu, dan terdapat 
	biaya yang dilibatkan jika proses hendak berbagi data. Hal ini diselesaikan dengan menawarkan alternatif 
	yang lebih ringan, atau dengan kata lain mengijinkan lebih dari satu thread eksekusi. Setiap thread eksekusi 
	dieksekusi secara terpisah, tetapi data proses dibagi antar thread.
      </para>

      <para>
	Menulis program <emphasis>multithreaded</emphasis> yang bagus membutuhkan pengetahuan yang baik
	akan konsep berbagi data dan proses penguncian. Karena semua data dipakai bersama-sama, pemrograman 
	yang tidak benar bisa menimbulkan kesalahan seperti race conditions.
      </para>
    </sect2>
    
  </sect1>

  <sect1 xml:id="chap-procmanagement-analyzing">
    <title>Menganalisa proses yang berjalan</title>

    <sect2 xml:id="chap-procmanagement-analyzing-listing">
      <title>Mendata proses yang berjalan</title>

      <para>
	Sistem UNIX menyediakan perintah <command>ps</command> untuk menampilkan daftar proses 
	yang berjalan. Sayangnya, perintah ini adalah contoh dari kurangnya standarisasi. Varian BSD 
	dan System V dari <command>ps</command> memiliki opsinya masing-masing. Untungnya, GNU/Linux 
	mengimplementasikan parameter-parameter pada System V dan BSD-style, dan juga beberapa opsi 
	(gaya-GNU). Opsi yang diawali dengan tanda dash akan diinterpretasikan sebagai opsi milik 
	System V dan opsi tanpa dash adalah opsi milik BSD. Kami akan menjelaskan opsi System V
	pada bagian ini.
      </para>

      <para>
	Jika <command>ps</command> digunakan tanpa parameter apapun, perintah ini akan menampilkan semua 
	proses yang dimiliki oleh pengguna yang memanggil <command>ps</command> dan semua yang 
	berhubungan pada terminal yang dipanggil. Sebagai contoh:
      </para>

      <screen>
$ <userinput>ps</userinput>
  PID TTY          TIME CMD
 8844 pts/5    00:00:00 bash
 8862 pts/5    00:00:00 ps
      </screen>

      <para>
	Banyak informasi berguna yang bisa didapatkan dari hasil ini. Seperti yang Anda lihat, 
	dua proses akan ditampilkan: shell yang digunakan untuk memanggil <command>ps</command>
	(<emphasis>bash</emphasis>), dan perintah <command>ps</command> itu sendiri. Pada kasus ini, 
	terdapat empat kolom informasi. <emphasis>PID</emphasis> adalah ID proses dari proses, 
	<emphasis>TTY</emphasis> terminal yang mengontrol, <emphasis>TIME</emphasis> jumlah waktu CPU
	yang telah digunakan oleh proses, dan <command>CMD</command> perintah atau program dari salinan 
	yang berjalan. Kolom yang ditampilkan secara default bisa berbeda-beda untuk setiap sistem, tetapi 
	pailng tidak kolom-kolom berikut akan ditampilkan, dengan label kolom yang berbeda.
      </para>

      <para>
	Seringkali Anda hendak melihat tampilan yang lebih luas dari proses yang sedang berjalan. 
	Menambahkan opsi <parameter class="command">-a</parameter> akan menampilkan semua proses 
	yang dihubungkan dengan terminal. Sebagai contoh:
      </para>

      <screen>
$ <userinput>ps -a</userinput>
  PID TTY          TIME CMD
 7487 pts/1    00:00:00 less
 8556 pts/4    00:00:10 emacs-x
11324 pts/3    00:00:00 ps
      </screen>

      <para>
	Seperti yang Anda lihat, proses-proses dengan terminal pengontrol yang berbeda akan ditampilkan.
	Meskipun, dibandingkan dengan hasil keluaran dari <command>ps</command>, hanya proses-proses 
	yang mengontrol terminal yang akan ditampilkan. Sebagai contoh, shell yang digunakan untuk 
	memanggil <command>ps</command> tidak ditampilkan.
      </para>

      <para>
	Anda juga bisa mencetak semua proses yang sedang berjalan, termasuk proses yang 
	tidak berhubungan dengan terminal, dengan menggunakan opsi 
	<parameter class="command">-A</parameter> :
      </para>

      <screen>
$ <userinput>ps -A | head -n 10</userinput>
  PID TTY          TIME CMD
    1 ?        00:00:01 init
    2 ?        00:00:00 migration/0
    3 ?        00:00:00 ksoftirqd/0
    4 ?        00:00:00 watchdog/0
    5 ?        00:00:00 migration/1
    6 ?        00:00:00 ksoftirqd/1
    7 ?        00:00:00 watchdog/1
    8 ?        00:00:00 events/0
    9 ?        00:00:00 events/1
      </screen>

      <para>
	Anda bisa mencetak semua proses dengan ID pengguna tertentu dengan opsi 
	<emphasis>-U</emphasis>. Opsi ini menerima nama pengguna sebagai parameter, atau 
	banyak nama pengguna yang dipisahkan dengan koma. Perintah berikut akan menampilkan semua 
	proses yang memiliki ID pengguna <emphasis>xfs</emphasis> atau <emphasis>rpc</emphasis> :
      </para>

      <screen>
$ <userinput>ps -U xfs,rpc</userinput>
  PID TTY          TIME CMD
 2409 ?        00:00:00 portmap
 2784 ?        00:00:00 xfs
      </screen>

      <para>
	Anda juga bisa mencetak proses-proses dengan ID grup tertentu, dengan opsi <emphasis>-G</emphasis> :
      </para>

      <screen>
$ <userinput>ps -G messagebus,haldaemon</userinput>
  PID TTY          TIME CMD
 8233 ?        00:00:00 dbus-daemon
11312 ?        00:00:00 hald
11320 ?        00:00:00 hald-addon-keyb
11323 ?        00:00:00 hald-addon-acpi
      </screen>

      <para>
	Jika Anda hendak mendapatkan terminal fisik atau pseudo, Anda bisa menggunakan opsi <parameter
	class="command">-t</parameter> :
      </para>

      <screen>
$ <userinput>ps -t tty2</userinput>
  PID TTY          TIME CMD
 2655 tty2     00:00:00 getty
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-procmanagement-managing">
    <title>Mengelola proses</title>

    <sect2 xml:id="chap-procmanagement-managing-signals">
      <title>Mengirimkan sinyal ke proses</title>

      <para>
	Sinyal adalah bentuk kasar, tetapi efektif dari komunikasi antar proses. Sebuah sinyal pada dasarnya 
	adalah sebuah angka yang dikirimkan pada sebuah proses yang memiliki arti khusus. 
	Untuk semua sinyal, terdapat handle untuk sinyal default. Proses dapat menginstall handle untuk 
	penanganan sinyalnya, atau memilih untuk mengabaikan sinyal. Beberapa sinyal (biasanya SIGKILL 
	dan SIGSTOP) tidak dapat diabaikan. Semua sinyal memiliki nama simbol yang lebih nyaman untuk digunakan.
      </para>

      <para>
	Hanya beberapa sinyal yang biasanya menarik untuk penggunaan interaktif pada sistem berbasis UNIX. 
	Mereka adalah (diikuti oleh nomornya):
      </para>

      <itemizedlist>
	<listitem>
	  <para><emphasis>SIGKILL (9):</emphasis> memaksa menghentikan sebuah proses.</para>
	</listitem>
	<listitem>
	  <para><emphasis>SIGTERM (15):</emphasis> meminta proses untuk terminate. Karena ini merupakan 
	  sebuah permintaan, sebuah program bisa mengabaikan sinyal ini, kebalikan dengan 
	  <emphasis>SIGKILL</emphasis>.</para>
	</listitem>
	<listitem>
	  <para><emphasis>SIGHUP (1):</emphasis> Secara tradisional, sinyal ini akan memaksa sebuah 
	  terminal untuk selesai. Tetapi beberapa daemon (cth. <emphasis>inetd</emphasis>) membaca ulang 
	  konfigurasinya ketika sinyal ini dikirimkan.</para>
	</listitem>
      </itemizedlist>

      <para>
	Perintah <command>kill</command> digunakan untuk mengirimkan sinyal pada proses. Secara default, 
	<command>kill</command> mengirimkan sinyal <emphasis>SIGTERM</emphasis>. Untuk mengirimkan 
	sinyal ini, ID proses dari proses yang hendak Anda kirimi sinyal ini harus ditambahkan sebagai 
	parameter. Sebagai contoh :
      </para>

      <screen>
$ <userinput>kill 15631</userinput>
      </screen>

      <para>
	Untk mengirimkan sinyal lain, Anda bisa menggunakan salah satu dari dua opsi :
	<emphasis>-nomorsinyal</emphasis> atau
	<emphasis>-namasinyal</emphasis>. Jadi, perintah berikut akan mengirimkan sinyal 
	<emphasis>SIGKILL</emphasis> pada proses dengan ID proses <emphasis>15631</emphasis>:
      </para>

      <screen>
$ <userinput>kill -9 15631</userinput>
      </screen>

      <screen>
$ <userinput>kill -SIGKILL 15631</userinput>
      </screen>

    </sect2>

    <sect2 xml:id="chap-procmanagement-managing-nice">
      <title>Berlaku baik buat yang lain</title>

      <para>
	Anda bisa berlaku baik bagi pengguna lain dalam hal sumber daya komputer. Jika Anda 
	berencana untuk membangun proses yang memakan waktu CPU yang intensif, tetapi tidak ingin 
	menganggu pekerjaan pengguna lain dari sistem (atau proses lain), Anda bisa memberikan beberapa 
	tingkat 'kebaikan' pada sebuah proses. Secara praktis, hal ini berarti Anda bisa mempengaruhi prioritas
	penjadwalan dari proses. Proses yang lebih baik mendapatkan prioritas yang lebih rendah. Kebaikan dari 
	proses secara normal adalah <emphasis>0</emphasis>, dan bisa diganti dengan menjalankan program 
	dengan perintah <command>nice</command>. Opsi <emphasis>-n [kebaikan]</emphasis> bisa digunakan untk 
	menentukan tingkat kebaikan:
      </para>

      <screen>
$ <userinput>nice -n 20 cputimewaster</userinput>
      </screen>

      <para>
	Nilai maksimal untuk kebaikan sangat tergantung dari implementasi. Jika program dijalankan dengan 
	<command>nice</command>, tetapi tidak ada nilai yang diberikan, maka akan diset sebagai 
	<emphasis>10</emphasis>. Jika Anda heran: ya, Anda bisa saja bertindak semena-mena, tetapi hak ini 
	hanya terbatas untuk pengguna <emphasis>root</emphasis>. Anda bisa meningkatkan prioritas dari 
	proses dengan menentukan nilai negatif.
      </para>

      <para>
	Anda juga bisa memodifikasi proses yang berjalan dengan perintah <command>renice</command>. Hal ini 
	bisa dilakukan untuk ID proses tertentu (<parameter class="command">-p
	PIDs</parameter>), pengguna  (<parameter class="command">-u
	user/uid</parameter>), dan grup efektif (<parameter
	class="command">-g group/gid</parameter>). Nilai baru ditentukan sebagai parameter pertama.
      </para>

      <para>
	Tingkat kebaikan dari proses hanya bisa dinaikkan. Dan, tentu saja tidak ada pengguna lain selain 
	<emphasis>root</emphasis> yang dapat mempengaruhi tingkat kebaikan proses dari pengguna lain.
      </para>

      <para>
	Mari kita lihat pada contoh, untuk menentukan tingkat kebaikan dari sebuah proses dengan PID 
	<emphasis>3108</emphasis> menjadi <emphasis>14</emphasis>, Anda bisa menggunakan perintah berikut :
      </para>

      <screen>
$ <command>renice 14 -p 3108</command>
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-procmanagement-jobcontrol">
    <title>Kontrol pekerjaan</title>

    <para>
      Seringkali penting untuk mengelompokkan proses-proses untuk mengijinkan 
      operasi pada sekumpulan proses, misalnya mendistribusikan sebuah sinyal untuk semua proses pada 
      sebuah grup dan bukan pada satu proses saja. Tidak heran, sekumpulan proses ini disebut 
      <emphasis>program groups</emphasis> pada UNIX. Setelah sebuah fork, sebuah proses anak secara 
      otomatis merupakan anggota dari process group dari induk. Meski demikian, process groups baru bisa 
      dibuat dengan membuat satu proses menjadi pemimpin, dan menambahkan proses lain pada grup. ID process 
      group adalah PID dari pemimpin process group.
    </para>

    <para>
      Secara virtual, semua shell UNIX modern memberikan process group pada proses yang dibuat melalui 
      pemanggilan sebuah perintah. Semua proses pada pipeline biasanya ditambahkan pada satu process group.
      Contoh berikut yang membuat sebuah pipeline akan dieksekusi.
    </para>

    <screen>
cat | tr -s ' ' | egrep 'foob.r'
    </screen>

    <para>
      shell akan menjalankan langkah-langkah berikut:
    </para>

    <orderedlist>
      <listitem>
	<para>
	  Tiga proses akan di-fork.
	</para>
      </listitem>
      <listitem>
	<para>
	  Proses pertama pada pipeline diletakkan pada process group dengan PIDnya sendiri sebagai ID 
	  process group, membuatnya menjadi pemimpin. Proses lain dari pipeline akan ditambahkan pada 
	  process group.
	</para>
      </listitem>
      <listitem>
	<para>
	  File descriptors dari proses pada pipeline akan dikonfigurasi ulang untuk membentuk sebuah 
	  pipeline.
	</para>
      </listitem>
      <listitem>
	<para>
	  Program pada pipeline akan dieksekusi.
	</para>
      </listitem>
    </orderedlist>

    <para>
      Shell menggunakan process groups untuk mengimplementasikan <emphasis>kontrol pekerjaan</emphasis>. 
      Sebuah shell dapat menjalankan banyak pekerjaan dibelakang layar, bisa terdapat banyak pekerjaan 
      yang dihentikan, dan satu pekerjaan dapat berjalan di depan (foreground). Sebuah job yang berjalan 
      dihubungkan ke terminal untuk standard input (berarti merupakan pekerjaan yang mendapatkan masukan 
      dari pengguna).
    </para>

    <sect2 xml:id="chap-procmgmt-jobcontrol-stopping">
      <title>Menghentikan dan melanjutkan pekerjaan</title>
      
      <para>
	Sebuah pekerjaan yang berada di foreground (pekerjaan yang menerima masukan pengguna dari terminal) 
	dapat dihentikan dengan menekan <emphasis>Ctrl-z</emphasis> (menekan tombol kunci 'Ctrl' dan 
	'z' secara bersamaan). Hal ini akan mengentikan pekerjaan, dan memberikan kontrol atas terminal 
	kepada shell. Mari kita coba dengan perintah <command>sleep</command>, yang menunggu sejumlah waktu 
	dalam detik sesuai dengan yang disediakan sebagai argumen:
      </para>

      <screen>
$ <userinput>sleep 3600</userinput>
<userinput>Ctrl-z</userinput>
[1]+  Stopped                 sleep 3600
      </screen>

      <para>
	Process group, yang kita rujuk sebagai sebuah pekerjaan telah dihentikan, yang berarti 
	<command>sleep</command> sudah berhenti - eksekusinya benar-benar berhenti. Anda bisa mendapatkan 
	daftar pekerjaan dengan perintah <command>jobs</command> :
      </para>

      <screen>
$ <userinput>jobs</userinput>
[1]+  Stopped                 sleep 3600
      </screen>

      <para>
	Hal ini menampilkan angka pekerjaan (<emphasis>1</emphasis>), statusnya, dan perintah yang digunakan 
	untuk memulai pekerjaan ini. Mari kita jalankan program lain, hentikan program tersebut, dan lihat pada 
	daftar pekerjaan.
      </para>

      <screen>
$ <userinput>cat</userinput>
<userinput>Ctrl-z</userinput>
[2]+  Stopped                 cat
$ <userinput>jobs</userinput>
[1]-  Stopped                 sleep 3600
[2]+  Stopped                 cat
      </screen>

      <para>
	Seperti yang diharapkan, pekerjaan kedua juga dihentikan, dan diberikan angka pekerjaan <emphasis>2</emphasis>. 
	Tanda plus (<emphasis>+</emphasis>) mengikuti pekerjaan pertama telah berubah menjadi tanda minus (<emphasis>-</emphasis>), 
	sedangkan pekerjaan kedua sekarang ditandai dengan tanda plus. Tanda plus digunakan untuk mengindikasikan 
	<emphasis>pekerjaan aktual</emphasis>. Perintah 
	<command>bg</command> dan <command>fg</command> yang akan kita lihat sebentar lagi, akan beroperasi pada 
	pekerjaan aktual jika tidak ada pekerjaan yang diberikan sebagai parameter.
      </para>
     
      <para>
	Biasanya, ketika Anda bekerja dengan pekerjaan, Anda hendak memindahkan pekerjaan pada foreground kembali. 
	Hal ini dilakukan dengan perintah <command>fg</command>. Menjalankan <command>fg</command> tanpa parameter 
	akan memindahkan pekerjaan aktual pada foreground.  Sebagian besar shell akan mencetak perintah yang 
	dipindahkan ke foreground untuk memberikan indikator proses apa yang dipindahkan :
      </para>

      <screen>
$ <userinput>fg</userinput>
cat
      </screen>

      <para>
	Tentu saja, tidak selalu berguna untuk meletakkan pekerjaan aktual pada foreground. Anda bisa meletakkan 
	pekerjaan lain pada foreground dengan menambahkan nomor pekerjaan diawali dengan tanda persen 
	(<emphasis>%</emphasis>) sebagai argumen dari <command>fg</command>:
      </para>

      <screen>
$ <userinput>fg %1</userinput>
sleep 3600
      </screen>

      <para>
	Berpindah pekerjaan akan menghentikan pekerjaan aktual dan meletakkannya pada foreground seringkali 
	berguna ketika shell digunakan secara interaktif. Sebagai contoh, misalkan Anda sedang mengedit 
	sebuah berkas dengan editor teks, dan hendak menjalankan perintah lain lalu kembali mengedit. Anda 
	bisa menghentikan editor dengan <emphasis>Ctrl-z</emphasis>, menjalankan sebuah perintah, dan meletakkan 
	editor kembali dengan <command>fg</command>.
      </para>
    </sect2>

    <sect2 xml:id="chap-procmgmt-jobcontrol-background">
      <title>Pekerjaan dibelakang</title>

      <para>
	Selain menjalankan program pada foreground, pekerjaan juga bisa dijalankan dibelakang (background). 
	Hal ini berarti mereka tetap berjalan, tetapi masukkan dari terminal tidak dialihkan ke proses 
	background. Sebagian besar shell mengkonfigurasikan dirinya untuk mengeluarkan hasil keluaran pada 
	shell dimana mereka pertama kali dijalankan.
      </para>

      <para>
	Sebuah proses yang dihentikan bisa dilanjutkan di background dengan perintah <command>bg</command> :
      </para>

      <screen>
$ <userinput>sleep 3600</userinput>
  
[1]+  Stopped                 sleep 3600
$ <userinput>bg</userinput>
[1]+ sleep 3600 &amp;
$
      </screen>

      <para>
	Anda bisa melihat bahwa pekerjaan memang benar-benar berjalan dengan 
	<command>jobs</command>:
      </para>

      <screen>
$ <userinput>jobs</userinput>
[1]+  Running                 sleep 3600 &amp;
      </screen>

      <para>
	Seperti <command>fg</command>, Anda bisa memindahkan pekerjaan lain selain pekerjaan aktual 
	ke background dengan menentukan angka pekerjaannya :
      </para>

      <screen>
$ <command>bg %1</command>
[1]+ sleep 3600 &amp;
      </screen>

      <para>
	Anda juga bisa meletakkan sebuah pekerjaan langsung ke background ketika dijalankan, dengan 
	menambahkan tanda ampersand (&amp;) pada perintah atau pipeline. Sebagai contoh :
      </para>

      <screen>
$ <userinput>sleep 3600 &amp;</userinput>
[1] 5078
      </screen>

    </sect2>
  </sect1>
</chapter>
