<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xml:id="chap-init">
  <title>Inisialisasi sistem</title>

  <para>
    Bab ini menjelaskan inisialisasi Slackware Linux. Berbagai berkas konfigurasi yang digunakan 
    untuk memanipulasi proses inisialisasi juga dijelaskan.
  </para>

  <sect1 xml:id="chap-init-lilo">
    <title>Bootloader</title>

    <para>
      Bagian paling penting dari sebuah sistem operasi adalah kernelnya. Kernel mengelola sumber 
      daya perangkat keras dan proses perangkat lunak. Kernel dijalankan oleh perekat antara 
      sistem <acronym>BIOS</acronym> (Basic Input/Output System) dan kernel, yang disebut bootloader. 
      Bootloader menangani komplikasi yang hadir bersamaan dengan memuat kernel tertentu.
    </para>

    <para>
      Sebagian besar bootloader bekerja dalam dua tahap. Tahap pertama loader memuat loader tahap kedua, 
      yang melakukan tugas sebenarnya. Boot loader dibagi menjadi dua tahap pada mesin 
      x86, karena BIOS hanya mengacu pada satu sektor (maka disebut boot sector) yang berukuran 512 byte.
    </para>

    <para>
      Slackware Linux menggunakan boot loader <acronym>LILO</acronym> (LInux LOader). Bootloader ini 
      telah dikembangkan sejak 1992, dan secara spesifik ditulis untuk memuat kernel Linux. Belakangan 
      LILO telah digantikan oleh <acronym>GRUB</acronym> (GRand Unified Bootloader) pada sebagian 
      besar distribusi GNU/Linux. GRUB tersedia sebagai paket ekstra pada media distribusi Slackware Linux.
    </para>

    <sect2 xml:id="chap-init-lilo-config">
      <title>Konfigurasi LILO</title>

      <para>
	LILO dikonfigurasikan melalui berkas konfigurasi <filename>/etc/lilo.conf</filename>. 
	Slackware Linux menyediakan utilitas yang mudah untuk mengkonfigurasikan LILO. 
	Utilitas konfigurasi ini bisa dijalankan dengan perintah 
	<command>liloconfig</command>, seperti yang dijelaskan pada bab installasi (<xref linkend="chap-install-installing"
	/>).
      </para>

      <para>
	Konfigurasi manual dari LILO sangatlah mudah. Berkas konfigurasi LILO biasanya diawali dengan 
	pengaturan global:
      </para>

      <screen>
# Start LILO global section
boot = /dev/sda <co xml:id="liloconf-global-1" />
#compact        # faster, but won't work on all systems.
prompt <co xml:id="liloconf-global-2" />
timeout = 50 <co xml:id="liloconf-global-3" />
# Normal VGA console
vga = normal <co xml:id="liloconf-global-4" />
      </screen>

      <calloutlist>
	<callout arearefs="liloconf-global-1">
	  <para>
	    Opsi <emphasis>boot</emphasis> menentukan dimana bootloader LILO harus diinstall. 
	    Jika Anda hendak menggunakan LILO sebagai bootloader utama untuk menjalankan Linux 
	    dan atau sistem operasi lain, merupakan ide yang bagus untuk menginstall LILO pada 
	    <acronym>MBR</acronym> (Master Boot Record) dari hard disk yang Anda gunakan untuk 
	    mem-boot sistem. LILO diinstall pada MBR dengan mengabaikan nomor partisi, misalnya
	    <filename>/dev/hda</filename> atau 
	    <filename>/dev/sda</filename>.  Jika Anda hendak menginstall LILO pada partisi tertentu, 
	    tambahkan nomor partisi, seperti 
	    <filename>/dev/sda1</filename>. Pastikan Anda sudah memiliki bootloader lain pada MBR, 
	    atau partisi tadi sudah dibuat aktif menggunakan <command>fdisk</command>. Jika tidak, 
	    Anda mungkin berakhir dengan sistem yang tidak bisa boot.
	  </para>

	  <para>
	    Hati-hati jika Anda menggunakan partisi dengan sistem berkas XFS !
	    Menulis LILO pada partisi XFS akan menimpa sebagian dari sistem berkas. Jika Anda menggunakan 
	    XFS untuk sistem berkas root (<filename>/</filename>), buat sebuah sistem berkas 
	    <filename>/boot</filename> yang bukan XFS yang dipakai untuk menginstall LILO, atau tulis LILO 
	    pada MBR.
	  </para>
	</callout>
	<callout arearefs="liloconf-global-2">
	  <para>
	    Opsi <emphasis>prompt</emphasis> akan memaksa LILO menampilkan menu boot. Dari menu ini, Anda
	    bisa memilih kernel atau sistem operasi mana yang akan di-boot. Jika Anda tidak menggunakan 
	    opsi ini, Anda masih bisa mengakses menu bootloader dengan menekan kunci &lt;Shift&gt; ketika 
	    bootloader dijalankan.
            </para>
	</callout>
	<callout arearefs="liloconf-global-3">
	  <para>
	    Nilai <emphasis>timeout</emphasis> menentukan seberapa lama LILO harus menunggu sebelum kernel atau 
	    sistem operasi default akan di-boot. Waktu ditentukan dalam sepersepuluh detik, jadi pada contoh diatas, LILO 
	    akan menunggu 5 detik sebelum melanjutkan dengan boot.
	  </para>
	</callout>
	<callout arearefs="liloconf-global-4">
	  <para>
	    Anda bisa menentukan mode video mana yang harus digunakan kernel dengan opsi <emphasis>vga</emphasis>.
	    Ketika opsi ini diisi dengan <emphasis>normal</emphasis> kernel akan menggunakan mode teks 80x25.
	  </para>
	</callout>
      </calloutlist>

      <para>
	Opsi global diikuti dengan bagian yang menambahkan kernel Linux atau sistem operasi lain. Sebagian besar 
	bagian untuk kernel Linux berisi seperti berikut:
      </para>

      <screen>
image = /boot/vmlinuz <co xml:id="co-liloconf-kernel-1" />
  root = /dev/sda5 <co xml:id="co-liloconf-kernel-2" /> 
  label = Slack <co xml:id="co-liloconf-kernel-3" />
  read-only <co xml:id="co-liloconf-kernel-4" />
      </screen>

      <calloutlist>
	<callout arearefs="co-liloconf-kernel-1">
	  <para>
	    Opsi <emphasis>image</emphasis> menentukan citra kernel yang harus dimuat untuk bagian LILO ini.
	  </para>
	</callout>
	<callout arearefs="co-liloconf-kernel-2">
	  <para>
	    Parameter <emphasis>root</emphasis> dikirimkan pada kernel, dan digunakan oleh kernel sebagai sistem berkas 
	    root (<filename>/</filename>).
	  </para>
	</callout>
	<callout arearefs="co-liloconf-kernel-3">
	  <para>
	    Teks <emphasis>label</emphasis> digunakan sebagai label untuk informasi ini pada menu boot LILO.
	  </para>
	</callout>
	<callout arearefs="co-liloconf-kernel-4">
	  <para>
	    <emphasis>read-only</emphasis> menentukan bahwa sistem berkas root harus dimount sebagai 
	    read-only. Sistem berkas harus dimount pada kondisi read-only untuk melakukan pengujian sistem 
	    berkas.
	  </para>
	</callout>
      </calloutlist>
    </sect2>

    <sect2 xml:id="chap-init-lilo-installation">
      <title>Installasi LILO</title>

      <para>
	LILO tidak membaca berkas <filename>/etc/lilo.conf</filename> selama tahap kedua. Jadi Anda harus 
	menulis perubahan pada loader tahap kedua ketika Anda telah mengubah konfigurasi LILO. Hal ini juga 
	diperlukan jika Anda menginstall kernel baru dengan nama berkas yang sama, karena posisi dari kernel 
	pada disk mungkin berubah. Menginstall ulang LILO bisa dilakukan dengan mudah dengan perintah 
	<command>lilo</command>:
      </para>

      <screen>
# <command>lilo</command>
Added Slack26 *
Added Slack
      </screen>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-init-init">
    <title>init</title>

    <para>
      Setelah kernel dimuat dan dijalankan, kernel akan menjalankan perintah <command>init</command>. 
      <command>init</command> adalah induk dari semua proses, dan mengurusi script inisialisasi sistem, 
      membuat konsol login melalui <command>agetty</command>. Tingkah laku dari 
      <command>init</command> dikonfigurasi melalui 
      <filename>/etc/inittab</filename>.
    </para>

    <para>
      Berkas <filename>/etc/inittab</filename> memiliki dokumentasi yang cukup baik. Berkas ini menentukan 
      script mana yang harus dijalankan untuk setiap runlevel. Sebuah runlevel adalah kondisi pada saat sistem 
      berjalan. Sebagai contoh, runlevel 1 adalah mode pengguna tunggal, dan runlevel 3 adalah mode banyak-pengguna. 
      Kita akan melihat sebuah baris pada 
      <filename>/etc/inittab</filename> untuk melihat cara kerjanya:
    </para>

    <screen>
rc:2345:wait:/etc/rc.d/rc.M
    </screen>

    <para>
      Baris ini menunjukan bahwa <command>/etc/rc.d/rc.M</command> harus dijalankan ketika sistem 
      berpindah ke runlevel 2, 3, 4 atau 5. Satu-satunya baris yang perlu Anda perhatikan adalah 
      runlevel default:
    </para>

    <screen>
id:3:initdefault:
    </screen>

    <para>
      Pada contoh ini, runlevel default diisi dengan 
      <emphasis>3</emphasis> (mode banyak pengguna). Anda bisa mengisinya dengan runlevel yang lain 
      dengan menggantgi 3 dengan nilai runlevel default yang baru. Runlevel 4 bisa cukup menarik 
      pada mesin desktop, karena Slackware Linux akan mencoba menjalankan manajemen tampilan GDM, KDM 
      atau XDM  (dalam urutan). Manajemen tampilan ini menyediakan login grafis, dan merupakan bagian 
      dari GNOME, KDE dan X11.
    </para>

    <para>
      Bagian lain yang cukup menarik adalah baris yang menentukan perintah yang digunakan untuk mengurus
      sebuah konsol. Sebagai contoh:
    </para>

    <screen>
c1:1235:respawn:/sbin/agetty 38400 tty1 linux
    </screen>

    <para>
      Baris ini menyatakan bahwa <command>agetty</command> akan dijalankan pada <emphasis>tty1</emphasis> 
      (terminal virtual pertama) pada runlevel 1, 2, 3 dan 5.  Perintah 
      <command>agetty</command> akan membuka port tty, dan prompt untuk nama login. 
      <command>agetty</command> akan menjalankan <command>login</command> untuk menangani proses login. 
      Seperti yang Anda lihat dari informasi tersebut, Slackware Linux hanya menjalankan satu konsol pada 
      runlevel 6, bernama <emphasis>tty6</emphasis>. Orang mungkin bertanya apa yang terjadi pada 
      <emphasis>tty0</emphasis>, <emphasis>tty0</emphasis> masih ada, dan merepresentasikan konsol yang aktif.
    </para>

    <para>
      Karena <emphasis>/etc/inittab</emphasis> merupakan tempat yang cocok untuk menjalankan 
      <command>agetty</command> untuk menangani login, Anda juga bisa mengijinkan lebih banyak agetty untuk 
      mengurusi port serial. Hal ini menjadi berguna ketika Anda memiliki lebih dari satu terminal yang 
      terkoneksi ke sebuah mesin. Anda bisa menambahkan informasi seperti berikut untuk menjalankan 
      <command>agetty</command> yang mendengarkan pada COM1:
    </para>

    <screen>
s1:12345:respawn:/sbin/agetty -L ttyS0 9600 vt100
    </screen>
  </sect1>

  <sect1 xml:id="chap-init-initscripts">
    <title>Script inisialisasi</title>

    <para>
      Seperti yang dijelaskan pada <command>init</command> (<xref
      linkend="chap-init-init" />),
      <command>init</command> menjalankan beberapa script yang menangani runlevel yang berbeda-beda. 
      Script ini melakukan pekerjaan dan mengubah pengaturan  yang diperlukan untuk runlevel tertentu, tetapi 
      mereka juga menjalankan script lain. Mari kita lihat contoh dari 
      <filename>/etc/rc.d/rc.M</filename>, script yang dijalankan 
      <command>init</command> ketika sistem berpindah ke runlevel banyak-pengguna:
    </para>

    <programlisting>
# Start the sendmail daemon:
if [ -x /etc/rc.d/rc.sendmail ]; then
  . /etc/rc.d/rc.sendmail start
fi
    </programlisting>

    <para>
      Baris ini menyatakan <quote>eksekusi <command>/etc/rc.d/rc.sendmail
      start</command> jika <filename>/etc/rc.d/rc.sendmail</filename> bersifat 
      executable</quote>. Hal ini mengindikasikan kesederhanaan dari script inisialisasi 
      Slackware Linux. Berbagai fungsionalitas, seperti layanan jaringan, dapat diaktifkan atau dinonaktifkan, 
      dengan mengganti tanda executable pada script inisialisasi. Jika script bersifat executable, layanan 
      akan dijalankan, dan tidak akan dijalankan jika sebaliknya. Pengaturan flag dijelaskan pada  
      <xref linkend="chap-filesystem-permissions-permbits" />, tetapi kita akan melihat pada contoh sederhana 
      bagaimana Anda bisa mengaktifkan dan menonaktifkan sendmail.
    </para>

    <para>
      Untuk menjalankan sendmail ketika sistem melakukan inisialisasi, jalankan:
    </para>

    <screen>
# <command>chmod +x /etc/rc.d/rc.sendmail</command>
    </screen>

    <para>
      Untuk menonaktifkan sendmail ketika sistem melakukan inisialisasi, jalankan:
    </para>

    <screen>
# <command>chmod -x /etc/rc.d/rc.sendmail</command>
    </screen>

    <para>
      Sebagian besar script inisialisasi layanan menerima tiga parameter untuk mengubah status dari layanan:
      <emphasis>start</emphasis>, <emphasis>restart</emphasis> dan
      <emphasis>stop</emphasis>. Parameter-parameter ini cukup deskriptif. Sebagai contoh, jika Anda hendak 
      menjalankan ulang sendmail, Anda bisa menjalankan:
    </para>

    <screen>
# <command>/etc/rc.d/rc.sendmail restart</command>
    </screen>

    <para>
      Jika script tidak bersifat executable, Anda harus memberitahukan kepada shell bahwa Anda hendak menjalankan 
      berkas dengan <command>sh</command>. Sebagai contoh:
    </para>

    <screen>
# <command>sh /etc/rc.d/rc.sendmail start</command>
    </screen>
  </sect1>

  <sect1 xml:id="chap-init-udev">
    <title>Hotplugging dan manajemen node perangkat</title>

    <para>
      Slackware Linux sudah mendukung hotplugging sejak Slackware Linux 9.1. Ketika diaktifkan, 
      kernel mengirimkan notifikasi tentang kejadian tentang perangkat pada perintah userspace. 
      Sejak Slackware Linux 11.0, sekumpulan utilitas <command>udev</command> menangani notifikasi ini. 
      <command>udev</command> juga menangani direktori dinamis <filename>/dev</filename>.
    </para>

    <para>
      Mode operasi dari <command>udev</command> untuk menangani proses hotplugging dari perangkat 
      cukup sederhana. Ketika sebuah perangkat ditambahkan pada sistem, kernel memberitahukan 
      userspace hotplug event listeners. <command>udev</command> akan menerima notifikasi bahwa sebuah 
      perangkat telah ditambahkan, dan mencari apakah terdapat modul yang dipetakan untuk perangkat tersebut. 
      Jika ada, maka modul driver yang sesuai akan dimuat secara otomatis. <command>udev</command> akan 
      menghapus modul ketika menerima notifikasi bahwa perangkat telah dilepas, dan tidak ada perangkat 
      yang menggunakan modul tersebut.
    </para>

    <para>
      Sub sistem udev diinisialisasi pada 
      <filename>/etc/rc.d/rc.S</filename> dengan menjalankan 
      <command>/etc/rc.d/rc.udev start</command>. Seperti fungsionalitas yang lain, Anda bisa mengaktifkan 
      atau menonaktifkan udev dengan mengubah flag executable dari script <filename>/etc/rc.d/rc.udev</filename>
      (lihat <xref linkend="chap-init-initscripts" />).
    </para>

    <para>
      Jika udev secara otomatis memuat modul yang tidak Anda perlukan, Anda bisa menambahkan 
      <emphasis>blacklist</emphasis> pada konfigurasi 
      <command>modprobe</command> Anda pada 
      <filename>/etc/modprobe.d/blacklist</filename>. Sebagai contoh, jika Anda mencegah sistem memuat modul 
      <emphasis>8139cp</emphasis>, Anda bisa menambahkan baris ini (sebetulnya, modul ini sudah di-blacklist pada Slackware
      Linux):
    </para>

    <screen>
blacklist 8139cp
    </screen>
  </sect1>

  <sect1 xml:id="chap-init-firmware">
    <title>Firmware perangkat keras</title>

    <sect2 xml:id="chap-init-firmware-introduction">
      <title>Perkenalan</title>

      <para>
	Beberapa perangkat keras membutuhkan sistem untuk mengupload firmware. Firmware adalah bagian 
	dari perangkat lunak yang digunakan untuk mengontrol perangkat keras. Biasanya, firmware 
	disimpan secara permanen pada ROM (read-only memory) atau media non-volatile seperti flash memory.
	Namun, banyak perangkat keras baru menggunakan memori volatile untuk menyimpan firmware, 
	yang berarti firmware harus dimuat ulang pada memori perangkat keras ketika sistem 
	dijalankan ulang.
      </para>

      <para>
	Driver untuk perangkat keras yang membutuhkan firmware memiiliki tabel dari berkas 
	firmware yang dibutuhkan. Untuk setiap berkas firmware yang dibutuhkan driver, ia akan 
	membuat sebuah event penambahan firmware. Jika udev menangani hotplugging events, maka ia akan 
	mencoba menangani hal tersebut. Aturan udev yang berisi informasi tersebut berada pada 
	<filename>/etc/udev/rules.d/50-udev.rules</filename>:
      </para>

      <programlisting>
# firmware loader
SUBSYSTEM=="firmware", ACTION=="add", RUN+="/lib/udev/firmware.sh"
      </programlisting>

      <para>
	Hal ini berarti pada saat terjadi sebuah penambahan firmware, script 
	<filename>/lib/udev/firmware.sh</filename> harus dijalankan. Script ini mencari direktori 
	<filename>/lib/firmware</filename> dan
	<filename>/usr/local/lib/firmware</filename> untuk firmware yang diminta. Jika berkas firmware 
	ditemukan, maka akan dimuat dengan menyalin isi berkas pada node sysfs spesial.
      </para>
    </sect2>

    <sect2 xml:id="chap-init-firmware-adding">
      <title>Menambahkan firmware</title>

      <para>
	Seperti yang dijelaskan pada bagian sebelumnya, beberapa perangkat keras membutuhkan firmware 
	untuk diupload ke perangkat keras oleh sistem operasi. Jika pada kasus ini tidak ada firmware 
	yang diinstall, maka kernel akan mengeluarkan pesan kesalahan ketika driver untuk perangkat 
	keras tersebut dimuat. Anda bisa melihat hasil keluaran kernel dengan perintah 
	<command>dmesg</command> atau pada berkas log 
	<filename>/var/log/messages</filename>. Pesan kesalahan tersebut secara eksplisit menyebutkan bahwa 
	firmware tidak bisa dimuat, seperti berikut:
      </para>

      <screen>
ipw2100: eth1: Firmware 'ipw2100-1.3.fw' not available or load failed.
ipw2100: eth1: ipw2100_get_firmware failed: -2 
      </screen>

      <para>
	Pada kasus ini, Anda harus mencari firmware untuk perangkat keras Anda. Hal ini bisa ditemukan dengan 
	mencari web untuk chipset atau driver untuk perangkat keras (pada kasus ini
	<emphasis>ipw2100</emphasis>) dan istilah 
	<quote>firmware</quote>. Arsip firmware biasanya berisi berkas dengan instruksi installasi. Biasanya 
	Anda cukup menyalin berkas firmware pada <filename>/lib/firmware</filename>.
      </para>

      <para>
	Setelah menginstall firmware, Anda bisa memuat ulang driver dengan 
	<command>rmmod</command> dan <command>modprobe</command>, atau 
	dengan menjalankan ulang sistem.
      </para>
    </sect2>
  </sect1>
</chapter>
