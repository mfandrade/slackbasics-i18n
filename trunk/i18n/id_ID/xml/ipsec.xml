<!-- $Id: ipsec.xml 315 2007-09-21 15:26:04Z danieldk $ -->

<chapter id="ipsec"> <?dbhtml filename="ipsec.html"?>
  <title>IPsec</title>

  <sect1>
    <title>Teori</title>

    <para>
      <acronym>IPsec</acronym> adalah standar untuk mengamankan komunikasi IP melalui authentikasi, dan enkripsi. 
      Selain itu, juga bisa mengkompresi paket, mengurangi beban. Protokol berikut merupakan bagian dari standar IPsec:
    </para>

    <itemizedlist>
      <listitem>
        <para>
          <acronym>AH</acronym> (Authentication Header) menyediakan jaminan authentikasi untuk paket yang dikirimkan. 
	  Hal ini dilakukan dengan menghitung checksum dari paket menggunakan algoritma kriptografi. Jika checksum 
	  benar, maka penerima bisa yakin bahwa paket tidak dimodifikasi, dan paket benar-benar berasal dari pengirim
	  (diasumsikan bahwa kunci hanya diketahui oleh pengirim dan penerima). 
        </para>
      </listitem>
      <listitem>
        <para>
          <acronym>ESP</acronym> (Encapsulating Security Payload) digunakan untuk mengenkripsi paket. Hal ini membuat 
	  data pada paket aman, dan hanya dapat dibaca oleh host yang memiliki kunci dekripsi yang benar.
        </para>
      </listitem>
      <listitem>
        <para>
          <acronym>IPcomp</acronym> (IP payload compression) menyediakan kompresi sebelum paket dienkripsi. Hal ini 
	  berguna, karena data yang dienkripsi biasanya terkompresi lebih jelek daripada data yang tidak terenkripsi.
        </para>
      </listitem>
      <listitem>
        <para>
          <acronym>IKE</acronym> (Internet Key Exchange) menyediakan media untuk melakukan negosiasi kunci secara aman. 
	  Harap diperhatikan bahwa IKE bersifat opsinal, kunci bisa dikonfigurasikan secara manual.
        </para>
      </listitem>
    </itemizedlist>

    <para>
      Terdapat dua mode operasi: <emphasis>mode transport</emphasis> digunakan untuk mengenkripsi 
      koneksi normal antar dua host, <emphasis>mode tunnel</emphasis> mengenkapsulasi paket asli pada header baru. 
      Pada bab ini, kita akan melihat pada mode transport, karena tujuan utama dari bab ini adalah menunjukan bagaimana 
      membuat pengaturan koneksi yang aman antara dua host.
    </para>

    <para>
      Terdapat dua metode utama untuk otentikasi. Anda bisa menggunakan kunci manual, atau daemon Internet Key Exchange (IKE)
      seperti racoon, yang secara otomatis bertukar kunci diantara dua host secara aman. Pada kedua kasus, Anda harus menentukan 
      aturan pada Security Policy Database (SPD). Basis data ini digunakan oleh kernel untuk menentukan jenis aturan keamanan 
      apa yang diperlukan untuk berkomunikasi dengan host lain. Jika Anda menggunakan kunci manual, Anda harus mengatur 
      Security Association Database (SAD), yang menentukan algoritma enkripsi dan kunci yang harus digunakan untuk komunikasi 
      yang aman dengan host lain. Jika Anda menggunakan daemon IKE, asosiasi keamanan akan dibuat secara otomatis.
    </para>
  </sect1>

  <sect1>
    <title>Konfigurasi Linux</title>

    <para>
      Dukungan native IPsec hanya tersedia pada kernel Linux 2.6.x. Kernel versi sebelumnya tidak memiliki dukungan native 
      terhadap IPsec. Jadi, pastikan Anda sudah memiliki kernel 2.6.x. Kernel 2.6 tersedia pada 
      Slackware Linux 10.0, 10.1, dan 10.2 dari direktori <filename>testing</filename> pada CD2 dari CD Slackware
      Linux, atau sembarang mirror resmi Slackware Linux.
      Kernel 2.6 adalah kernel default semenjak Slackware Linux 12.0. Default kernel 2.6 Slackware Linux sudah mendukung 
      AH, ESP dan IPcomp pada IPv4 dan IPv6. Jika Anda mengkompilasi kernel sendiri, aktifkan paling tidak opsi-opsi berikut pada 
      konfigurasi kernel Anda:
    </para>

    <screen>
CONFIG_INET_AH=y
CONFIG_INET_ESP=y
CONFIG_INET_IPCOMP=y
    </screen>

    <para>
      Atau, Anda bisa mengkompilasi dukungan untuk protokol IPsec sebagai modul:
    </para>

    <screen>
CONFIG_INET_AH=m
CONFIG_INET_ESP=m
CONFIG_INET_IPCOMP=m
    </screen>


    <para>
      Pada bab ini, kita hanya akan menggunakan transformasi AH dan ESP, tetapi bukan ide yang jelek untuk 
      mengaktifkan transformasi IPComp untuk konfigurasi lebih lanjut dari IPsec. Selain dukungan untuk protokol IPsec, 
      Anda harus mengkompilasi dukungan kernel untuk algoritma enkripsi dan hash yang akan digunakan oleh AH atau ESP. 
      Linux atau dukungan modul untuk algoritma ini bisa diaktifkan pada opsi 
      <emphasis>CONFIG_CRYPTO</emphasis>. Tidaklah merepotkan untuk mengkompilasi semua algoritma cipher dan hash sebagai 
      sebuah modul.
    </para>

    <para>
      Ketika Anda memilih untuk mengkompilasi dukungan IPsec sebagai modul, pastikan bahwa modul yang diperlukan sudah 
      dimuat. Sebagai contoh, jika Anda hendak menggunakan ESP untuk koneksi IPv4, muat modul <emphasis>esp4</emphasis>.
    </para>

    <para>
      Kompilasi kernel seperti biasa dan boot kernel tersebut.
    </para>
  </sect1>

  <sect1>
    <title>Installing IPsec-Tools</title>

    <para>
      Langkah berikutnya adalah menginstall 
      <ulink url="http://ipsec-tools.sourceforge.net">IPsec-Tools</ulink>.
      Aplikasi ini merupakan port dari utilitas IPsec <ulink url="http://www.kame.net">KAME</ulink>.
      Download kode terbaru dan uraikan, konfigurasi, dan install:
    </para>

    <screen>
# <command>tar jxf ipsec-tools-x.y.z.tar.bz2</command>
# <command>cd ipsec-tools-x.y.z</command>
# <command>CFLAGS="-O2 -march=i486 -mcpu=i686" \
  ./configure --prefix=/usr \
              --sysconfdir=/etc \
              --localstatedir=/var \
              --enable-hybrid \
              --enable-natt \
              --enable-dpd \
              --enable-frag \
              i486-slackware-linux</command>
# <command>make</command>
# <command>make install</command>
    </screen>

      <para>
        Ganti <emphasis>x.y.z</emphasis> dengan kode versi yang didownload. Flag yang kita tentukan selama 
	konfigurasi kode sumber adalah:
      </para>

      <itemizedlist>
        <listitem>
	  <para>
	    <emphasis>--enable-dpd</emphasis>: mengaktifkan 
	    dead peer detection (DPD). DPD adalah metode untuk mendeteksi apakah sembarang host dimana asosiasi keamanan 
	    sudah ditentukan tidak dapat dapat dicapai. Jika benar, maka asosiasi keamanan untuk host tersebut bisa dihapus.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    <emphasis>--enable-natt</emphasis>: mengaktifkan NAT traversal
	    (NAT-T). Karena NAT mengganti header IP, hal ini menimbulkan masalah untuk penjaminan authentikasi dari paket. 
	    NAT-T adalah metode yang membantu mengatasi masalah ini. Mengkonfigurasi NAT-T diluar batasan dari artikel ini.
	  </para>
	</listitem>
      </itemizedlist>
  </sect1>

  <sect1>
    <title>Mengatur IPsec dengan kunci manual</title>

    <sect2>
      <title>Perkenalan</title>

      <para>
        Kita akan menggunakan sebuah contoh sebagai panduan untuk mengatur koneksi tidak terenkripsi diantara dua host. 
	Host akan memiliki alamat IP <emphasis>192.168.1.1</emphasis> dan <emphasis>192.168.1.169</emphasis>.
        <quote>Mode transport </quote> akan digunakan dengan transformasi AH dan ESP beserta kunci manual.
      </para>
      
    </sect2>

    <sect2>
      <title>Menulis berkas konfigurasi</title>

      <para>
        Langkah pertama adalah menulis berkas konfigurasi yang akan kita beri nama
        <filename>/etc/setkey.conf</filename>. Pada host pertama 
        (192.168.1.1) berkas konfigurasi <filename>/etc/setkey.conf</filename> berikut akan digunakan:
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

add 192.168.1.1 192.168.1.169 ah 0x200 -A hmac-md5 
0xa731649644c5dee92cbd9c2e7e188ee6;
add 192.168.1.169 192.168.1.1 ah 0x300 -A hmac-md5 
0x27f6d123d7077b361662fc6e451f65d8;

add 192.168.1.1 192.168.1.169 esp 0x201 -E 3des-cbc 
0x656c8523255ccc23a66c1917aa0cf30991fce83532a4b224;
add 192.168.1.169 192.168.1.1 esp 0x301 -E 3des-cbc
0xc966199f24d095f3990a320d749056401e82b26570320292

spdadd 192.168.1.1 192.168.1.169 any -P out ipsec
           esp/transport//require
           ah/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P in ipsec
           esp/transport//require
           ah/transport//require;
      </screen>

      <para>
        Baris pertama (baris yang diakhiri <quote>;</quote>) menambahkan kunci untuk pengujian checksum header untuk 
	paket yang datang dari 192.168.1.1 dan menuju 192.168.1.169. Baris kedua menambahkan hal yang sama untuk 
	paket datang dari 192.168.1.169 menuju 192.168.1.1. Baris keempat dan kelima mendefinisikan kunci untuk enkripsi 
	data seperti yang dilakukan oelh dua baris pertama. Akhirnya, baris <quote>spadd</quote> mendefinisikan dua aturan, 
	yaitu paket yang keluar dari 192.168.1.1 menuju 192.168.1.169 harus (require) di-enkodekan (esp) dan <quote>signed</quote> 
	dengan header otorisasi. Aturan kedua adalah untuk paket yang masuk dan melakukan hal yang sama dengan paket keluar.
      </para>

      <para>
        Harap Anda perhatikan bahwa Anda tidak seharusnya menggunakan kunci ini, tetapi kunci unik Anda sendiri. Anda bisa 
	menghasilkan kunci menggunakan perangkat 
        <filename>/dev/random</filename> :
      </para>

      <screen>
# <command>dd if=/dev/random count=16 bs=1 | xxd -ps</command>
      </screen>

      <para>
        Perintah ini menggunakan dd untuk menghasilkan 16 byte dari 
        <filename>/dev/random</filename>. Jangan lupa untuk menambahkan <quote>0x</quote>
        pada awal baris pada berkas konfigurasi. Anda bisa menggunakan 16 byte  (128 bit) untuk algoritma hmac-md5 
	yang digunakan untuk AH. Algoritma 3des-cbc yang digunakan untuk ESP pada contoh harus menggunakan kunci 24 byte (192 bit). 
	Kunci-kunci ini bisa dihasilkan dengan :
      </para>

      <screen>
# <command>dd if=/dev/random count=24 bs=1 | xxd -ps</command>
      </screen>  

      <para>
        Pastikan bahwa berkas <filename>/etc/setkey.conf</filename> hanya bisa dibaca oleh pengguna root. Jika pengguna biasa dapat 
	membaca IPsec tidak menyediakan keamanan sama sekali. Anda bisa melakukannya dengan cara:
      </para>

      <screen>
# <command>chmod 600 /etc/setkey.conf</command>
      </screen>

      <para>
        Berkas <filename>/etc/setkey.conf</filename> yang sama bisa dibuat pada host 192.168.1.169, dengan opsi <parameter class="command">-P 
        in</parameter> dan <parameter class="command">-P out</parameter> dibalik. Jadi, berkas <filename>/etc/setkey.conf</filename> 
	akan tampak seperti berikut :
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

add 192.168.1.1 192.168.1.169 ah 0x200 -A hmac-md5
0xa731649644c5dee92cbd9c2e7e188ee6;
add 192.168.1.169 192.168.1.1 ah 0x300 -A hmac-md5
0x27f6d123d7077b361662fc6e451f65d8;

add 192.168.1.1 192.168.1.169 esp 0x201 -E 3des-cbc
0x656c8523255ccc23a66c1917aa0cf30991fce83532a4b224;
add 192.168.1.169 192.168.1.1 esp 0x301 -E 3des-cbc
0xc966199f24d095f3990a320d749056401e82b26570320292

spdadd 192.168.1.1 192.168.1.169 any -P in ipsec
           esp/transport//require
           ah/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P out ipsec
           esp/transport//require
           ah/transport//require;
      </screen>
    </sect2>

    <sect2>
      <title>Mengaktifkan konfigurasi IPsec</title>

      <para>
        Konfigurasi IPsec bisa diaktifkan dengan perintah <command>setkey</command> :
      </para>

      <screen>
# <command>setkey -f /etc/setkey.conf</command>
      </screen>

      <para>
        Jika Anda hendak mengaktifkan IPsec secara permanen, Anda bisa menambahkan baris berikut pada <filename>/etc/rc.d/rc.local</filename> pada kedua host :
      </para>

      <screen>
/usr/sbin/setkey -f /etc/setkey.conf
      </screen>

      <para>
        Setelah mengkonfigurasi IPsec, Anda bisa menguji koneksi dengan menjalankan 
        <command>tcpdump</command> dan melakukan ping ke host yang lain. Anda bisa melihat jika AH dan ESP digunakan pada hasil keluaran 
	perintah <command>tcpdump</command> :
      </para>

      <screen>
# <command>tcpdump -i eth0</command>
tcpdump: listening on eth0
11:29:58.869988 terrapin.taickim.net > 192.168.1.169: AH(spi=0x00000200,seq=0x40f): ESP(spi=0x00000201,seq=0x40f) (DF)
11:29:58.870786 192.168.1.169 > terrapin.taickim.net: AH(spi=0x00000300,seq=0x33d7): ESP(spi=0x00000301,seq=0x33d7)
      </screen>
      
    </sect2>

  </sect1>
  
  <sect1>
    <title>Mengatur IPsec dengan pertukaran kunci otomatis</title>

    <sect2>
      <title>Perkenalan</title>
    
      <para>
        Judul dari pertukaran kunci otomatis sudah dibahas sebentara pada perkenalan dari bab ini. Secara sederhana, IPsec dengan 
	IKE bekerja seperti berikut.
      </para>
      
      <orderedlist>
        <listitem>
	  <para>
	    Beberapa proses pada host hendak terhubung ke host lain. Kernel menguji apakah terdapat aturan keamanan yang sudah 
	    ditentukan untuk host lain. Jika sudah terdapat asosiasi keamanan yang berhubungan dengan aturan, koneksi bisa dibuat, 
	    dan akan diautentikasi, dienkripsi, dan atau dikompresi sesuai dengan definisi. Jika tidak ada asosiasi keamanan, 
	    kernel akan meminta daemon IKE untuk membuat asoasiasi keamanan yang diperlukan.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Pada tahap pertama dari pertukaran kunci, daemon IKE mencoba memverifikasi authentikasi dari host lain. Hal ini 
	    biasanya dilakukan dengan kunci yang sudah dipersiapkan (preshared) atau sertifikat. Jika authentikasi berhasil, maka kanal 
	    rahasia akan dibentuk diantara dua host, yang biasanya disebut asosiasi keamananan IKE, untuk melanjutkan dengan 
	    pertukaran kunci.
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Selama fase kedua dari pertukaran kunci, asosiasi keamanan untuk komunikasi dengan host lain akan dibentuk. Hal ini 
	    melibatkan pemilihan algoritma enkripsi yang akan digunakan, dan menghasilkan kunci yang akan digunakan untuk 
	    mengenkripsi komunikasi. 
	  </para>
	</listitem>
	<listitem>
	  <para>
	    Pada tahap ini, langkah pertama akan diulangi kembali, tetapi karena sudah ada asosiasi keamanan, komunikasi bisa 
	    dilanjutkan.
	  </para>
	</listitem>
      </orderedlist>
      
      <para>
        Daemon IKE <command>racoon</command> disertakan dengan aplikasi KAME IPsec, bagian berikut menjelaskan bagaimana 
	mengatur racoon.
      </para>
    </sect2>
    
    <sect2>
      <title>Menggunakan dengan kunci yang preshared</title>
      
      <para>
        Seperti biasa, langkah pertama untuk mengatur IPsec adalah untuk mendefinisikan aturan keamanan. Kebalikan dari 
	kunci manual, Anda tidak perlu membuat asosiasi keamanan, karena racoon akan membuatkan untuk Anda. Kita akan menggunakan
	IP host yang sama dengan contoh diatas. Aturan keamanan tampak seperti berikut:
      </para>

      <screen>
#!/usr/sbin/setkey -f

# Flush the SAD and SPD
flush;
spdflush;

spdadd 192.168.1.1 192.168.1.169 any -P out ipsec
	esp/transport//require;

spdadd 192.168.1.169 192.168.1.1 any -P in ipsec
	esp/transport//require;
      </screen>

      <para>
        Orang yang cermat akan melihat bahwa aturan AH tidak ada pada contoh ini. Pada sebagian besar kasus, hal ini 
	bukanlah masalah, ESP bisa menyediakan authentikasi. Tetapi Anda harus waspada bahwa authentikasi menjadi lebih 
	lebar; ia tidak menjaga informasi diluar header ESP. Tetapi lebih efisien daripada mengenkapsulasi paket ESP pada AH.
      </para>

      <para>
        Dengan aturan keamanan sudah terbentuk, Anda bisa mengkonfigurasi <command>racoon</command>.
        Karena informasi yang spesifik untuk koneksi, seperti metode authentikasi ditentukan pada konfigurasi fase satu, kita 
	bisa menggunakan konfigurasi fase dua yang lebih umum. Juga dimungkinkan untuk membuat pengaturan fase dua yang spesifik 
	untuk beberapa host tertentu. Tetapi secara umum, konfigurasi umum akan cukup untuk pengaturan sederhana. Kita juga akan 
	menambahkan path untuk berkas kunci preshared, dan direktori sertifikat. Ini adalah contoh dari 
        <filename>/etc/racoon.conf</filename> dengan path dan aturan tahap kedua yang sudah dibuat:
      </para>

      <screen>
path pre_shared_key "/etc/racoon/psk.txt";
path certificate "/etc/racoon/certs";

sainfo anonymous {
{
	pfs_group 2;
	lifetime time 1 hour;
	encryption_algorithm 3des, blowfish 448, rijndael;
	authentication_algorithm hmac_sha1, hmac_md5;
	compression_algorithm deflate;
}
      </screen>

      <para>
        Penanda <parameter>sainfo</parameter> digunakan untuk membuat blok yang menentukan pengaturan untuk asosiasi keamanan. 
	Parameter <parameter>anonymous</parameter> digunakan untuk menentukan bahwa pengaturan ini harus digunakan untuk semua 
	host yang tidak memiliki konfigurasi spesifik. <parameter>pfs_group</parameter> menentukan grup mana dari 
	eksponensial Diffie-Hellman yang harus digunakan. Grup yang berbeda menyediakan panjang angka bilangan prima yang berbeda 
	yang akan digunakan untuk proses authentikasi. Grup 2 menyediakan panjang kunci 1024 bit jika Anda hendak menggunakan panjang 
	yang lebih besar. Untuk keamanan yang lebih baik, Anda bisa menggunakan grup lain (seperti 14 untuk panjang 2048 bit). 
	<parameter>encryption_algorithm</parameter> menentukan algoritma enkripsi apa yang hendak digunakan oleh host untuk enkripsi 
	ESP. <parameter>authentication_algorithm</parameter> menentukan algoritma yang digunakan untuk Authentikasi ESP atau AH. Akhirnya, 
	<parameter>compression_algorithm</parameter> digunakan untuk menentukan algoritma kompresi ketika IPcomp ditentukan pada asosiasi.
      </para>

      <para>
        Langkah berikutnya adalah menambahkan konfigurasi fase satu untuk pertukaran kunci dengan host lain pada berkas konfigurasi <filename>racoon.conf</filename>. 
	Sebagai contoh:
      </para>

      <screen>
remote 192.168.1.169 
{
	exchange_mode aggressive, main;
	my_identifier address;
	proposal {
		encryption_algorithm 3des;
		hash_algorithm sha1;
		authentication_method pre_shared_key;
		dh_group 2;
	}
}
      </screen>

      <para>
        Blok <parameter>remote</parameter> menentukan konfigurasi fase satu. Opsi <parameter>exchange_mode</parameter> digunakan untuk 
	mengkonfigurasi mode pertukaran apa yang harus digunakan untuk fase. Anda bisa menyebutkan lebih dari satu mode, tetapi 
	mode pertama akan digunakan jika host ini adalah pelaku awal dari pertukaran kunci. Opsi <parameter>my_identifier</parameter> 
	menentukan penanda apa yang harus dikirimkan pada host remote. Jika opsi ini diabaikan, <parameter>address</parameter> akan digunakan,
        yang mengirimkan alamat IP sebagai penanda. Blok <parameter>proposal</parameter> menentukan parameter yang akan diusulkan 
	ke host lain selama authentikasi fase satu. Opsi <parameter>encryption_algorithm</parameter>, dan 
        <parameter>dh_group</parameter> sudah dijelaskan diatas. Opsi <parameter>hash_algorithm</parameter> bersifat wajib, dan 
	mengkonfigurasi algoritma hash yang harus dipakai. Hal ini bisa berupa <parameter>md5</parameter>, atau <parameter>sha1</parameter>.
        Opsi <parameter>authentication_method</parameter> sangat penting untuk konfigurasi ini, karena parameter ini digunakan 
	untuk menentukan kunci preshared apa yang harus digunakan, dengan <parameter>pre_shared_key</parameter>.
      </para>

      <para>
        Dengan racoon yang sudah diatur, terdapat satu hal lagi yang perlu dilakukan, kunci preshared harus ditambahkan pada 
	<filename>/etc/racoon/psk.txt</filename>. Sintaksnya sangat sederhana, setiap baris berisi alamat IP host dan kunci. 
	Parameter ini dipisahkan dengan tab. Sebagai contoh:
      </para>

      <screen>
192.168.1.169	somekey
      </screen>
    </sect2>

    <sect2>
      <title>Mengaktifkan konfigurasi IPsec</title>

      <para>
        Pada tahap ini, konfigurasi dari aturan keamanan dan racoon sudah selesai, dan Anda bisa mulai menguji konfigurasi. 
	Merupakan ide yang bagus untuk menjalankan <command>racoon</command> dengan parameter <parameter class="command">-F</parameter>. 
	Hal ini akan menjalankan <command>racoon</command> didepan layar (foreground), membuatnya lebih mudah untuk menangkap pesan kesalahan. 
	Untuk menjalankannya:
      </para>

      <screen>
# <command>setkey -f /etc/setkey.conf</command>
# <command>racoon -F</command>
      </screen>

      <para>
        Sekarang karena Anda telah menambahkan aturan keamanan pada basis data, dan menjalankan <command>racoon</command>, Anda bisa 
	menguji konfigurasi IPsec Anda. Sebagai contoh, Anda bisa melakukan ping ke host lain sebagai permulaan. Pertama kali Anda melakukan 
	ping, Anda akan menemui kegagalan:
      </para>

      <screen>
$ <command>ping 192.168.1.169</command>
connect: Resource temporarily unavailable
      </screen>

      <para>
        Alasannya adalah karena asosiasi keamanan harus dibentuk. Tetapi paket ICMP akan memicu pertukaran kunci. Ping 
	akan memicu pertukaran kunci. Anda bisa melihat apakah pertukaran berhasil atau tidak dengan melihat pada pesan log 
	<command>racoon</command> pada 
        <filename>/var/log/messages</filename>, atau hasil keluaran dari terminal jika Anda menjalankan 
	<command>racoon</command> pada foreground. Pertukaran kunci yang sukses akan tampak seperti berikut:
      </para>

      <screen>
 Apr  4 17:14:58 terrapin racoon: INFO: IPsec-SA request for 192.168.1.169 queued due to no phase1 found.
 Apr  4 17:14:58 terrapin racoon: INFO: initiate new phase 1 negotiation: 192.168.1.1[500]&lt;=&gt;192.168.1.169[500] 
 Apr  4 17:14:58 terrapin racoon: INFO: begin Aggressive mode. 
 Apr  4 17:14:58 terrapin racoon: INFO: received Vendor ID: DPD 
 Apr  4 17:14:58 terrapin racoon: NOTIFY: couldn't find the proper pskey, try to get one by the peer's address.
 Apr  4 17:14:58 terrapin racoon: INFO: ISAKMP-SA established 192.168.1.1[500]-192.168.1.169[500] spi:58c4669f762abf10:60593eb9e3dd7406
 Apr  4 17:14:59 terrapin racoon: INFO: initiate new phase 2 negotiation: 192.168.1.1[0]&lt;=&gt;192.168.1.169[0] 
 Apr  4 17:14:59 terrapin racoon: INFO: IPsec-SA established: ESP/Transport 192.168.1.169-&gt;host1ip; spi=232781799(0xddff7e7) 
 Apr  4 17:14:59 terrapin racoon: INFO: IPsec-SA established: ESP/Transport 192.168.1.1-&gt;192.168.1.169 spi=93933800(0x59950e8) 
      </screen>

      <para>
        Setelah pertukaran kunci, Anda bisa memastikan bahwa IPsec sudah dikonfigurasi dengan benar dengan menganalisa 
	paket yang masuk dan keluar dengan <command>tcpdump</command>. <command>tcpdump</command> tersedia pada set disk 
	<emphasis>n</emphasis>. Misalkan koneksi keluar ke host lain melalui antarmuka <emphasis>eth0</emphasis>, Anda bisa 
	menganalisa paket yang melalui antarmuka <emphasis>eth0</emphasis> dengan 
        <command>tcpdump -i eth0</command>. Jika paket keluar dienkripsi dengan ESP, Anda bisa melihatnya pada 
	hasil keluaran <command>tcpdump</command>. Sebagai contoh:
      </para>

      <screen>
# <command>tcpdump -i eth0</command>
tcpdump: verbose output suppressed, use -v or -vv for full protocol decode
listening on eth0, link-type EN10MB (Ethernet), capture size 96 bytes
17:27:50.241067 IP terrapin.taickim.net &gt; 192.168.1.169: ESP(spi=0x059950e8,seq=0x9)
17:27:50.241221 IP 192.168.1.169 &gt; terrapin.taickim.net: ESP(spi=0x0ddff7e7,seq=0x9)
      </screen>

    </sect2>
    
  </sect1>

</chapter>
