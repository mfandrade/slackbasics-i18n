<!-- $Id: concepts.xml 333 2007-10-21 17:20:54Z danieldk $ -->

<chapter id="concepts"> <?dbhtml filename="concepts.html"?>
  <title>Konsep umum</title>

  <para>
    Bab ini memberikan perkenalan pada beberapa konsep umum UNIX dan 
    GNU/Linux. Sangatlah penting untuk membaca bab ini secara mendalam 
    jika Anda tidak memiliki pengalaman pada UNIX atau GNU/Linux. Banyak 
    konsep yang dibahas pada bab ini digunakan pada buku ini dan juga pada GNU/Linux.
  </para>

  <sect1 id="concepts-multitasking">
    <title>Multitasking</title>

    <sect2 id="concepts-multitasking-intro">
      <title>Perkenalan</title>

      <para>
        Salah satu kekuatan tradisional UNIX adalah multitasking. Multitasking berarti 
	banyak program dapat dijalankan pada saat yang sama. Anda mungkin heran 
	kenapa hal ini penting, karena banyak orang hanya menggunakan satu aplikasi 
	pada waktu yang sama. Multitasking adalah kebutuhan untuk sistem berbasis UNIX. 
	Meskipun Anda belum menjalankan sembarang aplikasi, terdapat program yang 
	berjalan di belakang. Sebagai contoh, beberapa program menyediakan layanan 
	jaringan, sedangkan program yang lain menampilkan prompt login dan menunggu 
	seorang pengguna login pada sebuah terminal (virtual). Program yang berjalan 
	di belakang disebut <emphasis>proses daemon</emphasis><footnote>
          <para>
            Kata <emphasis>daemon</emphasis> tidak boleh disamakan dengan kata 
	    <emphasis>demon</emphasis>, kata <emphasis>daemon</emphasis> mengacu pada 
	    supernatural pada mitologi Yunani. 
          </para>
        </footnote>.
      </para>
    </sect2>

    <sect2 id="concepts-multitasking-procsthreads">
      <title>Proses dan thread</title>

      <para>
        Setelah sebuah program dimuat dari media penyimpanan, sebuah instance dari program 
	dijalankan. Instance ini disebut sebuah <emphasis>proses</emphasis>. Sebuah proses 
	memiliki memorinya sendiri, disebut <emphasis>ruang alamat proses (process address space)</emphasis>.
        Ruang alaman proses memiliki dua area penting: area <emphasis>teks</emphasis> dan 
	area <emphasis>data</emphasis>. Area <emphasis>teks</emphasis>  adalah kode 
	program yang sebenarnya; digunakan untuk memberitahukan sistem apa yang harus 
	dilakukan. Area <emphasis>data</emphasis> digunakan untuk menyimpan data konstan 
	dan juga runtime. Sistem operasi memberikan waktu bagi setiap proses untuk dieksekusi. 
	Pada sistem dengan prosesor tunggal, proses tidak sepenuhnya berjalan secara 
	bersamaan. Pada kenyataannya, sebuah penjadwal pada kernel membagi waktu CPU pada 
	semua proses, memberikan sebuah ilusi bahwa proses-proses dijalankan secara bersamaan. 
	Proses ini disebut dengan <emphasis>time-sharing</emphasis>. Pada sistem dengan 
	lebih dari satu CPU atau inti CPU, lebih dari satu proses dapat berjalan bersamaan, 
	tetapi konsep time-sharing masih dipakai untuk membagi waktu CPU yang ada pada setiap proses.
      </para>

      <para>
        Proses-proses baru dibuat dengan menduplikasi proses yang sedang berjalan dengan system call
	<command>fork</command> system call. <xref
        linkend="fork" /> menampilkan skema dari pemanggilan fork(). Proses induk memanggil fork(). 
	Kernel akan merespon terhadap panggilan ini dengan menduplikasi proses, menamai proses lain 
	sebagai <emphasis>induk (parent)</emphasis>, dan proses lain sebagai <emphasis>anak (child)</emphasis>.
      </para>

      <figure id="fork">
        <title>Melakukan fork dari sebuah proses</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/fork.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>
       Fork bisa digunakan oleh sebuah program untuk membuat dua proses yang berjalan secara bersamaan 
       pada mesin dengan banyak prosesor. Namun, hal ini seringkali tidak ideal, karena kedua proses 
       akan memiliki alamat ruang prosesnya masing-masing. Duplikasi pertama dari memori proses cukup 
       memakan waktu, dan sangat susah untuk melakukan share data diantara dua proses. Masalah ini 
       diselesaikan oleh sebuah konsep yang disebut <emphasis>multithreading</emphasis>. Multithreading 
       berarti banyak instance dari area teks dapat dijalankan pada waktu yang bersamaan, melakukan 
       pertukaran area data. Instance ini disebut thread dapat dieksekusi secara parallel pada banyak CPU.
      </para>
    </sect2>
  </sect1>

  <sect1 id="concepts-fshierarchy">
    <title>Hirarki Sistem Berkas</title>

    <sect2 id="concepts-fshierarchy-structure">
      <title>Struktur</title>

      <para>
        Sistem operasi menyimpan data pada sistem berkas. Sistem berkas adalah sebuah struktur menyerupai 
	pohon dari direktori yang menyimpan berkas, seperti sistem operasi, program pengguna, dan data 
	pengguna. Sebagian besar sistem berkas juga dapat menyimpan berbagai macam meta data tentang 
	berkas dan direktori, misalnya waktu akses dan modifikasi. Pada GNU/Linux hanya terdapat satu 
	hirarki sistem berkas, yang berarti GNU/Linux tidak memiliki huruf pada drive (misalnya A:, C:, 
	D:) untuk sistem berkas yang berbeda, seperti DOS dan Windows. Sistem berkas menyerupai sebuah 
	pohon dengan direktori root (yang tidak memiliki direktori induk)), cabang, dan daun (direktori 
	tanpa sub direktori). Direktori root ditandai dengan garis miring (slash) (<quote>/</quote>). 
	Direktori dipisahkan dengan karakter yang sama. 
      </para>

      <figure id="filesystem-structure">
        <title>Struktur sistem berkas</title>
        <mediaobject>
          <imageobject>
            <imagedata fileref="../../images/fs-structure.png" format="PNG"/>
          </imageobject>
        </mediaobject>
      </figure>

      <para>
        <xref linkend="filesystem-structure"/> menampilkan struktur dari sistem berkas. Anda bisa melihat 
	bahwa direktori root <filename>/</filename> memiliki dua direktori anak: <filename>bin</filename> 
	dan <filename>home</filename>. Direktori <filename>home</filename> memiliki dua direktori anak,
        <filename>joe</filename> dan <filename>jack</filename>. Diagram menampilkan nama path penuh 
	dari setiap direktori. Notasi yang sama digunakan untuk berkas. Misalkan terdapat sebuah berkas 
	bernama <filename>memo.txt</filename> pada direktori <filename>/home/jack</filename>, path 
	lengkap dari berkas tersebut adalah <filename>/home/jack/memo.txt</filename>.
      </para>

      <para>
        Setiap direktori memiliki dua catatan khusus, <quote><filename>.</filename></quote>, dan
        <quote><filename>..</filename></quote>.  Yang pertama mengacu pada direktori itu sendiri, 
	sedangkan yang kedua mengacu pada direktori induk. Catatan ini bisa digunakan untuk membuat 
	path relatif. Jika Anda bekerja pada direktori <filename>jack</filename>, Anda bisa mengacu direktori
        <filename>/home/joe</filename> dengan <filename>../joe</filename>.
      </para>
    </sect2>

    <sect2 id="concepts-fshierarchy-mounting">
      <title>Melakukan mount</title>

      <para>
        Anda mungkin heran bagaimana mungkin mengakses perangkat atau partisi lain selain partisi hard 
	disk yang menyimpan sistem berkas root. Linux mengijinkan administrator sistem menghubungkan 
	sebuah perangkat pada sembarang direktori pada struktur sistem berkas. Proses ini disebut dengan
        <emphasis>mount</emphasis>.  Sebagai contoh, kita bisa melakukan mount terhadap drive CD-ROM 
	pada direktori <filename>/cdrom</filename>. Jika proses mount dilakukan dengan benar, berkas 
	pada CD-ROM bisa diakses pada direktori ini. Proses mount dijelaskan secara detail pada <xref
        linkend="basics-filesystem-mounting"/>.
      </para>
    </sect2>

    <sect2 id="concepts-fshierarchy-commondirs">
      <title>Direktori-direktori umum</title>

      <para>
        Filesystem Hierarchy Standard Group sudah mencoba untuk membuat sebuah standar yang mendeskripsikan 
	direktori mana yang harus tersedia pada sistem GNU/Linux. Saat ini, sebagian besar distribusi 
	menggunakan Filesystem Hierarchy Standard (FHS) sebagai panduan. Bagian ini mendeskripsikan beberapa 
	direktori wajib pada sistem GNU/Linux
      </para>

      <para>
        Harap diperhatikan bahwa GNU/Linux tidak harus memiliki direktori terpisah untuk setiap aplikasi 
	(seperti Windows). Berkas diurutkan berdasarkan fungsi dan jenisnya. Sebagai contoh, program biner 
	untuk program user yang umum disimpan pada <filename>/usr/bin</filename>, dan pustakanya pada
        <filename>/usr/lib</filename>. Ini adalah gambarang singkat dari direktori yang penting pada 
	sistem Slackware Linux: 
      </para>


      <itemizedlist>
        <listitem>
          <para>
            <emphasis role="bold">/bin</emphasis>: program biner yang esensial yang harus tetap tersedia meskipun
            <filename>/usr</filename> tidak di-mount. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/dev</emphasis>: berkas perangkat. Ini adalah berkas khusus yang dipakai untuk
	    mengakses perangkat-perangkat. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/etc</emphasis>: Direktori <filename>/etc</filename> berisi semua berkas 
	    konfigurasi yang penting. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/home</emphasis>: berisi direktori home untuk setiap pengguna individual. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/lib</emphasis>: pustaka sistem yang penting (seperti glibc) dan modul kernel. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/root</emphasis>: direktori home untuk pengguna <emphasis>root</emphasis>.
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/sbin</emphasis>: program biner yang penting yang digunakan oleh administrator sistem. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/tmp</emphasis>: Direktori yang dapat ditulis oleh siapa saja untuk berkas temporer. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/bin</emphasis>: menyimpan sebagian besar dari program biner pengguna. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/lib</emphasis>: pustaka yang tidak penting untuk sistem untuk melakukan boot. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/usr/sbin</emphasis>: program biner yang tidak penting untuk administrasi sistem. 
          </para>
        </listitem>
        <listitem>
          <para>
            <emphasis role="bold">/var</emphasis>: berbagai berkas data yang bervariasi, seperti log. 
          </para>
        </listitem>
      </itemizedlist>
    </sect2>
  </sect1>

  <sect1 id="concepts-devices">
    <title>Perangkat</title>

    <sect2 id="concepts-devices-intro">
      <title>Perkenalan</title>

      <para>
        Pada GNU/Linux hampir semua direpresentasikan sebagai sebuah berkas, termasuk perangkat. Setiap sistem 
	GNU/Linux memiliki sebuah direktori dengan berkas kuhusus, yang diberi nama
        <filename>/dev</filename>. Setiap berkas pada direktori <filename>/dev</filename>
        merepresentasikan sebuah perangkat atau perangkat pseudo. Sebuah berkas perangkat memiliki dua angka 
	khusus yang diasosiasikan dengannya, angka perangkat <emphasis>major</emphasis> dan <emphasis>minor</emphasis>. 
	Kernel tahu perangkat mana yang direpresentasikan oleh berkas perangkat dengan melihat angka-angka ini. 
	Contoh berikut ini menampilkan angka perangkat untuk berkas perangkat <filename>/dev/zero</filename>:
      </para>

      <screen>
$ <command>file /dev/zero</command>
/dev/zero: character special (1/5)
      </screen>

      <para>
        Perintah <command>file</command> dapat digunakan untuk menentukan jenis dari sebuah berkas. Berkas dikenali 
	sebagai sebuah berkas perangkat yang memiliki angka perangkat major <emphasis>1</emphasis> dan <emphasis>5</emphasis> 
	sebagai angka minor.
      </para>

      <para>
        Jika Anda sudah menginstall paket sumber kernel, Anda bisa menemukan daftar lengkap dari semua perangkat dengan 
	angka major dan minornya pada <filename>/usr/src/linux/Documentation/devices.txt</filename>. Sebuah daftar 
	terbaru juga tersedia secara on-line melalui Arsip Kernel Linux<footnote>
          <para>
            <ulink url="ftp://ftp.kernel.org/pub/linux/docs/device-list/" />
          </para>
        </footnote>.
      </para>

      <para>
        Kernel Linux menangani dua jenis perangkat: perangkat
        <emphasis>karakter</emphasis> dan <emphasis>blok</emphasis>. Perangkat karakter dapat membaca per byte, 
	sedangkan perangkat blok tidak. Perangkat blok membaca per blok (misalnya 4096 byte per satuan waktu). 
	Sebuah perangkat ditentukan sebagai perangkat blok atau karakter oleh sifat alami dari sebuah perangkat. 
	Sebagai contoh, sebagian besar media penyimpanan adalah perangkat blok, dan sebagian besar perangkat 
	masukan adalah perangkat karakter. Perangkat blok memiliki keuntungan terpisah, yaitu mereka dapat disimpan 
	dalam cache. Ini berarti sebagian besar blok yang dibaca atau ditulis disimpan dalam sebuah area khusus 
	dari memori sistem, yang bernama cache. Memori jauh lebih cepat dari media penyimpanan secara umum, 
	sehingga performa bisa ditingkatkan dengan melakukan operasi pembacaan dan penulisan blok pada memori. 
	Tentu saja, perubahan harus dituliskan pada media penyimpanan untuk merefleksikan perubahan yang dibuat pada cache.
      </para>
    </sect2>

    <sect2 id="concepts-devices-atascsi">
      <title>Perangkat ATA dan SCSI</title>

      <para>
       Terdapat dua jenis perangkat blok yang akan kita lihat lebih detail, karena memahami penamaan dari perangkat 
       ini sangat penting untuk mempartisi hard disk dan juga melakukan mount. Hampir semua komputer modern 
       dengan arsitektur x86 menggunakan hard disk dan CD-ROM ATA. Pada Linux, perangkat-perangkat ini diberi nama 
       sesuai urutannya:
      </para>

      <screen>
/dev/hda - perangkat master pada kanal ATA pertama
/dev/hdb - perangkat slave pada kanal ATA pertama
/dev/hdc - perangkat master pada kanal ATA kedua
/dev/hdd - perangkat slave pada kanal ATA kedua
      </screen>

      <para>
        Pada sebagian besar komputer dengan hard disk tunggal, hard disk adalah perangkat master pada kanal ATA 
	pertama (<filename>/dev/hda</filename>), dan CD-ROM adalah perangkat master untuk kanal ATA kedua. Partisi 
	hard disk diberi nama sesuai disk yang menampungnya ditambah sebuah angka. Sebagai contoh <filename>/dev/hda1</filename> 
	adalah partisi pertama dari disk yang direpresentasikan oleh perangkat <filename>/dev/hda</filename>.
      </para>

      <para>
        Hard disk SCSI dan drive CD-ROM mengikuti konvensi penamaan lainnya. SCSI tidak umum dipakai pada mesin biasa, 
	tetapi perangkat USB dan Serial ATA (SATA) juga direpresentasikan sebagai disk SCSI. Notasi berikut digunakan 
	untuk perangkat SCSI:
      </para>

      <screen>
/dev/sda - Disk SCSI pertama
/dev/sdb - Disk SCSI kedua
/dev/sdc - Disk SCSI ketiga
/dev/scd0 - CD-ROM pertama
/dev/scd1 - CD-ROM kedua
/dev/scd2 - CD-ROM ketiga
      </screen>

      <para>
        Nama partisi selalu dibuat dengan cara yang sama dengan disk ATA;
        <filename>/dev/sda1</filename> adalah partisi pertama pada disk SCSI pertama. 
      </para>

      <para>
        Jika Anda menggunakan implementasi perangkat lunak RAID pada kernel Linux, volume RAID tersedia pada <filename>/dev/mdn</filename>, 
	dimana <emphasis>n</emphasis> adalah nomor volume yang diawali dengan 0.
      </para>
    </sect2>
  </sect1>
</chapter>
