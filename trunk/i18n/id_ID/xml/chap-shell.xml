<?xml version="1.0" encoding="UTF-8"?>

<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"
	 xml:id="chap-shell">
  <title>Shell</title>

  <sect1 xml:id="chap-shell-intro">
    <title>Pengenalan</title>

    <para>
      Pada bab ini kita akan melihat lingkungan kerja tradisional dari sistem UNIX: shell. 
      Shell adalah sebuah interpreter yang dapat digunakan secara interaktif dan 
      non-interaktif. Ketika shell digunakan pada mode non-interaktif, fungsinya 
      sebagai bahasa pemrograman yang sederhana, namun bagus.
    </para>

    <para>
      Prosedur untuk menjalankan shell tergantung dari apakah Anda menjalankan login
      berbasis grafis atau teks. Jika Anda login pada mode teks, maka shell sudah langsung 
      dijalankan setelah memasukkan kata sandi yang benar. Jika Anda menjalankan manajer 
      login grafis seperti KDM, lakukan proses login secara normal, dan lihat pada 
      manajer jendela atau menu desktop untuk sebuah isian bernama <quote>XTerm</quote>, 
      <quote>Terminal</quote> atau <quote>Konsole</quote>. XTerm adalah emulator terminal, setelah 
      emulator terminal dijalankan, shell akan muncul.
    </para>
		
    <para>
      Sebelum kita pergi lebih jauh, kami harus harus memperingatkan kepada Anda bahwa 
      Slackware Linux menyediakan lebih dari sekedar satu shell. Terdapat dua rasa shell 
      yang menjadi populer, Bourne shell dan C shell. Pada bab ini kita akan membahas 
      Bourne shells yang sesuai dengan standar IEEE 1003.1. Shell Bash (Bourne Again
      Shell) dan ksh (Korn Shell) sesuai dengan standar ini juga. Jadi merupakan ide bagus
      untuk menggunakan salah satu dari dua shell ini. Anda bisa melihat shell yang digunakan
      pada sistem dengan menjalankan <command>echo $SHELL</command>.  Ini yang akan dilaporkan
      pada shell Bash:
    </para>

    <screen>
$ <userinput>echo $SHELL</userinput>
/bin/bash
    </screen>
		
    <para>
      Jika Anda menggunakan shell yang berbeda, Anda bisa mengganti shell default Anda. 
      Sebelum mengganti shell yang berbeda, Anda harus menyediakan path lengkap dari shell. 
      Anda bisa melakukannya dengan perintah <command>which</command>. Misalnya:
    </para>

    <screen>
$ <userinput>which bash</userinput>
/bin/bash
$ <userinput>which ksh</userinput>
/bin/ksh
    </screen>

    <para>
      Pada sistem Slackware, path lengkap terhadap shell bash adalah <filename>/bin/bash</filename>, 
      dan shell ksh <filename>/bin/ksh</filename>. Dengan informasi ini, dan perintah <command>chsh</command> 
      Anda bisa mengganti shell default. Contoh berikut mengganti shell default menjadi bash:
    </para>

    <screen>
$ <userinput>chsh -s /bin/bash</userinput>
Changing shell for daniel.
Password:
Shell changed.
    </screen>

    <para>
      Shell baru akan diaktifkan setelah keluar dari shell yang saat ini sedang dipakai (dengan <command>logout</command> 
      atau <command>exit</command>), atau dengan membuka jendela terminal X baru jika Anda menjalankan X11.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-executing">
    <title>Mengeksekusi perintah-perintah</title>

    <para>
      Shell interaktif digunakan untuk menjalankan program dengan mengeksekusi perintah-perintah. Terdapat 
      dua jenis perintah yang dapat dijalankan shell:
    </para>

    <itemizedlist>
      <listitem>
	<para>
	  <emphasis>Perintah bawaan (built-in):</emphasis> perintah built-in terintegrasi pada shell.
	  Perintah yang paling sering digunakan adalah: <command>cd</command>, <command>fg</command>,
	  <command>bg</command>, dan <command>jobs</command>.
	</para>
      </listitem>
      <listitem>
	<para>
	  <emphasis>Perintah eksternal:</emphasis> perintah eksternal adalah program yang bukan merupakan 
	  bagian dari program shell, dan disimpan secara terpisah pada sistem berkas. Perintah 
	  yang paling sering digunakan : <command>ls</command>, <command>cat</command>,
	  <command>rm</command>, dan <command>mkdir</command>.
	</para>
      </listitem>
    </itemizedlist>

    <para>
      Semua perintah shell dieksekusi dengan sintaks yang sama:
    </para>
		
    <screen>
<command>perintah [argumen1 argumen2 ... argumenN]</command>
    </screen>

    <para>
      Jumlah parameter bebas dan selalu dikirimkan ke perintah. Perintah bisa menentukan apa yang harus
      dilakukan dengan argumen.
    </para>

    <para>
      Semua perintah built-in selalu dapat dieksekusi, karena merupakan bagian 
      dari shell. Perintah eksternal bisa dieksekusi ketika program masuk didalam pencarian path oleh 
      shell. Jika tidak, Anda harus menentukan path ke program. Pencarian path dari shell disimpan pada 
      variabel bernama <emphasis>PATH</emphasis>.  Sebuah varibel adalah bagian dari memory, dimana
      nilainya bisa diganti. Kita bisa melihat isi dari variabel PATH dengan cara berikut:
    </para>

    <screen>
$ <userinput>echo $PATH</userinput>
/usr/kerberos/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/daniel/bin
    </screen>

    <para>
      Path direktori pada variabel <emphasis>PATH</emphasis> dipisahkan dengan karakter titik dua 
      (<emphasis>:</emphasis>). Anda bisa menggunakan perintah <command>which</command> untuk memeriksa 
      apakah perintah yang diberikan terdapat pada path shell. Anda bisa melakukannya dengan memberikan 
      perintah sebagai argumen bagi <command>which</command>. Sebagai contoh:
    </para>

    <screen>
$ <userinput>which pwd</userinput>
/bin/pwd
$ <userinput>which sysstat</userinput>
/usr/bin/which: no sysstat in (/usr/kerberos/bin:/usr/local/bin:/usr/bin:/bin:/usr/X11R6/bin:/home/daniel/bin)
    </screen>

    <para>
      Jika sebuah program bukan bagian dari path, Anda masih bisa menjalankannya dengan memasukkan path absolut atau relatifnya.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-moving">
    <title>Berpindah-pindah</title>

    <para>
      Seringkali kita perlu melompat pada berbagai bagian dari sebuah baris dan mengubahnya, 
      ketika Anda mengedit perintah yang besar. Baik <command>bash</command> dan <command>ksh</command> 
      memiliki jalan pintas (shortcut) untuk melakukan beberapa operasi umum. Terdapat dua mode shell,
      yang memiliki dua kunci shortcut yang berbeda. Mode ini bersesuaian dengan dua editor UNIX 
      yang populer. Editor ini adalah <command>vi</command> dan <command>emacs</command>. 
      Pada buku ini kita hanya akan membahas kunci EMACS-like. Anda bisa melihat pada mode apa yang digunakan 
      oleh shell yang sedang digunakan dengan mencetak variabel <emphasis>SHELLOPTS</emphasis>. 
      Pada contoh pertama shell digunakan pada mode <emphasis>emacs</emphasis>, pada contoh kedua
      digunakan mode <emphasis>vi</emphasis>. Anda bisa mengidentifikasi mode dengan melihat pada string 
      <emphasis>emacs</emphasis> atau <emphasis>vi</emphasis> pada isi dari variabel.
    </para>

    <screen>
$ <userinput>echo $SHELLOPTS</userinput>
braceexpand:emacs:hashall:histexpand:history:interactive-comments:monitor
    </screen>

    <screen>
$ <userinput>echo $SHELLOPTS</userinput>
braceexpand:hashall:histexpand:history:interactive-comments:monitor:vi
    </screen>

    <para>
      Jika shell Anda menggunakan mode <emphasis>vi</emphasis>, Anda bisa berpindah ke mode 
      <emphasis>emacs</emphasis> dengan menentukan opsi <emphasis>emacs</emphasis>:
    </para>

    <screen>
$ <userinput>set -o emacs</userinput>
    </screen>

    <para>
      Dengan mode pengeditan <emphasis>emacs</emphasis> diaktifkan, Anda bisa menjalankan dengan shortcut. 
      Kita akan melihat tiga jenis shortcut: pengeditan karakter, pengeditan kata, dan pengeditan baris.
      Pada bagian lain dari bab ini, kita juga akan emlihat pada beberapa shortcut yang digunakan untuk 
      mengambil isian dari sejarah perintah.
    </para>

    <sect2 xml:id="chap-shell-moving-char">
      <title>Pengeditan karakter</title>

      <para>
	Grup pertama dari shortcut menggunakan karakter sebagai unit logisnya, berarti mereka mengijinkan 
	operasi pengeditan perintah baris pada karakter.  <xref
	linkend="chap-shell-moving-char-shortcuts-move" /> menyediakan gambaran dari shortcut yang digunakan 
	untuk berpindah melalui baris pada karakter.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-move">
	<title>Berpindah per karakter</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Kunci</entry><entry>Deskripsi</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-b</entry>
	      <entry>Pindah satu karakter kebelakang.</entry>
	    </row>
	    <row>
	      <entry>Ctrl-f</entry>
	      <entry>Pindah satu karakter kedepan.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Shortcut ini sangat sederhana, dan tidak melakukan hal-hal yang tidak diinginkan.
	Misalkan Anda sudah menulis baris seperti ini:
      </para>

      <screen>
find ~/music -name '*.ogg' - -print<emphasis role="cursor">&#32;</emphasis>
      </screen>

      <para>
	Kursor akan berada di akhir. Anda bisa berpindah ke awal baris dengan menekan <emphasis>Ctrl-b</emphasis>:
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music - -name '*.ogg' -print
      </screen>

      <para>
	Anda juga bisa kembali ke akhir baris dengan menekan <emphasis>Ctrl-f</emphasis>. Terdapat kesalahan pada 
	baris ini, karena terdapat satu karakter yang salah (-). Untuk menghilangkan karakter ini, Anda bisa 
	menggunakan salah satu shortcut untuk penghapusan karakter.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-delete">
	<title>Menghapus karakter</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Kunci</entry><entry>Deskripsi</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-h</entry>
	      <entry>Menghapus sebuah karakter sebelum kursor. Hal ini memiliki efek yang sama dengan menggunakan 
	      kunci Backspace pada sebagian besar komputer pribadi.</entry>
	    </row>
	    <row>
	      <entry>Ctrl-d</entry>
	      <entry>Menghapus karakter pada posisi kursor berada.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Anda bisa menghapus karakter minus (-) dengan dua cara. Cara pertama adalah dengan memindahkan kursor 
	ke karakter yang akan dihapus:
      </para>

      <screen>
find ~/music <emphasis role="cursor">-</emphasis> -name '*.ogg' -print
      </screen>

      <para>
	lalu tekan <emphasis>Ctrl-d</emphasis> dua kali. Hal ini akan menghapus karakter minus, dan spasi yang mengikuti 
	karakter minus:
      </para>

      <screen>
find ~/music <emphasis role="cursor">-</emphasis>name '*.ogg' -print
      </screen>

      <para>
	Dengan melihat pada potongan aslinya, pendekatan lain adalah dengan meletakkan posisi kursor pada spasi setelah
	tanda minus:
      </para>

      <screen>
find ~/music -<emphasis role="cursor">&#32;</emphasis> -name '*.ogg' -print
      </screen>

      <para>
	lalu menekan <emphasis>Ctrl-h</emphasis> dua kali untuk menghapus dua karakter sebelumnya, yaitu karakter
	minus dan spasi sebelum karakter minus. Hasilnya akan sama, kecuali kursornya akan berpindah:
      </para>

      <screen>
find ~/music<emphasis role="cursor">&#32;</emphasis>-name '*.ogg' -print
      </screen>

      <para>
	Salah satu fitur menarik dari shell modern adalah Anda bisa melakukan transposisi (menukar) karakter.
	Hal ini cukup berguna jika Anda melakukan kesalahan penulisan dimana dua karakter tertukar. <xref
	linkend="chap-shell-moving-char-shortcuts-swap" /> mendaftar shortcut untuk pertukaran karakter.
      </para>

      <table xml:id="chap-shell-moving-char-shortcuts-swap">
	<title>Menukar karakter</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Kunci</entry><entry>Deskripsi</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-t</entry>
	      <entry>Menukar (transposisi) karakter dimana kursor berada dan karakter sebelum kursor.
	      Hal ini berguna untuk memperbaiki kesalahan pengetikan dengan cepat.</entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Misalkan Anda sudah menuliskan perintah berikut:
      </para>

      <screen>
cat myreport.ttx
      </screen>

      <para>
	Ekstensi memiliki kesalahan kesalahan pengetikan karena Anda hendak menuliskan <command>cat</command> 
	<filename>myreport.txt</filename>. Hal ini bisa diperbaiki dengan shortcut transposisi karakter.
	Pertama-tama pindahkan kursor ke karakter kedua dari pasangan karakter yang berada pada urutan
	yang salah:
      </para>

      <screen>
cat myreport.tt<emphasis role="cursor">x</emphasis>
      </screen>

      <para>
	Anda bisa menekan <emphasis>Ctrl-t</emphasis>. Karakter akan ditukar dan kursor akan diletakkan diantara
	karakter yang dipertukarkan:
      </para>

      <screen>
cat myreport.txt<emphasis role="cursor">&#32;</emphasis>
      </screen>
    </sect2>

    <sect2 xml:id="chap-shell-moving-word">
      <title>Pengeditan kata</title>

      <para>
	Seringkali diperlukan perpindahan pada level karakter. Untungnya shell Korn dan Bash juga bisa berpindah baris
	pada level kata. Kata adalah urutan dari karakter yang dipisahkan oleh karakter khusus, misalnya spasi.
	<xref linkend="chap-shell-moving-word-shortcuts-move" /> mendaftar shortcut yang bisa digunakan 
	untuk melakukan navigasi baris per kata.
      </para>

      <table xml:id="chap-shell-moving-word-shortcuts-move">
	<title>Berpindah per kata</title>

	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Kunci</entry>
	      <entry>Deskripsi</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Esc b</entry>
	      <entry>
		Pindah ke awal dari kata aktual atau kata sebelumnya.
	      </entry>
	    </row>
	    <row>
	      <entry>Esc f</entry>
	      <entry>
		Pindah maju ke karakter terakhir dari kata aktual atau kata selanjutnya.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Seperti yang Anda lihat bahwa huruf pada shortcut sama dengan ketika berpindah per karakter. 
	Logika dari perubahan ini cukup menarik. Berpindah kedepan meletakkan kursor di akhir dari
	kata aktual, bukan pada karakter pertama dari kata selanjutnya seperti yang Anda prediksikan.
	Mari kita lihat pada sebuah contoh. Pada awalnya kursor berada pada karakter pertama dari
	sebuah baris.
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music -name '*.ogg' -print
      </screen>

      <para>
	Menekan <emphasis>Esc f</emphasis> akan memindahkan kursor diakhir karakter pertama, yang
	berupa <emphasis>find</emphasis> pada kasus ini:
      </para>

      <screen>
find<emphasis role="cursor">&#32;</emphasis>~/music -name '*.ogg' -print
      </screen>

      <para>
	Maju kedepan sekali akan meletakkan kursor dibelakang <emphasis>~/music</emphasis>:
      </para>

      <screen>
find ~/music<emphasis role="cursor">&#32;</emphasis>-name '*.ogg' -print
      </screen>

      <para>
	Perpindahan kebelakang meletakkan kursor di karakter pertama dari kata aktual, atau karakter
	pertama dari kata sebelumnya jika kursor berada di karakter pertama dari sebuah kata.
	Jadi berpindah kebelakang satu kata pada contoh sebelumnya akan meletakkan kursor pada kata pertama dari 
	<quote>music</quote>:
      </para>

      <screen>
find ~/<emphasis role="cursor">m</emphasis>usic -name '*.ogg' -print
      </screen>

      <para>
	Menghapus kata memiliki cara kerja yang sama dengan perpindahan kata, tetapi karakter yang ditemukan
	akan dihapus.  <xref
	linkend="chap-shell-moving-word-shortcuts-delete" /> mendaftar shortcut yang digunakan untuk
	menghapus kata.
      </para>

      <table  xml:id="chap-shell-moving-word-shortcuts-delete">
	<title>Menghapus kata</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Kunci</entry>
	      <entry>Deskripsi</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>
		Alt-d
	      </entry>
	      <entry>
		Menghapus kata, dimulai dari posisi kursor aktual.
	      </entry>
	    </row>
	    <row>
	      <entry>
		Alt-Backspace
	      </entry>
	      <entry>
		Menghapus setiap karakter dari posisi kursor aktual hingga karakter pertama dari kata yang ditemukan.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Akhirnya, terdapat beberapa shortcut yang berguna untuk memanipulasi kata. Shortcut ini dapat dilihat pada <xref
	linkend="chap-shell-moving-word-shortcuts-modify" />.
      </para>

      <table  xml:id="chap-shell-moving-word-shortcuts-modify">
	<title>Memodifikasi kata</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Kunci</entry>
	      <entry>Deskripsi</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Alt-t</entry>
	      <entry>
		Menukar (transposisi) kata aktual dengan kata sebelumnya.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-u</entry>
	      <entry>
		Membuat kata menjadi huruf kapital, dimulai dari kursor aktual.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-l</entry>
	      <entry>
		Membuat kata menjadi huruf kecil, dimulai dari kursor aktual.
	      </entry>
	    </row>
	    <row>
	      <entry>Alt-c</entry>
	      <entry>
		Membuat karakter aktual menjadi huruf kapital atau karakter pertama dari kata selanjutnya
		yang ditemukan.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Transposisi menukar antar kata. Jika kata biasa digunakan, maka perilakunya bisa diprediksi. Misalnya
	jika kita memiliki baris berikut dengan kursor berada pada <quote>two</quote>
      </para>

      <screen>
one <emphasis role="cursor">t</emphasis>wo three
      </screen>

      <para>
	Transposisi kata akan menukar <quote>two</quote> dan <quote>one</quote>:
      </para>

      <screen>
two one three
      </screen>

      <para>
	Tetapi jika terdapat karakter bukan kata, shell akan menukar kata dengan kata sebelumnya sambil 
	mempertahankan urutan dari karakter bukan kata. Hal ini cukup berguna untuk mengedit argumen dari sebuah
	perintah. Misalkan Anda membuat kesalahan, dan mencampurkan ekstensi berkas yang hendak Anda cari
	dari parameter <emphasis>print</emphasis>:
      </para>

      <screen>
find ~/music -name '*.print' -ogg
      </screen>

      <para>
	Anda bisa memperbaiki hal ini dengan meletakkan kursor pada kata kedua yang salah, dalam kasus ini 
	<quote>ogg</quote>, dan menukar dua kata tersebut. Hal ini akan memberikan hasil yang kita inginkan:
      </para>

      <screen>
find ~/music -name '*.ogg' -print
      </screen>

      <para>
	Akhirnya, terdapat beberapa shortcut yang mengubah kapitalisasi dari kata. Shortcut Alt-u membuat semua karakter
	menjadi huruf kapital, dimulai dari posisi kursor aktual hingga akhir kata. Jadi, jika kita memiliki nama dengan huruf 
	kecil <quote>alice</quote>, membuatnya menjadi huruf besar dengan kursor berada pada <quote>i</quote> memberikan 
	hasil <quote>alICE</quote>. Alt-l memiliki perilaku yang sama, tetapi mengubah huruf menjadi huruf kecil. Jadi menggunakan 
	Alt-l pada <quote>alICE</quote> dengan kursor pada <quote>I</quote> akan mengubahnya menjadi <quote>alice</quote>. 
	Alt-c hanya mengubah karakter dimana kursor berada, atau karakter kata selenjutnya yang ditemukan, menjadi huruf kapital.
	Sebagai contoh, menekan Alt-c dengan posisi kursor pada <quote>a</quote> dalam kata <quote>alice</quote> akan menghasilkan 
	<quote>Alice</quote>.
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-moving-line">
      <title>Pengeditan baris</title>

      <para>
	Level tertinggi yang bisa kita edit adalah baris itu sendiri.
	<xref linkend="chap-shell-moving-line-shortcuts-move" />
	mendaftar dua shortcut.
      </para>

      <table xml:id="chap-shell-moving-line-shortcuts-move">
	<title>Berpindah per baris</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Kunci</entry>
	      <entry>Deskripsi</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-a</entry>
	      <entry>
		Berpindah ke awal baris.
	      </entry>
	    </row>
	    <row>
	      <entry>Ctrl-e</entry>
	      <entry>
		Berpindah ke akhir baris.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>

      <para>
	Misalkan kursor berada di tengah-tengah sebuah baris:
      </para>

      <screen>
find ~/music -name<emphasis role="cursor">&#32;</emphasis>'*.ogg' -print
      </screen>

      <para>
	Menekan Ctrl-e sekali akan memindahkan kursor ke akhir baris:
      </para>

      <screen>
find ~/music -name '*.ogg' -print<emphasis role="cursor">&#32;</emphasis>
      </screen>

      <para>
	Menekan Ctrl-a akan mmemindahkan kursor ke awal baris:
      </para>

      <screen>
<emphasis role="cursor">f</emphasis>ind ~/music -name '*.ogg' -print
      </screen>

      <para>
	Anda bisa menghapus karakter per baris. Shortcutnya dapat dilihat pada  <xref
	linkend="chap-shell-moving-line-shortcuts-delete" />.  Shortcut ini bekerja seperti pergerakan,
	tetapi menghapus karakter yang ditemukan. Ctrl-k akan menghapus karakter dimana kursor itu berada, tetapi 
	Ctrl-x Backspace tidak akan menghapusnya. Berpindah ke awal baris dengan Ctrl-a, diikuti dengan 
	Ctrl-k, adalah untuk menghapus sebuah baris sepenuhnya.
      </para>

      <table xml:id="chap-shell-moving-line-shortcuts-delete">
	<title>Menghapus baris</title>
	<tgroup cols="1" colsep="1" rowsep="1">
	  <thead>
	    <row>
	      <entry>Kunci</entry>
	      <entry>Deskripsi</entry>
	    </row>
	  </thead>
	  <tbody>
	    <row>
	      <entry>Ctrl-k</entry>
	      <entry>
		Menghapus semua karakter pada baris, dimulai dari posisi kursor.
	      </entry>
	    </row>
	    <row>
	      <entry>Ctrl-x Backspace</entry>
	      <entry>
		Menghapus semua karakter pada baris hingga posisi aktual kursor.
	      </entry>
	    </row>
	  </tbody>
	</tgroup>
      </table>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-shell-history">
    <title>Catatan sejarah perintah</title>

    <para>
      Seringkali Anda harus menjalankan perintah yang pernah Anda jalankan sebelumnya. Untungnya, 
      Anda tidak harus mengetikkan semuanya kembali. Anda bisa melihat catatan sejarah dari 
      perintah-perintah yang pernah ditulis dengan kunci panah atas dan bawah. Selain itu, juga
      dimungkinkan untuk mencari perintah. Menekan Control-r dan mulailah menuliskan perintah 
      yang hendak Anda tulis. Anda akan melihat bahwa bash akan menampilkan perintah yang cocok yang
      bisa ditemukan. Jika yang ditampilkan bukan yang Anda cari, Anda bisa bisa melanjutkan menuliskan 
      perintah (sampai unik dan ditemukan sebuah kecocokan), atau menekan Control-r sekali lagi 
      untuk mencari kembali. Ketika Anda sudah menemukan perintah yang dicari, Anda bisa mengeksekusinya
      dengan menekan &lt;Enter&gt;.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-completion">
    <title>Pelengkap</title>

    <para>
      Pelengkap adalah satu fungsi yang paling berguna dalam shell UNIX-like. Misalkan Anda memiliki direktori 
      dengan dua berkas bernama <filename>websites</filename> dan <filename>recipe</filename>. Dan misalkan 
      Anda hendak melakukan <command>cat</command> pada berkas <filename>websites</filename>
      (<command>cat</command> menampilkan isi sebuah berkas), dengan menentukan <filename>websites</filename> 
      sebagai parameter ke perintah cat. Biasanya Anda cukup mengetikkan <quote>cat websites</quote>, dan mengeksekusi
      perintah. Cobalah untuk mengetikkan <quote>cat w</quote>, dan tekan kunci &lt;Tab&gt;. Bash akan secara 
      otomatis melengkapi apa yang Anda tulis menjadi <quote>cat websites</quote>.
    </para>

    <para>
      Tetapi apa yang terjadi jika Anda memiliki berkas yang namanya dimulai dengan karakter yang sama? Misalkan 
      Anda memiliki berkas <filename>recipe1.txt</filename> dan <filename>recipe2.txt</filename>. Mengetikkan <quote>cat
      r</quote> dan menekan &lt;Tab&gt;, Bash akan melengkapi nama berkas sejauh yang bisa dilakukan. Hal ini 
      akan memberikan <quote>cat recipe</quote>. Coba untuk menekan &lt;Tab&gt; lagi, dan Bash akan memberikan daftar 
      nama berkas yang dimulai dengan <quote>recipe</quote>, dalam hal ini kedua berkas recipe. Pada posisi ini Anda harus 
      membantu Bash mengetikkan karakter selanjutnya dari berkas yang Anda perlukan. Misalkan Anda hendak 
      <command>cat</command> <filename>recipe2</filename>, Anda bisa menekan kunci &lt;2&gt;. Setelah itu tidak ada 
      masalah dalam melengkapi nama berkas, dan menekan &lt;Tab&gt; akan melengkapi perintah menjadi <quote>cat
      recipe2.txt</quote>.
    </para>

    <para>
      Pelengkap ini bekerja pada perintah. Sebagian besar perintah GNU/Linux cukup pendek, sehingga tidak akan banyak berguna.
    </para>

    <para>
      Merupakan ide yang bagus untuk berlatih dengan pelengkap, karena bisa It is a good idea to practice a bit with completion, it can save
      alot of keystrokes if you can handle completion well. You can
      make some empty files to practice with using the
      <command>touch</command> command.  For example, to make a file
      named <filename>recipe3.txt</filename>, execute <command>touch
      recipe3.txt</command>.
    </para>
  </sect1>

  <sect1 xml:id="chap-shell-wildcards">
    <title>Wildcards</title>

    <para>
      Most shells, including Bash and ksh, support
      wildcards. Wildcards are special characters that can be used to
      do pattern matching. The table listed below displays some
      commonly used wildcards. We are going to look at several
      examples to give a general idea how wildcards work.
    </para>

    <table xml:id="chap-shell-wildcards-thewildcards">
      <title>Bash wildcards</title>

      <tgroup cols="2" align="left" colsep="1" rowsep="1">
	<thead>
	  <row>
	    <entry>Wildcard</entry> <entry>Matches</entry>
	  </row>
	</thead>
	<tbody>
	  <row>
	    <entry>*</entry>
	    <entry>A string of characters</entry>
	  </row>
	  <row>
	    <entry>?</entry>
	    <entry>A single character</entry>
	  </row>
	  <row>
	    <entry>[]</entry>
	    <entry>A character in an array of characters</entry>
	  </row>
	</tbody>
      </tgroup>
    </table>

    <sect2 xml:id="chap-shell-wildcards-string">
      <title>Matching a string of characters</title>

      <para>
	As you can see in the table above the <quote>*</quote>
	character matches a string of characters. For example,
	<emphasis>*.html</emphasis> matches everything ending with
	<emphasis>.html</emphasis>, <emphasis>d*.html</emphasis>
	matches everything starting with a <emphasis>d</emphasis> and
	ending with <emphasis>.html</emphasis>.
      </para>

      <para>
	Suppose that you would like to list all files in the current
	directory with the <emphasis>.html</emphasis> extension, the
	following command will do the job:
      </para>

      <screen>
$ <userinput>ls *.html</userinput>
book.html        installation.html     pkgmgmt.html  usermgmt.html
filesystem.html  internet.html         printer.html  xfree86.html
gfdl.html        introduction.html     proc.html
help.html        slackware-basics.html shell.html
      </screen>

      <para>
	Likewise we could remove all files starting with an
	<emphasis>in</emphasis>:
      </para>

      <screen>
$ <userinput>rm in*</userinput>
      </screen>
    </sect2>

    <sect2 xml:id="chap-shell-wildcards-single">
      <title>Matching single characters</title>

      <para>
	The <quote>?</quote> wildcard works as the <quote>*</quote>
	wildcard, but matches single characters. Suppose that we have
	three files, <filename>file1.txt</filename>,
	<filename>file2.txt</filename> and
	<filename>file3.txt</filename>. The string
	<emphasis>file?.txt</emphasis> matches all three of these
	files, but it does not match <filename>file10.txt</filename>
	(<quote>10</quote> are two characters).
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-wildcards-set">
      <title>Matching characters from a set</title>

      <para>
	The <quote>[]</quote> wildcard matches every character between
	the brackets.  Suppose we have the files from the previous
	example, <filename>file1.txt</filename>,
	<filename>file2.txt</filename> and
	<filename>file3.txt</filename>. The string
	<emphasis>file[23].txt</emphasis> matches
	<filename>file2.txt</filename> and
	<filename>file3.txt</filename>, but not
	<filename>file1.txt</filename>.
      </para>
    </sect2>
  </sect1>

  <sect1 xml:id="chap-shell-inout">
    <title>Redirections and pipes</title>

    <para>
      One of the main features of UNIX-like shells are redirections
      and pipes.  Before we start to look at both techniques we have
      to look how most UNIX-like commands work. When a command is not
      getting data from a file, it will open a special pseudo-file
      named <emphasis>stdin</emphasis>, and wait for data to appear on
      it. The same principle can be applied for command output, when
      there is no explicit reason for saving output to a file, the
      pseudo-file <emphasis>stdout</emphasis> will be opened for
      output of data. This principle is shown schematically in <xref
      linkend="fig-shell-inout" />
    </para>

    <figure xml:id="fig-shell-inout">
      <title>Standard input and output</title>
      <mediaobject>
	<imageobject>
	  <imagedata fileref="../../images/shell-inout.png" format="PNG"/>
	</imageobject>
      </mediaobject>
    </figure>

    <para>
      You can see <emphasis>stdin</emphasis> and
      <emphasis>stdout</emphasis> in action with the
      <command>cat</command> command. If cat is started without any
      parameters it will just wait for input on
      <emphasis>stdin</emphasis> and output the same data on
      <emphasis>stdout</emphasis>. If no redirection is used keyboard
      input will be used for <emphasis>stdin</emphasis>, and
      <emphasis>stdout</emphasis> output will be printed to the
      terminal:
    </para>

    <screen>
$ <userinput>cat</userinput>
<command>Hello world!</command>
Hello world!
    </screen>

    <para>
      As you can see cat will print data to
      <emphasis>stdout</emphasis> after inputting data to
      <emphasis>stdin</emphasis> using the keyboard.
    </para>

    <sect2 xml:id="chap-shell-inout-redir">
      <title>Redirection</title>

      <para>
	The shell allows you to take use of <emphasis>stdin</emphasis>
	and <emphasis>stdout</emphasis> using the <quote>&lt;</quote>
	and <quote>&gt;</quote>. Data is redirected in which way the
	sharp bracket points. In the following example we will
	redirect the md5 summaries calculated for a set of files to a
	file named <filename>md5sums</filename>:
      </para>

      <screen>
$ <userinput>md5sum * &gt; md5sums</userinput>
$ <userinput>cat md5sums</userinput> 
6be249ef5cacb10014740f61793734a8  test1
220d2cc4d5d5fed2aa52f0f48da38ebe  test2
631172a1cfca3c7cf9e8d0a16e6e8cfe  test3
      </screen>

      <para>
	As we can see in the <command>cat</command> output the output
	of the <command>md5sum *</command> output was redirected to
	the <filename>md5sums</filename> file. We can also use
	redirection to provide input to a command:
      </para>

      <screen>
$ <userinput>md5sum &lt; test1</userinput>
6be249ef5cacb10014740f61793734a8  -
      </screen>

      <para>
	This feeds the contents of the <filename>test1</filename> to
	<command>md5sum</command>.
      </para>
    </sect2>

    <sect2 xml:id="chap-shell-inout-pipes">
      <title>Pipes</title>

      <para>
	You can also connect the input and output of commands using
	so-called <emphasis>pipes</emphasis>. A pipe between commands
	can be made with the <quote>|</quote> character. Two or more
	combined commands are called a
	<emphasis>pipeline</emphasis>. <xref
	linkend="fig-shell-pipeline" /> shows a schematic overview of
	a pipeline consisting of two commands.
      </para>

      <figure xml:id="fig-shell-pipeline">
	<title>A pipeline</title>
	<mediaobject>
	  <imageobject>
	    <imagedata fileref="../../images/shell-pipeline.png" format="PNG"/>
	  </imageobject>
	</mediaobject>
      </figure>

      <para>
	The <quote>syntax</quote> of a pipeline is: <command>command1
	| command2 ... | commandn</command>. If you know how the most
	basic UNIX-like commands work you can now let these commands
	work together. Let's look at a quick example:
      </para>

      <screen>
$ <userinput>cat /usr/share/dict/american-english | grep "aba" | wc -l</userinput>
123
      </screen>

      <para>
	The first command, <command>cat</command>, reads the
	dictionary file
	<filename>/usr/share/dict/american-english</filename>. The
	output of the <command>cat</command> command is piped to
	<command>grep</command>, which prints out all files containing
	the phrase <quote>aba</quote>.  In turn, the output of
	<quote>grep</quote> is piped to <command>wc -l</command>,
	which counts the number of lines it receives from
	<emphasis>stdin</emphasis>. Finally, when the stream is
	finished <command>wc</command> prints the number of lines it
	counted. So, combined three commands to count the number of
	words containing the phrase <quote>aba</quote> in this
	particular dictionary.
      </para>

      <para>
	There are hundreds of small utilities that handle specific
	tasks. As you can imagine, together these commands provide a
	very powerful toolbox by making combinations using pipes.
      </para>
    </sect2>
  </sect1>
</chapter>
