<!-- $Id: pkgmgmt.xml,v 1.1 2004/11/06 23:17:47 daniel Exp $ -->

<chapter> <?dbhtml filename="pkgmgmt.html"?>
<title>Package Management</title>

<sect1>
<title>Pkgtools</title>

<sect2>
<title>Introduction</title>

<para>
Slackware does not use a complex package system, unlike many other
Linux distributions. Package have the <filename>.tgz</filename>
extension, and are usually ordinary tarballs which contain two
extra files: an installation script and a package description file.
Due to the simplicity of the packages the Slackware package tools
do not have the means to handle dependencies. But many Slackware users
prefer this approach, because dependencies often cause more problems
than they solve.
</para>

<para>
Slackware has a few tools to handle packages. The most important
tools will be covered in this chapter. To learn to understand the
tools we need to have a look at package naming. Let's have a look
at an example, imagine that we have a package with the file name
<filename>bash-2.05b-i386-2.tgz</filename>. In this case the name
of the package is bash-2.05b-i386-2. In the package name information
about the package is separated by the '-' character. A package
name has the following meaning: 
"programname-version-architecture-packagerevision"
</para>
</sect2>

<sect2>

<title>pkgtool</title>

<para>
The <command>pkgtool</command> command provides a menu interface
for some package operations. De most important menu items are
"Remove" and "Setup". De "Remove" option presents a list of
installed packages. You can select which packages you want to
remove with the space bar and confirm your choices with the
return key. You can also deselect a package for removal with
the space bar.
</para>

<para>
The "Setup" options provides access to a few tools which can help
you with configuring your system, for example:
<command>netconfig</command>, <command>pppconfig</command> and
<command>xwmconfig</command>.
</para>

</sect2>

<sect2>

<title>installpkg</title>

<para>
The <command>installpkg</command> command is used to install packages.
<command>installpkg</command> needs a package file as a parameter.
For example, if you want to install the package
<filename>bash-2.05b-i386-2.tgz</filename> execute:
</para>

<screen>
# <command>installpkg bash-2.05b-i386-2.tgz</command>
</screen>

</sect2>

<sect2>

<title>upgradepkg</title>

<para>
<command>upgradepkg</command> can be used to upgrade packages. In contrast
to <command>installpkg</command> it only installs packages when there is
an older version available on the system. The command syntax is comparable
to <command>installpkg</command>. For example, if you want to upgrade
packages using package in a directory execute: 
</para>

<screen>
# <command>upgradepkg *.tgz</command>
</screen>

<para>
As said only those packages will be installed of which an other
version is already installed on the system.
</para>

</sect2>

<sect2>

<title>removepkg</title>

<para>
The <command>removepkg</command> can be used to remove installed
packages. For example, if you want to remove the "bash" package
(it is not recommended to do that!), you can execute:
</para>

<screen>
# <command>removepkg bash</command>
</screen>

<para>
As you can see only the name of the package is specified in
this example. You can also remove a package by specifying its
full name:
</para>

<screen>
# <command>removepkg bash-2.05b-i386-2</command>
</screen>

</sect2>
</sect1>

<sect1>
<title>Slackpkg</title>

<sect2>
<title>Introduction</title>

<para>
Slackpkg is a package tool written by  Roberto F. Batista and Evaldo Gardenali.
It helps users to install and upgrade Slackware Linux packages using one of
the Slackware mirrors. Slackpkg is included in the <filename>extra/</filename>
directory on the second CD of the Slackware CD set.
</para>
</sect2>

<sect2>
<title>Configuration</title>

<para>
Slackpkg is configured through some files in 
<filename>/etc/slackpkg</filename>. The first thing you should do is
configuring which mirror slackpkg should use. This can be done by
editing the <filename>/etc/slackpkg/mirrors</filename>. This file
already contains a list of mirrors, you can just uncomment a mirror
close to you. For example:
</para>

<screen>
ftp://ftp.nluug.nl/pub/os/Linux/distr/slackware/slackware-10.0/
</screen>

<para>
This will use the Slackware Linux 10.0 tree on the ftp.nluug.nl mirror.
Be sure to use a tree that matches your Slackware version. If you would
like to track slackware-current you would uncomment the following line
instead (when you would like to use the NLUUG mirror):
</para>

<screen>
ftp://ftp.nluug.nl/pub/os/Linux/distr/slackware/slackware-current/
</screen>

<para>
Slackpkg will only accept one mirror. Commenting out more mirrors will
not work.
</para>
</sect2>

<sect2>
<title>Importing the Slackware GPG key</title>

<para>
By default slackpkg checks packages using the
package signatures and the public Slackware GPG key. Since this
is a good idea from a security point of view, you probably do
not want to change this behaviour. To be able to verify packages
you have to import the <emphasis>security@slackware.com</emphasis>
GPG key. If you have not used GPG before you have to create the GPG
directory in the home directory of the <emphasis>root</emphasis>
user:
</para>

<screen>
# <command>mkdir ~/.gnupg</command>
</screen>

<para>
The next step is to search for the public key of 
<emphasis>security@slackware.com</emphasis>. We will do this
by querying the <emphasis>pgp.mit.edu</emphasis> server:
</para>

<screen>
# <command>gpg --keyserver pgp.mit.edu --search security@slackware.com</command>
gpg: keyring `/root/.gnupg/secring.gpg' created
gpg: keyring `/root/.gnupg/pubring.gpg' created
gpg: searching for "security@slackware.com" from HKP server pgp.mit.edu
Keys 1-2 of 2 for "security@slackware.com"
(1)     Slackware Linux Project &lt;security@slackware.com&gt;
          1024 bit DSA key 40102233, created 2003-02-25
(2)     Slackware Linux Project &lt;security@slackware.com&gt;
          1024 bit DSA key 40102233, created 2003-02-25
Enter number(s), N)ext, or Q)uit &gt; 
</screen>

<para>
As you can see we have got two (identical) hits. Select the first
one by entering <quote>1</quote>. GnuPG will import this key in
the keyring of the <emphasis>root</emphasis> user:
</para>

<screen>
Enter number(s), N)ext, or Q)uit > <command>1</command>
gpg: key 40102233: duplicated user ID detected - merged
gpg: /root/.gnupg/trustdb.gpg: trustdb created
gpg: key 40102233: public key "Slackware Linux Project &lt;security@slackware.com&gt;" imported
gpg: Total number processed: 1
gpg:               imported: 1
</screen>

<para>
Be sure to double check the key you received. The key ID and fingerprint
of this particular key can be found on the Internet on many trustworthy
sites. The key ID is, as mentioned above <emphasis>40102233</emphasis>.
You can get the key fingerprint with the <parameter>--fingerprint</parameter>
parameter:
</para>

<screen>
# <command>gpg --fingerprint security@slackware.com</command>
pub  1024D/40102233 2003-02-26 Slackware Linux Project &lt;security@slackware.com&gt;
     Key fingerprint = EC56 49DA 401E 22AB FA67  36EF 6A44 63C0 4010 2233
sub  1024g/4E523569 2003-02-26 [expires: 2012-12-21]
</screen>

<para>
Onced you have imported and checked this key you can start to use
slackpkg, and install packages securely.
</para>
</sect2>

<sect2>
<title>Updating the package lists</title>

<para>
Before upgrading and installing packages you have to let slackpkg download
the package lists from the mirror you are using. It is a good idea to
do this regularly to keep these lists up to date. The latest package
lists can be fetched with:
</para>

<screen>
$ <command>slackpkg update</command>
</screen>
</sect2>

<sect2>
<title>Upgrading packages</title>

<para>
The <parameter>upgrade</parameter> parameter is used to upgrade installed
packages. You have to add an extra parameter to actually tell
<command>slackpkg</command> what you want to upgrade, this differs
for a stable Slackware version and slackware-current. Upgrades
for stable Slackware releases are in the <filename>patches</filename>
directory of FTP mirrors. You can update a slackware-stable installation
(e.g. Slackware Linux 10.0) with:
</para>

<screen>
# <command>slackpkg upgrade patches</command>
</screen>

<para>
In this case <command>slackpkg</command> will use the packages
from the <filename>patches</filename> directory. In slackware-current
updated packages are put in the normal <filename>slackware</filename>
package sub-directories. So, we can pass that as an parameter
to <command>slackpkg upgrade</command>:
</para>

<screen>
# <command>slackpkg upgrade slackware</command>
</screen>

<para>
You can also upgrade individual packages by specifying the name
of the package to be upgraded, for example:
</para>

<screen>
# <command>slackpkg upgrade pine</command>
</screen>
</sect2>

<sect2>
<title>Installing packages</title>

<para>
The <parameter>install</parameter> is used to install packages:
</para>

<screen>
# <command>slackpkg install rexima</command>
</screen>

<para>
Be aware that neither slackpkg, nor the Slackware package tools do
dependency checking. If some program does not work due to missing
libraries, you have to add them yourself with slackpkg.
</para>
</sect2>

</sect1>

</chapter>
